
F103_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005d28  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd5c  0800bd5c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd5c  0800bd5c  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd5c  0800bd5c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800bd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ba0  200000c0  0800be24  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c60  0800be24  00022c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac86  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8e  00000000  00000000  0002ad6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002cd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f6  00000000  00000000  0002e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd21  00000000  00000000  00046d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a60d  00000000  00000000  00053a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de094  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b24  00000000  00000000  000de0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800601c 	.word	0x0800601c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	0800601c 	.word	0x0800601c

0800014c <VGA_update>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VGA_update(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	vga_voff[0]=VOFFSET;
 8000152:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <VGA_update+0x44>)
 8000154:	881a      	ldrh	r2, [r3, #0]
 8000156:	4b0f      	ldr	r3, [pc, #60]	; (8000194 <VGA_update+0x48>)
 8000158:	801a      	strh	r2, [r3, #0]
	for(int i=1;i<16;i++){
 800015a:	2301      	movs	r3, #1
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	e00d      	b.n	800017c <VGA_update+0x30>
		vga_voff[i]=vga_voff[i-1]+VGA_LBUFFERSIZE;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3b01      	subs	r3, #1
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <VGA_update+0x48>)
 8000166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800016a:	3380      	adds	r3, #128	; 0x80
 800016c:	b299      	uxth	r1, r3
 800016e:	4a09      	ldr	r2, [pc, #36]	; (8000194 <VGA_update+0x48>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=1;i<16;i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	ddee      	ble.n	8000160 <VGA_update+0x14>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200001f8 	.word	0x200001f8
 8000194:	20000200 	.word	0x20000200

08000198 <tetrisDelay>:

extern void tetrisDelay(int ms){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fa2a 	bl	80025fc <HAL_Delay>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <getch>:

extern uint8_t getch(uint8_t *ch){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<4;i++){
 80001b8:	2300      	movs	r3, #0
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	e00c      	b.n	80001d8 <getch+0x28>
		//Prime row output for ready to bring col to ground
		HAL_GPIO_WritePin(keyPort,keyRowPin[i],0);
 80001be:	4b31      	ldr	r3, [pc, #196]	; (8000284 <getch+0xd4>)
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	4a31      	ldr	r2, [pc, #196]	; (8000288 <getch+0xd8>)
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ca:	2200      	movs	r2, #0
 80001cc:	4619      	mov	r1, r3
 80001ce:	f002 ffc8 	bl	8003162 <HAL_GPIO_WritePin>
	for(int i=0;i<4;i++){
 80001d2:	697b      	ldr	r3, [r7, #20]
 80001d4:	3301      	adds	r3, #1
 80001d6:	617b      	str	r3, [r7, #20]
 80001d8:	697b      	ldr	r3, [r7, #20]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	ddef      	ble.n	80001be <getch+0xe>
	}
	//Detect column pressed
	int i,j;
	for(i=0;i<3;i++){
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	e034      	b.n	800024e <getch+0x9e>
		if(HAL_GPIO_ReadPin(keyPort,keyColPin[i])==0){
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <getch+0xd4>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	4928      	ldr	r1, [pc, #160]	; (800028c <getch+0xdc>)
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4610      	mov	r0, r2
 80001f4:	f002 ff9e 	bl	8003134 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d121      	bne.n	8000242 <getch+0x92>
			//Testing for row
			for(j=0;j<4;j++){
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e019      	b.n	8000238 <getch+0x88>
				HAL_GPIO_WritePin(keyPort,keyRowPin[j],1);
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getch+0xd4>)
 8000206:	6818      	ldr	r0, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getch+0xd8>)
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000210:	2201      	movs	r2, #1
 8000212:	4619      	mov	r1, r3
 8000214:	f002 ffa5 	bl	8003162 <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(keyPort,keyColPin[i]))
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <getch+0xd4>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <getch+0xdc>)
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000224:	4619      	mov	r1, r3
 8000226:	4610      	mov	r0, r2
 8000228:	f002 ff84 	bl	8003134 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d106      	bne.n	8000240 <getch+0x90>
			for(j=0;j<4;j++){
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	3301      	adds	r3, #1
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b03      	cmp	r3, #3
 800023c:	dde2      	ble.n	8000204 <getch+0x54>
 800023e:	e000      	b.n	8000242 <getch+0x92>
					break;
 8000240:	bf00      	nop
			}
	    }
		if(j<4)break;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b03      	cmp	r3, #3
 8000246:	dd06      	ble.n	8000256 <getch+0xa6>
	for(i=0;i<3;i++){
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	3301      	adds	r3, #1
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	2b02      	cmp	r3, #2
 8000252:	ddc7      	ble.n	80001e4 <getch+0x34>
 8000254:	e000      	b.n	8000258 <getch+0xa8>
		if(j<4)break;
 8000256:	bf00      	nop
	}
    if(i<3){  //a key is pressed
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b02      	cmp	r3, #2
 800025c:	dc0d      	bgt.n	800027a <getch+0xca>
    	*ch = keyMap[j][i];
 800025e:	490c      	ldr	r1, [pc, #48]	; (8000290 <getch+0xe0>)
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4613      	mov	r3, r2
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	4413      	add	r3, r2
 8000268:	693a      	ldr	r2, [r7, #16]
 800026a:	4413      	add	r3, r2
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	701a      	strb	r2, [r3, #0]
    	return 1;
 8000276:	2301      	movs	r3, #1
 8000278:	e000      	b.n	800027c <getch+0xcc>
    }
    return 0;
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000004 	.word	0x20000004
 8000288:	20000008 	.word	0x20000008
 800028c:	20000010 	.word	0x20000010
 8000290:	20000018 	.word	0x20000018

08000294 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
     if(htim==&htim2){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a19      	ldr	r2, [pc, #100]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d12b      	bne.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x68>
     //V-sync detected
		line=-4;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002a6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80002aa:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d023      	beq.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x68>
			for(int i=0;i<preVoffset;i++);
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e002      	b.n	80002c0 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	461a      	mov	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	4293      	cmp	r3, r2
 80002ca:	dbf6      	blt.n	80002ba <HAL_TIM_PeriodElapsedCallback+0x26>
			if(
            HAL_DMA_Start_IT(&hdma_tim4_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 80002cc:	4911      	ldr	r1, [pc, #68]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002d6:	4811      	ldr	r0, [pc, #68]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002d8:	f002 fb1c 	bl	8002914 <HAL_DMA_Start_IT>
 80002dc:	4603      	mov	r3, r0
			if(
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d009      	beq.n	80002f6 <HAL_TIM_PeriodElapsedCallback+0x62>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80002e8:	f002 ff53 	bl	8003192 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f002 f984 	bl	80025fc <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80002f4:	e7f5      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
			}
			firstTrig=0;
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000124 	.word	0x20000124
 8000308:	200001fc 	.word	0x200001fc
 800030c:	20000002 	.word	0x20000002
 8000310:	20000000 	.word	0x20000000
 8000314:	200006fc 	.word	0x200006fc
 8000318:	20000220 	.word	0x20000220
 800031c:	200001b4 	.word	0x200001b4
 8000320:	40011000 	.word	0x40011000

08000324 <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 800032e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	db04      	blt.n	8000340 <DMA_HalfCpltCallback+0x1c>
 8000336:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 8000338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800033c:	2b4a      	cmp	r3, #74	; 0x4a
 800033e:	dd06      	ble.n	800034e <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000344:	2100      	movs	r1, #0
 8000346:	4827      	ldr	r0, [pc, #156]	; (80003e4 <DMA_HalfCpltCallback+0xc0>)
 8000348:	f004 fc26 	bl	8004b98 <memset>
 800034c:	e01c      	b.n	8000388 <DMA_HalfCpltCallback+0x64>
	}else{
		for(int i=0;i<8;i++){
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	e016      	b.n	8000382 <DMA_HalfCpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <DMA_HalfCpltCallback+0xc4>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800035c:	461a      	mov	r2, r3
 800035e:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <DMA_HalfCpltCallback+0xc0>)
 8000360:	18d0      	adds	r0, r2, r3
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 8000364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000368:	461a      	mov	r2, r3
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <DMA_HalfCpltCallback+0xc8>)
 8000372:	4413      	add	r3, r2
 8000374:	2264      	movs	r2, #100	; 0x64
 8000376:	4619      	mov	r1, r3
 8000378:	f004 fc00 	bl	8004b7c <memcpy>
		for(int i=0;i<8;i++){
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b07      	cmp	r3, #7
 8000386:	dde5      	ble.n	8000354 <DMA_HalfCpltCallback+0x30>
		}
	}
	line++;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 800038a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038e:	b29b      	uxth	r3, r3
 8000390:	3301      	adds	r3, #1
 8000392:	b29b      	uxth	r3, r3
 8000394:	b21a      	sxth	r2, r3
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 8000398:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <DMA_HalfCpltCallback+0xcc>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00a      	beq.n	80003b8 <DMA_HalfCpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003a2:	4814      	ldr	r0, [pc, #80]	; (80003f4 <DMA_HalfCpltCallback+0xd0>)
 80003a4:	f002 fb50 	bl	8002a48 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <DMA_HalfCpltCallback+0xd4>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <DMA_HalfCpltCallback+0xcc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80003b4:	f7ff feca 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 80003ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003be:	2b4a      	cmp	r3, #74	; 0x4a
 80003c0:	dd09      	ble.n	80003d6 <DMA_HalfCpltCallback+0xb2>
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <DMA_HalfCpltCallback+0xd4>)
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d105      	bne.n	80003d6 <DMA_HalfCpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <DMA_HalfCpltCallback+0xd0>)
 80003cc:	f002 fb3c 	bl	8002a48 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <DMA_HalfCpltCallback+0xd4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	801a      	strh	r2, [r3, #0]
	}
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200001fc 	.word	0x200001fc
 80003e4:	200006fc 	.word	0x200006fc
 80003e8:	20000200 	.word	0x20000200
 80003ec:	20000efc 	.word	0x20000efc
 80003f0:	200001fa 	.word	0x200001fa
 80003f4:	200001b4 	.word	0x200001b4
 80003f8:	20000002 	.word	0x20000002

080003fc <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800040a:	2b00      	cmp	r3, #0
 800040c:	db04      	blt.n	8000418 <DMA_CpltCallback+0x1c>
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000414:	2b4a      	cmp	r3, #74	; 0x4a
 8000416:	dd06      	ble.n	8000426 <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800041c:	2100      	movs	r1, #0
 800041e:	4827      	ldr	r0, [pc, #156]	; (80004bc <DMA_CpltCallback+0xc0>)
 8000420:	f004 fbba 	bl	8004b98 <memset>
 8000424:	e01c      	b.n	8000460 <DMA_CpltCallback+0x64>
	}else{
		for(int i=8;i<16;i++){
 8000426:	2308      	movs	r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e016      	b.n	800045a <DMA_CpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 800042c:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <DMA_CpltCallback+0xc4>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000434:	461a      	mov	r2, r3
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <DMA_CpltCallback+0xc0>)
 8000438:	18d0      	adds	r0, r2, r3
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <DMA_CpltCallback+0xbc>)
 800043c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000440:	461a      	mov	r2, r3
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	fb02 f303 	mul.w	r3, r2, r3
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <DMA_CpltCallback+0xc8>)
 800044a:	4413      	add	r3, r2
 800044c:	2264      	movs	r2, #100	; 0x64
 800044e:	4619      	mov	r1, r3
 8000450:	f004 fb94 	bl	8004b7c <memcpy>
		for(int i=8;i<16;i++){
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3301      	adds	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	dde5      	ble.n	800042c <DMA_CpltCallback+0x30>
		}
	}
	line++;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000466:	b29b      	uxth	r3, r3
 8000468:	3301      	adds	r3, #1
 800046a:	b29b      	uxth	r3, r3
 800046c:	b21a      	sxth	r2, r3
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000470:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <DMA_CpltCallback+0xcc>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00a      	beq.n	8000490 <DMA_CpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <DMA_CpltCallback+0xd0>)
 800047c:	f002 fae4 	bl	8002a48 <HAL_DMA_Abort_IT>
		firstTrig=1;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <DMA_CpltCallback+0xd4>)
 8000482:	2201      	movs	r2, #1
 8000484:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <DMA_CpltCallback+0xcc>)
 8000488:	2200      	movs	r2, #0
 800048a:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800048c:	f7ff fe5e 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000496:	2b4a      	cmp	r3, #74	; 0x4a
 8000498:	dd09      	ble.n	80004ae <DMA_CpltCallback+0xb2>
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <DMA_CpltCallback+0xd4>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d105      	bne.n	80004ae <DMA_CpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80004a2:	480a      	ldr	r0, [pc, #40]	; (80004cc <DMA_CpltCallback+0xd0>)
 80004a4:	f002 fad0 	bl	8002a48 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <DMA_CpltCallback+0xd4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	801a      	strh	r2, [r3, #0]
	}
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200001fc 	.word	0x200001fc
 80004bc:	200006fc 	.word	0x200006fc
 80004c0:	20000200 	.word	0x20000200
 80004c4:	20000efc 	.word	0x20000efc
 80004c8:	200001fa 	.word	0x200001fa
 80004cc:	200001b4 	.word	0x200001b4
 80004d0:	20000002 	.word	0x20000002

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b093      	sub	sp, #76	; 0x4c
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  VGA_update();
 80004da:	f7ff fe37 	bl	800014c <VGA_update>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f002 f82b 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 fa5d 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fc23 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 fc03 	bl	8000cf4 <MX_DMA_Init>
  MX_TIM1_Init();
 80004ee:	f000 fa9d 	bl	8000a2c <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f2:	f000 fb3b 	bl	8000b6c <MX_TIM2_Init>
  MX_TIM4_Init();
 80004f6:	f000 fbb1 	bl	8000c5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim4_up);
 80004fa:	4813      	ldr	r0, [pc, #76]	; (8000548 <main+0x74>)
 80004fc:	f002 fa69 	bl	80029d2 <HAL_DMA_Abort>
    if(
    	  HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <main+0x78>)
 8000502:	2101      	movs	r1, #1
 8000504:	4810      	ldr	r0, [pc, #64]	; (8000548 <main+0x74>)
 8000506:	f002 fc1b 	bl	8002d40 <HAL_DMA_RegisterCallback>
 800050a:	4603      	mov	r3, r0
    if(
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <main+0x50>
    	  !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x7c>)
 8000516:	f002 fe3c 	bl	8003192 <HAL_GPIO_TogglePin>
    		  HAL_Delay(500);
 800051a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051e:	f002 f86d 	bl	80025fc <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000522:	e7f5      	b.n	8000510 <main+0x3c>
    	  }
    }
    if(
          HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <main+0x80>)
 8000526:	2100      	movs	r1, #0
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <main+0x74>)
 800052a:	f002 fc09 	bl	8002d40 <HAL_DMA_RegisterCallback>
 800052e:	4603      	mov	r3, r0
    if(
 8000530:	2b00      	cmp	r3, #0
 8000532:	d011      	beq.n	8000558 <main+0x84>
          !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x7c>)
 800053a:	f002 fe2a 	bl	8003192 <HAL_GPIO_TogglePin>
    		  HAL_Delay(250);
 800053e:	20fa      	movs	r0, #250	; 0xfa
 8000540:	f002 f85c 	bl	80025fc <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000544:	e7f6      	b.n	8000534 <main+0x60>
 8000546:	bf00      	nop
 8000548:	200001b4 	.word	0x200001b4
 800054c:	08000325 	.word	0x08000325
 8000550:	40011000 	.word	0x40011000
 8000554:	080003fd 	.word	0x080003fd
    	  }
    }
    GPIOB_ODR = (uint32_t)&(GPIOB->ODR)+1;
 8000558:	4bc1      	ldr	r3, [pc, #772]	; (8000860 <main+0x38c>)
 800055a:	4ac2      	ldr	r2, [pc, #776]	; (8000864 <main+0x390>)
 800055c:	601a      	str	r2, [r3, #0]

    //Start GPIO-DMA output
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_TC);
 800055e:	4bc2      	ldr	r3, [pc, #776]	; (8000868 <main+0x394>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4bc0      	ldr	r3, [pc, #768]	; (8000868 <main+0x394>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 0202 	orr.w	r2, r2, #2
 800056c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_HT);
 800056e:	4bbe      	ldr	r3, [pc, #760]	; (8000868 <main+0x394>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4bbc      	ldr	r3, [pc, #752]	; (8000868 <main+0x394>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f042 0204 	orr.w	r2, r2, #4
 800057c:	601a      	str	r2, [r3, #0]
    __HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_UPDATE);
 800057e:	4bbb      	ldr	r3, [pc, #748]	; (800086c <main+0x398>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	4bb9      	ldr	r3, [pc, #740]	; (800086c <main+0x398>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800058c:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start(&htim4);
 800058e:	48b7      	ldr	r0, [pc, #732]	; (800086c <main+0x398>)
 8000590:	f003 fa50 	bl	8003a34 <HAL_TIM_Base_Start>

    //Start H-sync
    HAL_TIM_Base_Start_IT(&htim1);
 8000594:	48b6      	ldr	r0, [pc, #728]	; (8000870 <main+0x39c>)
 8000596:	f003 fa97 	bl	8003ac8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	48b4      	ldr	r0, [pc, #720]	; (8000870 <main+0x39c>)
 800059e:	f003 fb3d 	bl	8003c1c <HAL_TIM_PWM_Start>

    //Start V-sync
    HAL_TIM_Base_Start_IT(&htim2);
 80005a2:	48b4      	ldr	r0, [pc, #720]	; (8000874 <main+0x3a0>)
 80005a4:	f003 fa90 	bl	8003ac8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	48b2      	ldr	r0, [pc, #712]	; (8000874 <main+0x3a0>)
 80005ac:	f003 fb36 	bl	8003c1c <HAL_TIM_PWM_Start>



    HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f002 f823 	bl	80025fc <HAL_Delay>
    vga_stop=1;
 80005b6:	4bb0      	ldr	r3, [pc, #704]	; (8000878 <main+0x3a4>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	801a      	strh	r2, [r3, #0]

    ClearScreen(VGA_BLACK);
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 faff 	bl	8001bc0 <ClearScreen>
    DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2348      	movs	r3, #72	; 0x48
 80005c8:	2263      	movs	r2, #99	; 0x63
 80005ca:	2100      	movs	r1, #0
 80005cc:	2000      	movs	r0, #0
 80005ce:	f001 fdc3 	bl	8002158 <DrawRectangle>
    char msg[32]="Testing";
 80005d2:	4aaa      	ldr	r2, [pc, #680]	; (800087c <main+0x3a8>)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005da:	e883 0003 	stmia.w	r3, {r0, r1}
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
    SetCursor(3,3);
 80005f0:	2103      	movs	r1, #3
 80005f2:	2003      	movs	r0, #3
 80005f4:	f001 fcf0 	bl	8001fd8 <SetCursor>
    WriteString(msg,Font_7x10,VGA_GREEN);
 80005f8:	4aa1      	ldr	r2, [pc, #644]	; (8000880 <main+0x3ac>)
 80005fa:	1d38      	adds	r0, r7, #4
 80005fc:	231c      	movs	r3, #28
 80005fe:	ca06      	ldmia	r2, {r1, r2}
 8000600:	f001 fcc4 	bl	8001f8c <WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int r,x,y,w,h,z=0,c;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
// If you want to only try Tetris, uncomment here
//	  tetris();
//	  continue;

	  r = rand()%25;
 8000608:	f004 fafc 	bl	8004c04 <rand>
 800060c:	4602      	mov	r2, r0
 800060e:	4b9d      	ldr	r3, [pc, #628]	; (8000884 <main+0x3b0>)
 8000610:	fb83 1302 	smull	r1, r3, r3, r2
 8000614:	10d9      	asrs	r1, r3, #3
 8000616:	17d3      	asrs	r3, r2, #31
 8000618:	1ac9      	subs	r1, r1, r3
 800061a:	460b      	mov	r3, r1
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	440b      	add	r3, r1
 8000620:	0099      	lsls	r1, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000628:	f004 faec 	bl	8004c04 <rand>
 800062c:	4603      	mov	r3, r0
 800062e:	4a95      	ldr	r2, [pc, #596]	; (8000884 <main+0x3b0>)
 8000630:	fb82 1203 	smull	r1, r2, r2, r3
 8000634:	1151      	asrs	r1, r2, #5
 8000636:	17da      	asrs	r2, r3, #31
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	2164      	movs	r1, #100	; 0x64
 800063c:	fb01 f202 	mul.w	r2, r1, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000644:	f004 fade 	bl	8004c04 <rand>
 8000648:	4602      	mov	r2, r0
 800064a:	4b8f      	ldr	r3, [pc, #572]	; (8000888 <main+0x3b4>)
 800064c:	fb83 1302 	smull	r1, r3, r3, r2
 8000650:	4413      	add	r3, r2
 8000652:	1199      	asrs	r1, r3, #6
 8000654:	17d3      	asrs	r3, r2, #31
 8000656:	1ac9      	subs	r1, r1, r3
 8000658:	460b      	mov	r3, r1
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	440b      	add	r3, r1
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	440b      	add	r3, r1
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000666:	f004 facd 	bl	8004c04 <rand>
 800066a:	4603      	mov	r3, r0
 800066c:	425a      	negs	r2, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	bf58      	it	pl
 8000674:	4253      	negpl	r3, r2
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 8000678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067a:	b218      	sxth	r0, r3
 800067c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067e:	b219      	sxth	r1, r3
 8000680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000682:	b21a      	sxth	r2, r3
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f001 fcd4 	bl	8002034 <DrawCircle>
	  r = rand()%25;
 800068c:	f004 faba 	bl	8004c04 <rand>
 8000690:	4602      	mov	r2, r0
 8000692:	4b7c      	ldr	r3, [pc, #496]	; (8000884 <main+0x3b0>)
 8000694:	fb83 1302 	smull	r1, r3, r3, r2
 8000698:	10d9      	asrs	r1, r3, #3
 800069a:	17d3      	asrs	r3, r2, #31
 800069c:	1ac9      	subs	r1, r1, r3
 800069e:	460b      	mov	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	0099      	lsls	r1, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 80006ac:	f004 faaa 	bl	8004c04 <rand>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a74      	ldr	r2, [pc, #464]	; (8000884 <main+0x3b0>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1151      	asrs	r1, r2, #5
 80006ba:	17da      	asrs	r2, r3, #31
 80006bc:	1a8a      	subs	r2, r1, r2
 80006be:	2164      	movs	r1, #100	; 0x64
 80006c0:	fb01 f202 	mul.w	r2, r1, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80006c8:	f004 fa9c 	bl	8004c04 <rand>
 80006cc:	4602      	mov	r2, r0
 80006ce:	4b6e      	ldr	r3, [pc, #440]	; (8000888 <main+0x3b4>)
 80006d0:	fb83 1302 	smull	r1, r3, r3, r2
 80006d4:	4413      	add	r3, r2
 80006d6:	1199      	asrs	r1, r3, #6
 80006d8:	17d3      	asrs	r3, r2, #31
 80006da:	1ac9      	subs	r1, r1, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	440b      	add	r3, r1
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	440b      	add	r3, r1
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 80006ea:	f004 fa8b 	bl	8004c04 <rand>
 80006ee:	4603      	mov	r3, r0
 80006f0:	425a      	negs	r2, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	bf58      	it	pl
 80006f8:	4253      	negpl	r3, r2
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	b218      	sxth	r0, r3
 8000700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000702:	b219      	sxth	r1, r3
 8000704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000706:	b21a      	sxth	r2, r3
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f001 fdad 	bl	800226a <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000710:	f004 fa78 	bl	8004c04 <rand>
 8000714:	4603      	mov	r3, r0
 8000716:	4a5b      	ldr	r2, [pc, #364]	; (8000884 <main+0x3b0>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1151      	asrs	r1, r2, #5
 800071e:	17da      	asrs	r2, r3, #31
 8000720:	1a8a      	subs	r2, r1, r2
 8000722:	2164      	movs	r1, #100	; 0x64
 8000724:	fb01 f202 	mul.w	r2, r1, r2
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 800072c:	f004 fa6a 	bl	8004c04 <rand>
 8000730:	4602      	mov	r2, r0
 8000732:	4b55      	ldr	r3, [pc, #340]	; (8000888 <main+0x3b4>)
 8000734:	fb83 1302 	smull	r1, r3, r3, r2
 8000738:	4413      	add	r3, r2
 800073a:	1199      	asrs	r1, r3, #6
 800073c:	17d3      	asrs	r3, r2, #31
 800073e:	1ac9      	subs	r1, r1, r3
 8000740:	460b      	mov	r3, r1
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 800074e:	f004 fa59 	bl	8004c04 <rand>
 8000752:	4602      	mov	r2, r0
 8000754:	4b4d      	ldr	r3, [pc, #308]	; (800088c <main+0x3b8>)
 8000756:	fb83 1302 	smull	r1, r3, r3, r2
 800075a:	4413      	add	r3, r2
 800075c:	1119      	asrs	r1, r3, #4
 800075e:	17d3      	asrs	r3, r2, #31
 8000760:	1ac9      	subs	r1, r1, r3
 8000762:	460b      	mov	r3, r1
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	1a5b      	subs	r3, r3, r1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 800076e:	f004 fa49 	bl	8004c04 <rand>
 8000772:	4602      	mov	r2, r0
 8000774:	4b45      	ldr	r3, [pc, #276]	; (800088c <main+0x3b8>)
 8000776:	fb83 1302 	smull	r1, r3, r3, r2
 800077a:	4413      	add	r3, r2
 800077c:	1119      	asrs	r1, r3, #4
 800077e:	17d3      	asrs	r3, r2, #31
 8000780:	1ac9      	subs	r1, r1, r3
 8000782:	460b      	mov	r3, r1
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	1a5b      	subs	r3, r3, r1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 800078e:	f004 fa39 	bl	8004c04 <rand>
 8000792:	4603      	mov	r3, r0
 8000794:	425a      	negs	r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	bf58      	it	pl
 800079c:	4253      	negpl	r3, r2
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 80007a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a2:	b218      	sxth	r0, r3
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	b219      	sxth	r1, r3
 80007a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4413      	add	r3, r2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b21c      	sxth	r4, r3
 80007b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4413      	add	r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4613      	mov	r3, r2
 80007cc:	4622      	mov	r2, r4
 80007ce:	f001 fcc3 	bl	8002158 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 80007d2:	f004 fa17 	bl	8004c04 <rand>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <main+0x3b0>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	1151      	asrs	r1, r2, #5
 80007e0:	17da      	asrs	r2, r3, #31
 80007e2:	1a8a      	subs	r2, r1, r2
 80007e4:	2164      	movs	r1, #100	; 0x64
 80007e6:	fb01 f202 	mul.w	r2, r1, r2
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80007ee:	f004 fa09 	bl	8004c04 <rand>
 80007f2:	4602      	mov	r2, r0
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x3b4>)
 80007f6:	fb83 1302 	smull	r1, r3, r3, r2
 80007fa:	4413      	add	r3, r2
 80007fc:	1199      	asrs	r1, r3, #6
 80007fe:	17d3      	asrs	r3, r2, #31
 8000800:	1ac9      	subs	r1, r1, r3
 8000802:	460b      	mov	r3, r1
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	440b      	add	r3, r1
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 8000810:	f004 f9f8 	bl	8004c04 <rand>
 8000814:	4602      	mov	r2, r0
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <main+0x3b8>)
 8000818:	fb83 1302 	smull	r1, r3, r3, r2
 800081c:	4413      	add	r3, r2
 800081e:	1119      	asrs	r1, r3, #4
 8000820:	17d3      	asrs	r3, r2, #31
 8000822:	1ac9      	subs	r1, r1, r3
 8000824:	460b      	mov	r3, r1
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 8000830:	f004 f9e8 	bl	8004c04 <rand>
 8000834:	4602      	mov	r2, r0
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x3b8>)
 8000838:	fb83 1302 	smull	r1, r3, r3, r2
 800083c:	4413      	add	r3, r2
 800083e:	1119      	asrs	r1, r3, #4
 8000840:	17d3      	asrs	r3, r2, #31
 8000842:	1ac9      	subs	r1, r1, r3
 8000844:	460b      	mov	r3, r1
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	1a5b      	subs	r3, r3, r1
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000850:	f004 f9d8 	bl	8004c04 <rand>
 8000854:	4603      	mov	r3, r0
 8000856:	425a      	negs	r2, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	e018      	b.n	8000890 <main+0x3bc>
 800085e:	bf00      	nop
 8000860:	20000220 	.word	0x20000220
 8000864:	40010c0d 	.word	0x40010c0d
 8000868:	200001b4 	.word	0x200001b4
 800086c:	2000016c 	.word	0x2000016c
 8000870:	200000dc 	.word	0x200000dc
 8000874:	20000124 	.word	0x20000124
 8000878:	200001fa 	.word	0x200001fa
 800087c:	08006040 	.word	0x08006040
 8000880:	2000004c 	.word	0x2000004c
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	e070381d 	.word	0xe070381d
 800088c:	88888889 	.word	0x88888889
 8000890:	bf58      	it	pl
 8000892:	4253      	negpl	r3, r2
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 8000896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000898:	b218      	sxth	r0, r3
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	b219      	sxth	r1, r3
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	b21c      	sxth	r4, r3
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4623      	mov	r3, r4
 80008ae:	f001 fc9a 	bl	80021e6 <FillRectangle>
	      }
	  }
	  HAL_Delay(100);
	  continue;
	  */
	  z=z+1;
 80008b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b4:	3301      	adds	r3, #1
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 80008b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ba:	2b63      	cmp	r3, #99	; 0x63
 80008bc:	dd5c      	ble.n	8000978 <main+0x4a4>
		  /////////
		  ClearScreen(VGA_BLACK);
 80008be:	2000      	movs	r0, #0
 80008c0:	f001 f97e 	bl	8001bc0 <ClearScreen>
		  ShowImage((uint8_t *)colors,100,75,0,0);
 80008c4:	2300      	movs	r3, #0
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	224b      	movs	r2, #75	; 0x4b
 80008cc:	2164      	movs	r1, #100	; 0x64
 80008ce:	482c      	ldr	r0, [pc, #176]	; (8000980 <main+0x4ac>)
 80008d0:	f001 fdc2 	bl	8002458 <ShowImage>
		  HAL_Delay(5000);
 80008d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d8:	f001 fe90 	bl	80025fc <HAL_Delay>
		  ShowImage((uint8_t *)flower,100,63,0,0);
 80008dc:	2300      	movs	r3, #0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2300      	movs	r3, #0
 80008e2:	223f      	movs	r2, #63	; 0x3f
 80008e4:	2164      	movs	r1, #100	; 0x64
 80008e6:	4827      	ldr	r0, [pc, #156]	; (8000984 <main+0x4b0>)
 80008e8:	f001 fdb6 	bl	8002458 <ShowImage>
		  HAL_Delay(5000);
 80008ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80008f0:	f001 fe84 	bl	80025fc <HAL_Delay>
		  ShowImage((uint8_t *)rgb,100,75,0,0);
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	224b      	movs	r2, #75	; 0x4b
 80008fc:	2164      	movs	r1, #100	; 0x64
 80008fe:	4822      	ldr	r0, [pc, #136]	; (8000988 <main+0x4b4>)
 8000900:	f001 fdaa 	bl	8002458 <ShowImage>
		  HAL_Delay(5000);
 8000904:	f241 3088 	movw	r0, #5000	; 0x1388
 8000908:	f001 fe78 	bl	80025fc <HAL_Delay>

		  tetris();
 800090c:	f000 fca4 	bl	8001258 <tetris>
		  //////////
		  z=0;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 8000914:	2000      	movs	r0, #0
 8000916:	f001 f953 	bl	8001bc0 <ClearScreen>
		  HAL_Delay(100);
 800091a:	2064      	movs	r0, #100	; 0x64
 800091c:	f001 fe6e 	bl	80025fc <HAL_Delay>
		  vga_stop=1;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <main+0x4b8>)
 8000922:	2201      	movs	r2, #1
 8000924:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4919      	ldr	r1, [pc, #100]	; (8000990 <main+0x4bc>)
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f9a8 	bl	8004c80 <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000930:	23ff      	movs	r3, #255	; 0xff
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2348      	movs	r3, #72	; 0x48
 8000936:	2263      	movs	r2, #99	; 0x63
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f001 fc0c 	bl	8002158 <DrawRectangle>
		  SetCursor(3,3);
 8000940:	2103      	movs	r1, #3
 8000942:	2003      	movs	r0, #3
 8000944:	f001 fb48 	bl	8001fd8 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <main+0x4c0>)
 800094a:	1d38      	adds	r0, r7, #4
 800094c:	231c      	movs	r3, #28
 800094e:	ca06      	ldmia	r2, {r1, r2}
 8000950:	f001 fb1c 	bl	8001f8c <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <main+0x4c4>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	490f      	ldr	r1, [pc, #60]	; (800099c <main+0x4c8>)
 800095e:	4618      	mov	r0, r3
 8000960:	f004 f98e 	bl	8004c80 <siprintf>
		  SetCursor(3,50);
 8000964:	2132      	movs	r1, #50	; 0x32
 8000966:	2003      	movs	r0, #3
 8000968:	f001 fb36 	bl	8001fd8 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 800096c:	4a09      	ldr	r2, [pc, #36]	; (8000994 <main+0x4c0>)
 800096e:	1d38      	adds	r0, r7, #4
 8000970:	23ff      	movs	r3, #255	; 0xff
 8000972:	ca06      	ldmia	r2, {r1, r2}
 8000974:	f001 fb0a 	bl	8001f8c <WriteString>
	  }
	  HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f001 fe3f 	bl	80025fc <HAL_Delay>
	  r = rand()%25;
 800097e:	e643      	b.n	8000608 <main+0x134>
 8000980:	0800607c 	.word	0x0800607c
 8000984:	08007dc8 	.word	0x08007dc8
 8000988:	08009664 	.word	0x08009664
 800098c:	200001fa 	.word	0x200001fa
 8000990:	08006034 	.word	0x08006034
 8000994:	2000004c 	.word	0x2000004c
 8000998:	200001f8 	.word	0x200001f8
 800099c:	0800603c 	.word	0x0800603c

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b090      	sub	sp, #64	; 0x40
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	2228      	movs	r2, #40	; 0x28
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f8f2 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fbeb 	bl	80031c4 <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009f4:	f000 fa2e 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fc:	2302      	movs	r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2102      	movs	r1, #2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 fe58 	bl	80036c8 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a1e:	f000 fa19 	bl	8000e54 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3740      	adds	r7, #64	; 0x40
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2220      	movs	r2, #32
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 f897 	bl	8004b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <MX_TIM1_Init+0x13c>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8000a70:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a7e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a90:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a96:	4833      	ldr	r0, [pc, #204]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a98:	f002 ff7c 	bl	8003994 <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000aa2:	f000 f9d7 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482c      	ldr	r0, [pc, #176]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000ab4:	f003 fb1a 	bl	80040ec <HAL_TIM_ConfigClockSource>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000abe:	f000 f9c9 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac2:	4828      	ldr	r0, [pc, #160]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000ac4:	f003 f852 	bl	8003b6c <HAL_TIM_PWM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ace:	f000 f9c1 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ada:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4820      	ldr	r0, [pc, #128]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000ae2:	f003 ff5f 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000aec:	f000 f9b2 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 72-1;
 8000af4:	2347      	movs	r3, #71	; 0x47
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000b16:	f003 fa2b 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b20:	f000 f998 	bl	8000e54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000b48:	f003 ff8a 	bl	8004a60 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b52:	f000 f97f 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000b58:	f000 fa2a 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000b5c:	bf00      	nop
 8000b5e:	3758      	adds	r7, #88	; 0x58
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200000dc 	.word	0x200000dc
 8000b68:	40012c00 	.word	0x40012c00

08000b6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-2;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bb4:	f240 226f 	movw	r2, #623	; 0x26f
 8000bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bc8:	f002 fee4 	bl	8003994 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f93f 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bd6:	4820      	ldr	r0, [pc, #128]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bd8:	f002 ffc8 	bl	8003b6c <HAL_TIM_PWM_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000be2:	f000 f937 	bl	8000e54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000be6:	2307      	movs	r3, #7
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bf6:	f003 fb3d 	bl	8004274 <HAL_TIM_SlaveConfigSynchro>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c00:	f000 f928 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c04:	2320      	movs	r3, #32
 8000c06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000c14:	f003 fec6 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c1e:	f000 f919 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c22:	2360      	movs	r3, #96	; 0x60
 8000c24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000c3a:	f003 f999 	bl	8003f70 <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c44:	f000 f906 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000c4a:	f000 f9b1 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	; 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000124 	.word	0x20000124

08000c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <MX_TIM4_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c9e:	f002 fe79 	bl	8003994 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000ca8:	f000 f8d4 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM4_Init+0x90>)
 8000cba:	f003 fa17 	bl	80040ec <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000cc4:	f000 f8c6 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM4_Init+0x90>)
 8000cd6:	f003 fe65 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000ce0:	f000 f8b8 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000016c 	.word	0x2000016c
 8000cf0:	40000800 	.word	0x40000800

08000cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_DMA_Init+0x38>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <MX_DMA_Init+0x38>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x38>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2011      	movs	r0, #17
 8000d18:	f001 fd6b 	bl	80027f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d1c:	2011      	movs	r0, #17
 8000d1e:	f001 fd84 	bl	800282a <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a3e      	ldr	r2, [pc, #248]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a38      	ldr	r2, [pc, #224]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <MX_GPIO_Init+0x118>)
 8000dac:	f002 f9d9 	bl	8003162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <MX_GPIO_Init+0x11c>)
 8000db8:	f002 f9d3 	bl	8003162 <HAL_GPIO_WritePin>
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000dc2:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000dc4:	f002 f9cd 	bl	8003162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4819      	ldr	r0, [pc, #100]	; (8000e48 <MX_GPIO_Init+0x118>)
 8000de2:	f002 f823 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000dfa:	f002 f817 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : G0_Pin G1_Pin G2_Pin R0_Pin
                           R1_Pin R2_Pin B0_Pin B1_Pin */
  GPIO_InitStruct.Pin = G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000dfe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e02:	613b      	str	r3, [r7, #16]
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_GPIO_Init+0x11c>)
 8000e18:	f002 f808 	bl	8002e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000e1c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000e36:	f001 fff9 	bl	8002e2c <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40010800 	.word	0x40010800

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MspInit+0x60>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_MspInit+0x60>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000edc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eee:	e051      	b.n	8000f94 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d114      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201c      	movs	r0, #28
 8000f18:	f001 fc6b 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f1c:	201c      	movs	r0, #28
 8000f1e:	f001 fc84 	bl	800282a <HAL_NVIC_EnableIRQ>
}
 8000f22:	e037      	b.n	8000f94 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d132      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_up.Instance = DMA1_Channel7;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_TIM_Base_MspInit+0xe8>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f4e:	2210      	movs	r2, #16
 8000f50:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f72:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f7a:	f001 fc71 	bl	8002860 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 8000f84:	f7ff ff66 	bl	8000e54 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40000800 	.word	0x40000800
 8000fa8:	200001b4 	.word	0x200001b4
 8000fac:	40020080 	.word	0x40020080

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_TIM_MspPostInit+0x98>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d119      	bne.n	8001004 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000ffe:	f001 ff15 	bl	8002e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001002:	e01c      	b.n	800103e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d117      	bne.n	800103e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_TIM_MspPostInit+0xa0>)
 800103a:	f001 fef7 	bl	8002e2c <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012c00 	.word	0x40012c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f001 fa93 	bl	80025c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Channel7_IRQHandler+0x10>)
 80010aa:	f001 fd43 	bl	8002b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001b4 	.word	0x200001b4

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f002 fe4f 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000124 	.word	0x20000124

080010cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <_kill>:

int _kill(int pid, int sig)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010e4:	f003 fd20 	bl	8004b28 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2216      	movs	r2, #22
 80010ec:	601a      	str	r2, [r3, #0]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_exit>:

void _exit (int status)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffe7 	bl	80010da <_kill>
	while (1) {}		/* Make sure we hang here */
 800110c:	e7fe      	b.n	800110c <_exit+0x12>

0800110e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e00a      	b.n	8001136 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001120:	f3af 8000 	nop.w
 8001124:	4601      	mov	r1, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	b2ca      	uxtb	r2, r1
 800112e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbf0      	blt.n	8001120 <_read+0x12>
	}

return len;
 800113e:	687b      	ldr	r3, [r7, #4]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e009      	b.n	800116e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf1      	blt.n	800115a <_write+0x12>
	}
	return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_close>:

int _close(int file)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
	return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <_isatty>:

int _isatty(int file)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	return 1;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f003 fc8a 	bl	8004b28 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20005000 	.word	0x20005000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000224 	.word	0x20000224
 8001248:	20002c60 	.word	0x20002c60

0800124c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <tetris>:
void drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color);
void drawBoard();
void checkRows();


void tetris(){
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
	int x,y;
	uint8_t ch;
	//Initial values
	srand(0);
 800125e:	2000      	movs	r0, #0
 8001260:	f003 fca2 	bl	8004ba8 <srand>
	fallDelay = NUMLEVEL;
 8001264:	4b95      	ldr	r3, [pc, #596]	; (80014bc <tetris+0x264>)
 8001266:	220a      	movs	r2, #10
 8001268:	601a      	str	r2, [r3, #0]
	curDelay=0;
 800126a:	4b95      	ldr	r3, [pc, #596]	; (80014c0 <tetris+0x268>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	curX = WIDTH/2;
 8001270:	4b94      	ldr	r3, [pc, #592]	; (80014c4 <tetris+0x26c>)
 8001272:	2205      	movs	r2, #5
 8001274:	601a      	str	r2, [r3, #0]
	curY = 0;
 8001276:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <tetris+0x270>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
	curR = 0;
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <tetris+0x274>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
	curPiece = rand()%7;
 8001282:	f003 fcbf 	bl	8004c04 <rand>
 8001286:	4602      	mov	r2, r0
 8001288:	4b91      	ldr	r3, [pc, #580]	; (80014d0 <tetris+0x278>)
 800128a:	fb83 1302 	smull	r1, r3, r3, r2
 800128e:	4413      	add	r3, r2
 8001290:	1099      	asrs	r1, r3, #2
 8001292:	17d3      	asrs	r3, r2, #31
 8001294:	1ac9      	subs	r1, r1, r3
 8001296:	460b      	mov	r3, r1
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	1a5b      	subs	r3, r3, r1
 800129c:	1ad1      	subs	r1, r2, r3
 800129e:	4b8d      	ldr	r3, [pc, #564]	; (80014d4 <tetris+0x27c>)
 80012a0:	6019      	str	r1, [r3, #0]
	score=0;
 80012a2:	4b8d      	ldr	r3, [pc, #564]	; (80014d8 <tetris+0x280>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
	running = 1;
 80012a8:	4b8c      	ldr	r3, [pc, #560]	; (80014dc <tetris+0x284>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
    //Initialize board
	for(y=0;y<HEIGHT;y++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	e016      	b.n	80012e2 <tetris+0x8a>
		for(x=0;x<WIDTH;x++){
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e00d      	b.n	80012d6 <tetris+0x7e>
			tetrisBoard[y][x]=V_BGND;
 80012ba:	4989      	ldr	r1, [pc, #548]	; (80014e0 <tetris+0x288>)
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	2200      	movs	r2, #0
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(x=0;x<WIDTH;x++){
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3301      	adds	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	ddee      	ble.n	80012ba <tetris+0x62>
	for(y=0;y<HEIGHT;y++){
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b1d      	cmp	r3, #29
 80012e6:	dde5      	ble.n	80012b4 <tetris+0x5c>
		}
	}
	//Clear screen and draw borders
	ClearScreen(V_BGND);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fc69 	bl	8001bc0 <ClearScreen>
	FillRectangle(BOARD_X,BOARD_Y,
 80012ee:	23ff      	movs	r3, #255	; 0xff
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	2202      	movs	r2, #2
 80012f6:	2101      	movs	r1, #1
 80012f8:	2001      	movs	r0, #1
 80012fa:	f000 ff74 	bl	80021e6 <FillRectangle>
			      BOARD_X+SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+(WIDTH+1)*SIZE,BOARD_Y,
 80012fe:	23ff      	movs	r3, #255	; 0xff
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	2218      	movs	r2, #24
 8001306:	2101      	movs	r1, #1
 8001308:	2017      	movs	r0, #23
 800130a:	f000 ff6c 	bl	80021e6 <FillRectangle>
			      BOARD_X+(WIDTH+2)*SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y,
 800130e:	23ff      	movs	r3, #255	; 0xff
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2302      	movs	r3, #2
 8001314:	2216      	movs	r2, #22
 8001316:	2101      	movs	r1, #1
 8001318:	2003      	movs	r0, #3
 800131a:	f000 ff64 	bl	80021e6 <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,BOARD_Y+SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y+(HEIGHT+1)*SIZE,
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	2216      	movs	r2, #22
 8001326:	213f      	movs	r1, #63	; 0x3f
 8001328:	2003      	movs	r0, #3
 800132a:	f000 ff5c 	bl	80021e6 <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,
				  BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);

	//Main Game Loop
	while(running){
 800132e:	e1cf      	b.n	80016d0 <tetris+0x478>
		//Checking for key pressed and move current piece
		if(getch(&ch)){
 8001330:	1cfb      	adds	r3, r7, #3
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff3c 	bl	80001b0 <getch>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8104 	beq.w	8001548 <tetris+0x2f0>
			switch(ch){
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	3b02      	subs	r3, #2
 8001344:	2b08      	cmp	r3, #8
 8001346:	f200 8108 	bhi.w	800155a <tetris+0x302>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <tetris+0xf8>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	0800137d 	.word	0x0800137d
 8001354:	0800155b 	.word	0x0800155b
 8001358:	080013fb 	.word	0x080013fb
 800135c:	0800155b 	.word	0x0800155b
 8001360:	0800145d 	.word	0x0800145d
 8001364:	0800155b 	.word	0x0800155b
 8001368:	080014e9 	.word	0x080014e9
 800136c:	0800155b 	.word	0x0800155b
 8001370:	08001375 	.word	0x08001375
			case 10: // Exit Tetris
				running = 0;
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <tetris+0x284>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
				continue;
 800137a:	e1a9      	b.n	80016d0 <tetris+0x478>
			case 2: // rotate
				if(rotateAble(curPiece,(curR+1)%4,curX,curY)){
 800137c:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <tetris+0x27c>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4b52      	ldr	r3, [pc, #328]	; (80014cc <tetris+0x274>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	425a      	negs	r2, r3
 8001388:	f003 0103 	and.w	r1, r3, #3
 800138c:	f002 0303 	and.w	r3, r2, #3
 8001390:	bf58      	it	pl
 8001392:	4259      	negpl	r1, r3
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <tetris+0x26c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b4b      	ldr	r3, [pc, #300]	; (80014c8 <tetris+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f000 f9f2 	bl	8001784 <rotateAble>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80d2 	beq.w	800154c <tetris+0x2f4>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <tetris+0x27c>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <tetris+0x274>)
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <tetris+0x26c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <tetris+0x270>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2400      	movs	r4, #0
 80013ba:	9400      	str	r4, [sp, #0]
 80013bc:	f000 fae0 	bl	8001980 <drawPiece>
					//rotate piece and re-draw
					curR = (curR+1)%4;
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <tetris+0x274>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	425a      	negs	r2, r3
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	f002 0203 	and.w	r2, r2, #3
 80013d0:	bf58      	it	pl
 80013d2:	4253      	negpl	r3, r2
 80013d4:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <tetris+0x274>)
 80013d6:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 80013d8:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <tetris+0x27c>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <tetris+0x274>)
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <tetris+0x26c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <tetris+0x270>)
 80013e6:	681c      	ldr	r4, [r3, #0]
 80013e8:	4b3a      	ldr	r3, [pc, #232]	; (80014d4 <tetris+0x27c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4d3d      	ldr	r5, [pc, #244]	; (80014e4 <tetris+0x28c>)
 80013ee:	5ceb      	ldrb	r3, [r5, r3]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f000 fac4 	bl	8001980 <drawPiece>
			    }
				break;
 80013f8:	e0a8      	b.n	800154c <tetris+0x2f4>
			case 4: // move left
				if(rotateAble(curPiece,curR,curX-1,curY)){
 80013fa:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <tetris+0x27c>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <tetris+0x274>)
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <tetris+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <tetris+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f000 f9ba 	bl	8001784 <rotateAble>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 809c 	beq.w	8001550 <tetris+0x2f8>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <tetris+0x27c>)
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <tetris+0x274>)
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <tetris+0x26c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <tetris+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2400      	movs	r4, #0
 800142a:	9400      	str	r4, [sp, #0]
 800142c:	f000 faa8 	bl	8001980 <drawPiece>
					//rotate piece and re-draw
					curX = curX-1;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <tetris+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <tetris+0x26c>)
 8001438:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <tetris+0x27c>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <tetris+0x274>)
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <tetris+0x26c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <tetris+0x270>)
 8001448:	681c      	ldr	r4, [r3, #0]
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <tetris+0x27c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4d25      	ldr	r5, [pc, #148]	; (80014e4 <tetris+0x28c>)
 8001450:	5ceb      	ldrb	r3, [r5, r3]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	f000 fa93 	bl	8001980 <drawPiece>
				}
				break;
 800145a:	e079      	b.n	8001550 <tetris+0x2f8>
			case 6: // move right
				if(rotateAble(curPiece,curR,curX+1,curY)){
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <tetris+0x27c>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <tetris+0x274>)
 8001462:	6819      	ldr	r1, [r3, #0]
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <tetris+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <tetris+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f000 f989 	bl	8001784 <rotateAble>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d06d      	beq.n	8001554 <tetris+0x2fc>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <tetris+0x27c>)
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <tetris+0x274>)
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <tetris+0x26c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <tetris+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2400      	movs	r4, #0
 800148a:	9400      	str	r4, [sp, #0]
 800148c:	f000 fa78 	bl	8001980 <drawPiece>
					//rotate piece and re-draw
					curX = curX+1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <tetris+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <tetris+0x26c>)
 8001498:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <tetris+0x27c>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <tetris+0x274>)
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <tetris+0x26c>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <tetris+0x270>)
 80014a8:	681c      	ldr	r4, [r3, #0]
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <tetris+0x27c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4d0d      	ldr	r5, [pc, #52]	; (80014e4 <tetris+0x28c>)
 80014b0:	5ceb      	ldrb	r3, [r5, r3]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	4623      	mov	r3, r4
 80014b6:	f000 fa63 	bl	8001980 <drawPiece>
				}
				break;
 80014ba:	e04b      	b.n	8001554 <tetris+0x2fc>
 80014bc:	200006dc 	.word	0x200006dc
 80014c0:	200006e0 	.word	0x200006e0
 80014c4:	200006e4 	.word	0x200006e4
 80014c8:	200006e8 	.word	0x200006e8
 80014cc:	200006ec 	.word	0x200006ec
 80014d0:	92492493 	.word	0x92492493
 80014d4:	200006f0 	.word	0x200006f0
 80014d8:	200006d8 	.word	0x200006d8
 80014dc:	200006f4 	.word	0x200006f4
 80014e0:	20000228 	.word	0x20000228
 80014e4:	0800b4a0 	.word	0x0800b4a0
			case 8: // move down
				if(rotateAble(curPiece,curR,curX,curY+1)){
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <tetris+0x48c>)
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <tetris+0x490>)
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	4b7e      	ldr	r3, [pc, #504]	; (80016ec <tetris+0x494>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b7e      	ldr	r3, [pc, #504]	; (80016f0 <tetris+0x498>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	f000 f943 	bl	8001784 <rotateAble>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d029      	beq.n	8001558 <tetris+0x300>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001504:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <tetris+0x48c>)
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <tetris+0x490>)
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4b77      	ldr	r3, [pc, #476]	; (80016ec <tetris+0x494>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <tetris+0x498>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2400      	movs	r4, #0
 8001516:	9400      	str	r4, [sp, #0]
 8001518:	f000 fa32 	bl	8001980 <drawPiece>
					//rotate piece and re-draw
					curY = curY+1;
 800151c:	4b74      	ldr	r3, [pc, #464]	; (80016f0 <tetris+0x498>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	4a73      	ldr	r2, [pc, #460]	; (80016f0 <tetris+0x498>)
 8001524:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001526:	4b6f      	ldr	r3, [pc, #444]	; (80016e4 <tetris+0x48c>)
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	4b6f      	ldr	r3, [pc, #444]	; (80016e8 <tetris+0x490>)
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <tetris+0x494>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <tetris+0x498>)
 8001534:	681c      	ldr	r4, [r3, #0]
 8001536:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <tetris+0x48c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4d6e      	ldr	r5, [pc, #440]	; (80016f4 <tetris+0x49c>)
 800153c:	5ceb      	ldrb	r3, [r5, r3]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4623      	mov	r3, r4
 8001542:	f000 fa1d 	bl	8001980 <drawPiece>
				}
				break;
 8001546:	e007      	b.n	8001558 <tetris+0x300>
		}
		}
 8001548:	bf00      	nop
 800154a:	e006      	b.n	800155a <tetris+0x302>
				break;
 800154c:	bf00      	nop
 800154e:	e004      	b.n	800155a <tetris+0x302>
				break;
 8001550:	bf00      	nop
 8001552:	e002      	b.n	800155a <tetris+0x302>
				break;
 8001554:	bf00      	nop
 8001556:	e000      	b.n	800155a <tetris+0x302>
				break;
 8001558:	bf00      	nop
		curDelay--;
 800155a:	4b67      	ldr	r3, [pc, #412]	; (80016f8 <tetris+0x4a0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <tetris+0x4a0>)
 8001562:	6013      	str	r3, [r2, #0]
		if(curDelay<0){
 8001564:	4b64      	ldr	r3, [pc, #400]	; (80016f8 <tetris+0x4a0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f280 80ae 	bge.w	80016ca <tetris+0x472>
			Round++;
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <tetris+0x4a4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a61      	ldr	r2, [pc, #388]	; (80016fc <tetris+0x4a4>)
 8001576:	6013      	str	r3, [r2, #0]
			if(Round>UPSPEED){
 8001578:	4b60      	ldr	r3, [pc, #384]	; (80016fc <tetris+0x4a4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	dd0b      	ble.n	8001598 <tetris+0x340>
				Round = 0;
 8001580:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <tetris+0x4a4>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
				if(fallDelay>0)
 8001586:	4b5e      	ldr	r3, [pc, #376]	; (8001700 <tetris+0x4a8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd04      	ble.n	8001598 <tetris+0x340>
					fallDelay--;
 800158e:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <tetris+0x4a8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	4a5a      	ldr	r2, [pc, #360]	; (8001700 <tetris+0x4a8>)
 8001596:	6013      	str	r3, [r2, #0]
			}
			curDelay=fallDelay;
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <tetris+0x4a8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <tetris+0x4a0>)
 800159e:	6013      	str	r3, [r2, #0]
		    // Check if current piece can move further down
		    if(moveAble(curPiece,curR,curX,curY)){
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <tetris+0x48c>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <tetris+0x490>)
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <tetris+0x494>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <tetris+0x498>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f000 f93e 	bl	8001830 <moveAble>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d021      	beq.n	80015fe <tetris+0x3a6>
			    //remove old piece
		    	drawPiece(curPiece,curR,curX,curY,V_BGND);
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <tetris+0x48c>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <tetris+0x490>)
 80015c0:	6819      	ldr	r1, [r3, #0]
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <tetris+0x494>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <tetris+0x498>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2400      	movs	r4, #0
 80015cc:	9400      	str	r4, [sp, #0]
 80015ce:	f000 f9d7 	bl	8001980 <drawPiece>
		    	//rotate piece and re-draw
		    	curY = curY+1;
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <tetris+0x498>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <tetris+0x498>)
 80015da:	6013      	str	r3, [r2, #0]
		    	drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 80015dc:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <tetris+0x48c>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <tetris+0x490>)
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <tetris+0x494>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <tetris+0x498>)
 80015ea:	681c      	ldr	r4, [r3, #0]
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <tetris+0x48c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4d40      	ldr	r5, [pc, #256]	; (80016f4 <tetris+0x49c>)
 80015f2:	5ceb      	ldrb	r3, [r5, r3]
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	4623      	mov	r3, r4
 80015f8:	f000 f9c2 	bl	8001980 <drawPiece>
 80015fc:	e065      	b.n	80016ca <tetris+0x472>
		    }else{
		    	// struck here
		    	//Assign value to the board
		    	for(int i=0;i<4;i++){
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e034      	b.n	800166e <tetris+0x416>
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <tetris+0x48c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a3a      	ldr	r2, [pc, #232]	; (80016f4 <tetris+0x49c>)
 800160a:	5cd5      	ldrb	r5, [r2, r3]
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <tetris+0x48c>)
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <tetris+0x490>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	3301      	adds	r3, #1
 800161a:	483a      	ldr	r0, [pc, #232]	; (8001704 <tetris+0x4ac>)
 800161c:	0089      	lsls	r1, r1, #2
 800161e:	440a      	add	r2, r1
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	4402      	add	r2, r0
 8001624:	4413      	add	r3, r2
 8001626:	f993 3000 	ldrsb.w	r3, [r3]
 800162a:	461a      	mov	r2, r3
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <tetris+0x498>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	441a      	add	r2, r3
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <tetris+0x48c>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <tetris+0x490>)
 8001638:	6819      	ldr	r1, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4c31      	ldr	r4, [pc, #196]	; (8001704 <tetris+0x4ac>)
 8001640:	0080      	lsls	r0, r0, #2
 8001642:	4401      	add	r1, r0
 8001644:	00c9      	lsls	r1, r1, #3
 8001646:	4421      	add	r1, r4
 8001648:	440b      	add	r3, r1
 800164a:	f993 3000 	ldrsb.w	r3, [r3]
 800164e:	4619      	mov	r1, r3
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <tetris+0x494>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4419      	add	r1, r3
 8001656:	462c      	mov	r4, r5
 8001658:	482b      	ldr	r0, [pc, #172]	; (8001708 <tetris+0x4b0>)
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	440b      	add	r3, r1
 8001664:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		    	for(int i=0;i<4;i++){
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b03      	cmp	r3, #3
 8001672:	ddc7      	ble.n	8001604 <tetris+0x3ac>
		        }
		    	score = score+4; // Add score of placing new piece in the board
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <tetris+0x4b4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3304      	adds	r3, #4
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <tetris+0x4b4>)
 800167c:	6013      	str	r3, [r2, #0]

		    	//Check for completed rows
		    	checkRows();
 800167e:	f000 fa25 	bl	8001acc <checkRows>
		    	showScore();
 8001682:	f000 f849 	bl	8001718 <showScore>
			    //Generate new piece
			    curPiece = rand()%7;
 8001686:	f003 fabd 	bl	8004c04 <rand>
 800168a:	4602      	mov	r2, r0
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <tetris+0x4b8>)
 800168e:	fb83 1302 	smull	r1, r3, r3, r2
 8001692:	4413      	add	r3, r2
 8001694:	1099      	asrs	r1, r3, #2
 8001696:	17d3      	asrs	r3, r2, #31
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	460b      	mov	r3, r1
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a5b      	subs	r3, r3, r1
 80016a0:	1ad1      	subs	r1, r2, r3
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <tetris+0x48c>)
 80016a4:	6019      	str	r1, [r3, #0]
			    curX = WIDTH/2;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <tetris+0x494>)
 80016a8:	2205      	movs	r2, #5
 80016aa:	601a      	str	r2, [r3, #0]
			    curY = 0;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <tetris+0x498>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
			    curR = 0;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <tetris+0x490>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

			    if(pieceOverlapped()){
 80016b8:	f000 f90a 	bl	80018d0 <pieceOverlapped>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <tetris+0x472>
			    	// Can not place new piece
			    	running = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <tetris+0x4bc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
			    	continue;
 80016c8:	e002      	b.n	80016d0 <tetris+0x478>
			    }
		    }
		}
		tetrisDelay(100); //Delay one unit
 80016ca:	2064      	movs	r0, #100	; 0x64
 80016cc:	f7fe fd64 	bl	8000198 <tetrisDelay>
	while(running){
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <tetris+0x4bc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f47f ae2b 	bne.w	8001330 <tetris+0xd8>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	200006f0 	.word	0x200006f0
 80016e8:	200006ec 	.word	0x200006ec
 80016ec:	200006e4 	.word	0x200006e4
 80016f0:	200006e8 	.word	0x200006e8
 80016f4:	0800b4a0 	.word	0x0800b4a0
 80016f8:	200006e0 	.word	0x200006e0
 80016fc:	200006f8 	.word	0x200006f8
 8001700:	200006dc 	.word	0x200006dc
 8001704:	0800b3c0 	.word	0x0800b3c0
 8001708:	20000228 	.word	0x20000228
 800170c:	200006d8 	.word	0x200006d8
 8001710:	92492493 	.word	0x92492493
 8001714:	200006f4 	.word	0x200006f4

08001718 <showScore>:


void showScore(){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
	char msg[16];
	sprintf(msg,"%6d",score);
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <showScore+0x58>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	463b      	mov	r3, r7
 8001724:	4913      	ldr	r1, [pc, #76]	; (8001774 <showScore+0x5c>)
 8001726:	4618      	mov	r0, r3
 8001728:	f003 faaa 	bl	8004c80 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE);
 800172c:	2103      	movs	r1, #3
 800172e:	201a      	movs	r0, #26
 8001730:	f000 fc52 	bl	8001fd8 <SetCursor>
	WriteString(msg,Font_7x10,VGA_YELLOW);
 8001734:	4a10      	ldr	r2, [pc, #64]	; (8001778 <showScore+0x60>)
 8001736:	4638      	mov	r0, r7
 8001738:	23fc      	movs	r3, #252	; 0xfc
 800173a:	ca06      	ldmia	r2, {r1, r2}
 800173c:	f000 fc26 	bl	8001f8c <WriteString>
	sprintf(msg,"L%2d",NUMLEVEL-fallDelay+1);
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <showScore+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1c3 020b 	rsb	r2, r3, #11
 8001748:	463b      	mov	r3, r7
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <showScore+0x68>)
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fa97 	bl	8004c80 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+12);
 8001752:	210f      	movs	r1, #15
 8001754:	201a      	movs	r0, #26
 8001756:	f000 fc3f 	bl	8001fd8 <SetCursor>
	WriteString(msg,Font_7x10,VGA_GREEN);
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <showScore+0x60>)
 800175c:	4638      	mov	r0, r7
 800175e:	231c      	movs	r3, #28
 8001760:	ca06      	ldmia	r2, {r1, r2}
 8001762:	f000 fc13 	bl	8001f8c <WriteString>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200006d8 	.word	0x200006d8
 8001774:	08006060 	.word	0x08006060
 8001778:	2000004c 	.word	0x2000004c
 800177c:	200006dc 	.word	0x200006dc
 8001780:	08006064 	.word	0x08006064

08001784 <rotateAble>:
int  rotateAble(int pieceNum,int pieceTargetRotation,int locX,int locY){
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
    for(int i=0;i<4;i++){
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e03e      	b.n	8001816 <rotateAble+0x92>
    	int x = piece[pieceNum][pieceTargetRotation][i*2]+locX;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4822      	ldr	r0, [pc, #136]	; (8001828 <rotateAble+0xa4>)
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	0091      	lsls	r1, r2, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	440a      	add	r2, r1
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	4402      	add	r2, r0
 80017aa:	4413      	add	r3, r2
 80017ac:	f993 3000 	ldrsb.w	r3, [r3]
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceTargetRotation][i*2+1]+locY;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	3301      	adds	r3, #1
 80017be:	481a      	ldr	r0, [pc, #104]	; (8001828 <rotateAble+0xa4>)
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	0091      	lsls	r1, r2, #2
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	440a      	add	r2, r1
 80017c8:	00d2      	lsls	r2, r2, #3
 80017ca:	4402      	add	r2, r0
 80017cc:	4413      	add	r3, r2
 80017ce:	f993 3000 	ldrsb.w	r3, [r3]
 80017d2:	461a      	mov	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
    	if(x<0) return 0; // Out of board
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	da01      	bge.n	80017e4 <rotateAble+0x60>
 80017e0:	2300      	movs	r3, #0
 80017e2:	e01c      	b.n	800181e <rotateAble+0x9a>
    	if((x>=WIDTH) || (y>=HEIGHT)) return 0; // Out of board
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b09      	cmp	r3, #9
 80017e8:	dc02      	bgt.n	80017f0 <rotateAble+0x6c>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2b1d      	cmp	r3, #29
 80017ee:	dd01      	ble.n	80017f4 <rotateAble+0x70>
 80017f0:	2300      	movs	r3, #0
 80017f2:	e014      	b.n	800181e <rotateAble+0x9a>
    	if(tetrisBoard[y][x]!=V_BGND) return 0; // Overlapped other pieces
 80017f4:	490d      	ldr	r1, [pc, #52]	; (800182c <rotateAble+0xa8>)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4413      	add	r3, r2
 8001804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <rotateAble+0x8c>
 800180c:	2300      	movs	r3, #0
 800180e:	e006      	b.n	800181e <rotateAble+0x9a>
    for(int i=0;i<4;i++){
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	3301      	adds	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b03      	cmp	r3, #3
 800181a:	ddbd      	ble.n	8001798 <rotateAble+0x14>
    }
    return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	0800b3c0 	.word	0x0800b3c0
 800182c:	20000228 	.word	0x20000228

08001830 <moveAble>:

int  moveAble(int pieceNum,int pieceRotation,int locX,int locY){
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e037      	b.n	80018b4 <moveAble+0x84>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	481f      	ldr	r0, [pc, #124]	; (80018c8 <moveAble+0x98>)
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	0091      	lsls	r1, r2, #2
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	440a      	add	r2, r1
 8001852:	00d2      	lsls	r2, r2, #3
 8001854:	4402      	add	r2, r0
 8001856:	4413      	add	r3, r2
 8001858:	f993 3000 	ldrsb.w	r3, [r3]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	3301      	adds	r3, #1
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <moveAble+0x98>)
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	0091      	lsls	r1, r2, #2
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	440a      	add	r2, r1
 8001874:	00d2      	lsls	r2, r2, #3
 8001876:	4402      	add	r2, r0
 8001878:	4413      	add	r3, r2
 800187a:	f993 3000 	ldrsb.w	r3, [r3]
 800187e:	461a      	mov	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
    	//check if it is at the buttom
    	if(y>=(HEIGHT-1)) return 0;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b1c      	cmp	r3, #28
 800188a:	dd01      	ble.n	8001890 <moveAble+0x60>
 800188c:	2300      	movs	r3, #0
 800188e:	e015      	b.n	80018bc <moveAble+0x8c>
    	//check if there is another piece under the current one
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	490d      	ldr	r1, [pc, #52]	; (80018cc <moveAble+0x9c>)
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4413      	add	r3, r2
 80018a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <moveAble+0x7e>
    		return 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e006      	b.n	80018bc <moveAble+0x8c>
	for(int i=0;i<4;i++){
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	ddc4      	ble.n	8001844 <moveAble+0x14>
	}
	return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3724      	adds	r7, #36	; 0x24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	0800b3c0 	.word	0x0800b3c0
 80018cc:	20000228 	.word	0x20000228

080018d0 <pieceOverlapped>:

int  pieceOverlapped(){
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e03c      	b.n	8001956 <pieceOverlapped+0x86>
    	int x = piece[curPiece][curR][i*2]+curX;
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <pieceOverlapped+0x98>)
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <pieceOverlapped+0x9c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4821      	ldr	r0, [pc, #132]	; (8001970 <pieceOverlapped+0xa0>)
 80018ea:	0089      	lsls	r1, r1, #2
 80018ec:	440a      	add	r2, r1
 80018ee:	00d2      	lsls	r2, r2, #3
 80018f0:	4402      	add	r2, r0
 80018f2:	4413      	add	r3, r2
 80018f4:	f993 3000 	ldrsb.w	r3, [r3]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <pieceOverlapped+0xa4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	60bb      	str	r3, [r7, #8]
    	int y = piece[curPiece][curR][i*2+1]+curY;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <pieceOverlapped+0x98>)
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <pieceOverlapped+0x9c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	3301      	adds	r3, #1
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <pieceOverlapped+0xa0>)
 8001912:	0089      	lsls	r1, r1, #2
 8001914:	440a      	add	r2, r1
 8001916:	00d2      	lsls	r2, r2, #3
 8001918:	4402      	add	r2, r0
 800191a:	4413      	add	r3, r2
 800191c:	f993 3000 	ldrsb.w	r3, [r3]
 8001920:	461a      	mov	r2, r3
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <pieceOverlapped+0xa8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	607b      	str	r3, [r7, #4]
    	//check if there is another piece under the current one
    	if(y<0) continue;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0e      	blt.n	800194e <pieceOverlapped+0x7e>
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	4911      	ldr	r1, [pc, #68]	; (800197c <pieceOverlapped+0xac>)
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4413      	add	r3, r2
 8001942:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <pieceOverlapped+0x80>
    		return 1;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <pieceOverlapped+0x8e>
    	if(y<0) continue;
 800194e:	bf00      	nop
	for(int i=0;i<4;i++){
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2b03      	cmp	r3, #3
 800195a:	ddbf      	ble.n	80018dc <pieceOverlapped+0xc>
	}
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	200006f0 	.word	0x200006f0
 800196c:	200006ec 	.word	0x200006ec
 8001970:	0800b3c0 	.word	0x0800b3c0
 8001974:	200006e4 	.word	0x200006e4
 8001978:	200006e8 	.word	0x200006e8
 800197c:	20000228 	.word	0x20000228

08001980 <drawPiece>:

void  drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color){
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e048      	b.n	8001a26 <drawPiece+0xa6>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4827      	ldr	r0, [pc, #156]	; (8001a38 <drawPiece+0xb8>)
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	0091      	lsls	r1, r2, #2
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	440a      	add	r2, r1
 80019a2:	00d2      	lsls	r2, r2, #3
 80019a4:	4402      	add	r2, r0
 80019a6:	4413      	add	r3, r2
 80019a8:	f993 3000 	ldrsb.w	r3, [r3]
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	3301      	adds	r3, #1
 80019ba:	481f      	ldr	r0, [pc, #124]	; (8001a38 <drawPiece+0xb8>)
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	0091      	lsls	r1, r2, #2
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	440a      	add	r2, r1
 80019c4:	00d2      	lsls	r2, r2, #3
 80019c6:	4402      	add	r2, r0
 80019c8:	4413      	add	r3, r2
 80019ca:	f993 3000 	ldrsb.w	r3, [r3]
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
    	if(y>=0){
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db21      	blt.n	8001a20 <drawPiece+0xa0>
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	3301      	adds	r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	b218      	sxth	r0, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	b219      	sxth	r1, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b21a      	sxth	r2, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21c      	sxth	r4, r3
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	f000 fbe3 	bl	80021e6 <FillRectangle>
	for(int i=0;i<4;i++){
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	3301      	adds	r3, #1
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	ddb3      	ble.n	8001994 <drawPiece+0x14>
    	}
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	0800b3c0 	.word	0x0800b3c0

08001a3c <drawBoard>:

void drawBoard(){
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af02      	add	r7, sp, #8
	for(int y=0;y<HEIGHT;y++){
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	e037      	b.n	8001ab8 <drawBoard+0x7c>
		for(int x=0;x<WIDTH;x++){
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	e02e      	b.n	8001aac <drawBoard+0x70>
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b218      	sxth	r0, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b219      	sxth	r1, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b21c      	sxth	r4, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	b21d      	sxth	r5, r3
					       tetrisBoard[y][x]);
 8001a86:	4e10      	ldr	r6, [pc, #64]	; (8001ac8 <drawBoard+0x8c>)
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	462b      	mov	r3, r5
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	f000 fba0 	bl	80021e6 <FillRectangle>
		for(int x=0;x<WIDTH;x++){
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b09      	cmp	r3, #9
 8001ab0:	ddcd      	ble.n	8001a4e <drawBoard+0x12>
	for(int y=0;y<HEIGHT;y++){
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b1d      	cmp	r3, #29
 8001abc:	ddc4      	ble.n	8001a48 <drawBoard+0xc>
		}
	}
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	20000228 	.word	0x20000228

08001acc <checkRows>:

void checkRows(){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
	int addedScore = 100;
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	617b      	str	r3, [r7, #20]
	int y,x,yy;
	int flag;

	for(y=HEIGHT-1;y>=0;y--){
 8001ad6:	231d      	movs	r3, #29
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e065      	b.n	8001ba8 <checkRows+0xdc>
		flag = 1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
		//check current row if all filled
		for(x=0;x<WIDTH;x++){
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e011      	b.n	8001b0a <checkRows+0x3e>
			if(tetrisBoard[y][x]==V_BGND){
 8001ae6:	4934      	ldr	r1, [pc, #208]	; (8001bb8 <checkRows+0xec>)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <checkRows+0x38>
				flag = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
				break;
 8001b02:	e005      	b.n	8001b10 <checkRows+0x44>
		for(x=0;x<WIDTH;x++){
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	ddea      	ble.n	8001ae6 <checkRows+0x1a>
			}
		}
		if(flag){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d045      	beq.n	8001ba2 <checkRows+0xd6>
			score += addedScore;  //increase score
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <checkRows+0xf0>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a27      	ldr	r2, [pc, #156]	; (8001bbc <checkRows+0xf0>)
 8001b20:	6013      	str	r3, [r2, #0]
			addedScore *=2;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
			//Bunch pieces down
			for(yy=y-1;yy>=0;yy--){
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	e020      	b.n	8001b72 <checkRows+0xa6>
			   for(x=0;x<WIDTH;x++){
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e017      	b.n	8001b66 <checkRows+0x9a>
				   tetrisBoard[yy+1][x] = tetrisBoard[yy][x];
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <checkRows+0xec>)
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	440b      	add	r3, r1
 8001b4a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001b4e:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <checkRows+0xec>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			   for(x=0;x<WIDTH;x++){
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	dde4      	ble.n	8001b36 <checkRows+0x6a>
			for(yy=y-1;yy>=0;yy--){
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dadb      	bge.n	8001b30 <checkRows+0x64>
			   }
			}
			for(x=0;x<WIDTH;x++){
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e007      	b.n	8001b8e <checkRows+0xc2>
				   tetrisBoard[0][x] = V_BGND;
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <checkRows+0xec>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2100      	movs	r1, #0
 8001b84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<WIDTH;x++){
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	ddf4      	ble.n	8001b7e <checkRows+0xb2>
			}
			y = HEIGHT; // recheck from bottom
 8001b94:	231e      	movs	r3, #30
 8001b96:	613b      	str	r3, [r7, #16]
			drawBoard();
 8001b98:	f7ff ff50 	bl	8001a3c <drawBoard>
			tetrisDelay(200);
 8001b9c:	20c8      	movs	r0, #200	; 0xc8
 8001b9e:	f7fe fafb 	bl	8000198 <tetrisDelay>
	for(y=HEIGHT-1;y>=0;y--){
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da96      	bge.n	8001adc <checkRows+0x10>
		}
	}
}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000228 	.word	0x20000228
 8001bbc:	200006d8 	.word	0x200006d8

08001bc0 <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	e015      	b.n	8001bfc <ClearScreen+0x3c>
		for(i=0;i<VGA_LBUFFER;i++){
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e00c      	b.n	8001bf0 <ClearScreen+0x30>
			VGA_buffer[j][i]= color;
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <ClearScreen+0x50>)
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2164      	movs	r1, #100	; 0x64
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	441a      	add	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	79fa      	ldrb	r2, [r7, #7]
 8001be8:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b63      	cmp	r3, #99	; 0x63
 8001bf4:	ddef      	ble.n	8001bd6 <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b4a      	cmp	r3, #74	; 0x4a
 8001c00:	dde6      	ble.n	8001bd0 <ClearScreen+0x10>
	}
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000efc 	.word	0x20000efc

08001c14 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	80bb      	strh	r3, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 8001c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db18      	blt.n	8001c60 <DrawPixel+0x4c>
 8001c2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db14      	blt.n	8001c60 <DrawPixel+0x4c>
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	2b63      	cmp	r3, #99	; 0x63
 8001c3c:	dc10      	bgt.n	8001c60 <DrawPixel+0x4c>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 8001c3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c42:	2b48      	cmp	r3, #72	; 0x48
 8001c44:	dc0c      	bgt.n	8001c60 <DrawPixel+0x4c>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 8001c46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c4e:	4907      	ldr	r1, [pc, #28]	; (8001c6c <DrawPixel+0x58>)
 8001c50:	2064      	movs	r0, #100	; 0x64
 8001c52:	fb00 f202 	mul.w	r2, r0, r2
 8001c56:	440a      	add	r2, r1
 8001c58:	4413      	add	r3, r2
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e000      	b.n	8001c62 <DrawPixel+0x4e>
		return;
 8001c60:	bf00      	nop
}
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000efc 	.word	0x20000efc

08001c70 <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4604      	mov	r4, r0
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	80fb      	strh	r3, [r7, #6]
 8001c82:	4603      	mov	r3, r0
 8001c84:	80bb      	strh	r3, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	da05      	bge.n	8001ca6 <DrawLine+0x36>
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	e004      	b.n	8001cb0 <DrawLine+0x40>
 8001ca6:	88fa      	ldrh	r2, [r7, #6]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001cb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	da05      	bge.n	8001cca <DrawLine+0x5a>
 8001cbe:	883a      	ldrh	r2, [r7, #0]
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	e004      	b.n	8001cd4 <DrawLine+0x64>
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	883b      	ldrh	r3, [r7, #0]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	da01      	bge.n	8001ce6 <DrawLine+0x76>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e001      	b.n	8001cea <DrawLine+0x7a>
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001cec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cf0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	da01      	bge.n	8001cfc <DrawLine+0x8c>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e001      	b.n	8001d00 <DrawLine+0x90>
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001d02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dd06      	ble.n	8001d1c <DrawLine+0xac>
 8001d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d12:	0fda      	lsrs	r2, r3, #31
 8001d14:	4413      	add	r3, r2
 8001d16:	105b      	asrs	r3, r3, #1
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	e006      	b.n	8001d2a <DrawLine+0xba>
 8001d1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d20:	0fda      	lsrs	r2, r3, #31
 8001d22:	4413      	add	r3, r2
 8001d24:	105b      	asrs	r3, r3, #1
 8001d26:	425b      	negs	r3, r3
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d130      	bne.n	8001d96 <DrawLine+0x126>
		if (y1 < y0) {
 8001d34:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	da05      	bge.n	8001d4c <DrawLine+0xdc>
			tmp = y1;
 8001d40:	883b      	ldrh	r3, [r7, #0]
 8001d42:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001d44:	88bb      	ldrh	r3, [r7, #4]
 8001d46:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001d48:	893b      	ldrh	r3, [r7, #8]
 8001d4a:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001d4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	da05      	bge.n	8001d64 <DrawLine+0xf4>
			tmp = x1;
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001d60:	893b      	ldrh	r3, [r7, #8]
 8001d62:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001d64:	88bb      	ldrh	r3, [r7, #4]
 8001d66:	82bb      	strh	r3, [r7, #20]
 8001d68:	e00e      	b.n	8001d88 <DrawLine+0x118>
			DrawPixel(x0, i, c);
 8001d6a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d6e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff4c 	bl	8001c14 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001d7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	82bb      	strh	r3, [r7, #20]
 8001d88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	ddea      	ble.n	8001d6a <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8001d94:	e06e      	b.n	8001e74 <DrawLine+0x204>
	}

	if (dy == 0) {
 8001d96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d130      	bne.n	8001e00 <DrawLine+0x190>
		if (y1 < y0) {
 8001d9e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001da2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	da05      	bge.n	8001db6 <DrawLine+0x146>
			tmp = y1;
 8001daa:	883b      	ldrh	r3, [r7, #0]
 8001dac:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dae:	88bb      	ldrh	r3, [r7, #4]
 8001db0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001db6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	da05      	bge.n	8001dce <DrawLine+0x15e>
			tmp = x1;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dca:	893b      	ldrh	r3, [r7, #8]
 8001dcc:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	82bb      	strh	r3, [r7, #20]
 8001dd2:	e00e      	b.n	8001df2 <DrawLine+0x182>
			DrawPixel(i, y0, c);
 8001dd4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001dd8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ddc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff17 	bl	8001c14 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	82bb      	strh	r3, [r7, #20]
 8001df2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001df6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	ddea      	ble.n	8001dd4 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 8001dfe:	e039      	b.n	8001e74 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 8001e00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff01 	bl	8001c14 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001e12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d105      	bne.n	8001e2a <DrawLine+0x1ba>
 8001e1e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e22:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d023      	beq.n	8001e72 <DrawLine+0x202>
			break;
		}
		e2 = err;
 8001e2a:	8afb      	ldrh	r3, [r7, #22]
 8001e2c:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001e2e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e36:	425b      	negs	r3, r3
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dd09      	ble.n	8001e50 <DrawLine+0x1e0>
			err -= dy;
 8001e3c:	8afa      	ldrh	r2, [r7, #22]
 8001e3e:	8a3b      	ldrh	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001e46:	88fa      	ldrh	r2, [r7, #6]
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001e50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dad1      	bge.n	8001e00 <DrawLine+0x190>
			err += dx;
 8001e5c:	8afa      	ldrh	r2, [r7, #22]
 8001e5e:	8a7b      	ldrh	r3, [r7, #18]
 8001e60:	4413      	add	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001e66:	88ba      	ldrh	r2, [r7, #4]
 8001e68:	89bb      	ldrh	r3, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 8001e70:	e7c6      	b.n	8001e00 <DrawLine+0x190>
			break;
 8001e72:	bf00      	nop
		}
	}
}
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd90      	pop	{r4, r7, pc}
	...

08001e7c <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4604      	mov	r4, r0
 8001e84:	1d38      	adds	r0, r7, #4
 8001e86:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	4613      	mov	r3, r2
 8001e92:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	2b1f      	cmp	r3, #31
 8001e98:	d902      	bls.n	8001ea0 <WriteChar+0x24>
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	2b7e      	cmp	r3, #126	; 0x7e
 8001e9e:	d901      	bls.n	8001ea4 <WriteChar+0x28>
        return 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e06d      	b.n	8001f80 <WriteChar+0x104>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <WriteChar+0x10c>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	793b      	ldrb	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	dc06      	bgt.n	8001ec0 <WriteChar+0x44>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <WriteChar+0x10c>)
 8001eb4:	885b      	ldrh	r3, [r3, #2]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001ebc:	2b49      	cmp	r3, #73	; 0x49
 8001ebe:	dd01      	ble.n	8001ec4 <WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e05d      	b.n	8001f80 <WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	e04c      	b.n	8001f64 <WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	3b20      	subs	r3, #32
 8001ed0:	7979      	ldrb	r1, [r7, #5]
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	440b      	add	r3, r1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e034      	b.n	8001f54 <WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d012      	beq.n	8001f20 <WriteChar+0xa4>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <WriteChar+0x10c>)
 8001efc:	881a      	ldrh	r2, [r3, #0]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	b218      	sxth	r0, r3
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <WriteChar+0x10c>)
 8001f0a:	885a      	ldrh	r2, [r3, #2]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	7bba      	ldrb	r2, [r7, #14]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7ff fe7b 	bl	8001c14 <DrawPixel>
 8001f1e:	e016      	b.n	8001f4e <WriteChar+0xd2>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <WriteChar+0x10c>)
 8001f22:	881a      	ldrh	r2, [r3, #0]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	b218      	sxth	r0, r3
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <WriteChar+0x10c>)
 8001f30:	885a      	ldrh	r2, [r3, #2]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b219      	sxth	r1, r3
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bf0c      	ite	eq
 8001f42:	2301      	moveq	r3, #1
 8001f44:	2300      	movne	r3, #0
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f7ff fe63 	bl	8001c14 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	793b      	ldrb	r3, [r7, #4]
 8001f56:	461a      	mov	r2, r3
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d3c5      	bcc.n	8001eea <WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	797b      	ldrb	r3, [r7, #5]
 8001f66:	461a      	mov	r2, r3
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d3ad      	bcc.n	8001eca <WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <WriteChar+0x10c>)
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	793b      	ldrb	r3, [r7, #4]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <WriteChar+0x10c>)
 8001f7c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	20002c48 	.word	0x20002c48

08001f8c <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	1d38      	adds	r0, r7, #4
 8001f96:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f9a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001f9c:	e012      	b.n	8001fc4 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	7818      	ldrb	r0, [r3, #0]
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	1d3a      	adds	r2, r7, #4
 8001fa6:	ca06      	ldmia	r2, {r1, r2}
 8001fa8:	f7ff ff68 	bl	8001e7c <WriteChar>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d002      	beq.n	8001fbe <WriteString+0x32>
            // Char could not be written
            return *str;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	e008      	b.n	8001fd0 <WriteString+0x44>
        }

        // Next char
        str++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e8      	bne.n	8001f9e <WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	781b      	ldrb	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	80fb      	strh	r3, [r7, #6]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 8001fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db03      	blt.n	8001ff8 <SetCursor+0x20>
 8001ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff4:	2b63      	cmp	r3, #99	; 0x63
 8001ff6:	dd03      	ble.n	8002000 <SetCursor+0x28>
	    VGA.CurrentX = 0;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <SetCursor+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]
 8001ffe:	e002      	b.n	8002006 <SetCursor+0x2e>
	else
		VGA.CurrentX = x;
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <SetCursor+0x58>)
 8002004:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 8002006:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db03      	blt.n	8002016 <SetCursor+0x3e>
 800200e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002012:	2b48      	cmp	r3, #72	; 0x48
 8002014:	dd03      	ble.n	800201e <SetCursor+0x46>
	    VGA.CurrentY = 0;
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SetCursor+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	805a      	strh	r2, [r3, #2]
 800201c:	e003      	b.n	8002026 <SetCursor+0x4e>
	else
        VGA.CurrentY = y;
 800201e:	88ba      	ldrh	r2, [r7, #4]
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <SetCursor+0x58>)
 8002022:	805a      	strh	r2, [r3, #2]
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20002c48 	.word	0x20002c48

08002034 <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	4603      	mov	r3, r0
 8002048:	80bb      	strh	r3, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	807b      	strh	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 8002052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002056:	425b      	negs	r3, r3
 8002058:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 800205e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002062:	f1c3 0301 	rsb	r3, r3, #1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 800206a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206e:	2b63      	cmp	r3, #99	; 0x63
 8002070:	dc6e      	bgt.n	8002150 <DrawCircle+0x11c>
 8002072:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002076:	2b48      	cmp	r3, #72	; 0x48
 8002078:	dc6a      	bgt.n	8002150 <DrawCircle+0x11c>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 800207a:	88fa      	ldrh	r2, [r7, #6]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	b29b      	uxth	r3, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	b29b      	uxth	r3, r3
 8002084:	b218      	sxth	r0, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	b29a      	uxth	r2, r3
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	b29b      	uxth	r3, r3
 8002090:	b21b      	sxth	r3, r3
 8002092:	787a      	ldrb	r2, [r7, #1]
 8002094:	4619      	mov	r1, r3
 8002096:	f7ff fdbd 	bl	8001c14 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	b29a      	uxth	r2, r3
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4413      	add	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	b218      	sxth	r0, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	787a      	ldrb	r2, [r7, #1]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7ff fdad 	bl	8001c14 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	4413      	add	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b218      	sxth	r0, r3
 80020c6:	88ba      	ldrh	r2, [r7, #4]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	787a      	ldrb	r2, [r7, #1]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f7ff fd9d 	bl	8001c14 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	b218      	sxth	r0, r3
 80020e6:	88ba      	ldrh	r2, [r7, #4]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b21b      	sxth	r3, r3
 80020f2:	787a      	ldrb	r2, [r7, #1]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7ff fd8d 	bl	8001c14 <DrawPixel>
        e2 = err;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	429a      	cmp	r2, r3
 8002104:	dc13      	bgt.n	800212e <DrawCircle+0xfa>
            y++;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	3301      	adds	r3, #1
 800210a:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	3301      	adds	r3, #1
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	425b      	negs	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	429a      	cmp	r2, r3
 8002120:	d105      	bne.n	800212e <DrawCircle+0xfa>
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	429a      	cmp	r2, r3
 8002128:	dc01      	bgt.n	800212e <DrawCircle+0xfa>
              e2 = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	dd08      	ble.n	8002148 <DrawCircle+0x114>
          x++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	3301      	adds	r3, #1
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	dd95      	ble.n	800207a <DrawCircle+0x46>

    return;
 800214e:	e000      	b.n	8002152 <DrawCircle+0x11e>
    return;
 8002150:	bf00      	nop
}
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b085      	sub	sp, #20
 800215c:	af02      	add	r7, sp, #8
 800215e:	4604      	mov	r4, r0
 8002160:	4608      	mov	r0, r1
 8002162:	4611      	mov	r1, r2
 8002164:	461a      	mov	r2, r3
 8002166:	4623      	mov	r3, r4
 8002168:	80fb      	strh	r3, [r7, #6]
 800216a:	4603      	mov	r3, r0
 800216c:	80bb      	strh	r3, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 8002176:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800217a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800217e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002182:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002186:	7e3b      	ldrb	r3, [r7, #24]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4623      	mov	r3, r4
 800218c:	f7ff fd70 	bl	8001c70 <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 8002190:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002194:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002198:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800219c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80021a0:	7e3b      	ldrb	r3, [r7, #24]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4623      	mov	r3, r4
 80021a6:	f7ff fd63 	bl	8001c70 <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 80021aa:	f9b7 4000 	ldrsh.w	r4, [r7]
 80021ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021b2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80021b6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80021ba:	7e3b      	ldrb	r3, [r7, #24]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f7ff fd56 	bl	8001c70 <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 80021c4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80021c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021cc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80021d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80021d4:	7e3b      	ldrb	r3, [r7, #24]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4623      	mov	r3, r4
 80021da:	f7ff fd49 	bl	8001c70 <DrawLine>
  return;
 80021de:	bf00      	nop
}
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}

080021e6 <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 80021e6:	b590      	push	{r4, r7, lr}
 80021e8:	b087      	sub	sp, #28
 80021ea:	af02      	add	r7, sp, #8
 80021ec:	4604      	mov	r4, r0
 80021ee:	4608      	mov	r0, r1
 80021f0:	4611      	mov	r1, r2
 80021f2:	461a      	mov	r2, r3
 80021f4:	4623      	mov	r3, r4
 80021f6:	80fb      	strh	r3, [r7, #6]
 80021f8:	4603      	mov	r3, r0
 80021fa:	80bb      	strh	r3, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
 8002200:	4613      	mov	r3, r2
 8002202:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002204:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002208:	2b63      	cmp	r3, #99	; 0x63
 800220a:	dc2a      	bgt.n	8002262 <FillRectangle+0x7c>
 800220c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002210:	2b48      	cmp	r3, #72	; 0x48
 8002212:	dc26      	bgt.n	8002262 <FillRectangle+0x7c>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 8002214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002218:	2b63      	cmp	r3, #99	; 0x63
 800221a:	dd01      	ble.n	8002220 <FillRectangle+0x3a>
 800221c:	2363      	movs	r3, #99	; 0x63
 800221e:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 8002220:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002224:	2b48      	cmp	r3, #72	; 0x48
 8002226:	dd01      	ble.n	800222c <FillRectangle+0x46>
 8002228:	2348      	movs	r3, #72	; 0x48
 800222a:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 800222c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e010      	b.n	8002256 <FillRectangle+0x70>
    	DrawLine(x1,yy,x2,yy,color);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	b219      	sxth	r1, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	b21c      	sxth	r4, r3
 800223c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002240:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002244:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4623      	mov	r3, r4
 800224c:	f7ff fd10 	bl	8001c70 <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	f9b7 3000 	ldrsh.w	r3, [r7]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	dde9      	ble.n	8002234 <FillRectangle+0x4e>
 8002260:	e000      	b.n	8002264 <FillRectangle+0x7e>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002262:	bf00      	nop
    }
}
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}

0800226a <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 800226a:	b590      	push	{r4, r7, lr}
 800226c:	b089      	sub	sp, #36	; 0x24
 800226e:	af02      	add	r7, sp, #8
 8002270:	4604      	mov	r4, r0
 8002272:	4608      	mov	r0, r1
 8002274:	4611      	mov	r1, r2
 8002276:	461a      	mov	r2, r3
 8002278:	4623      	mov	r3, r4
 800227a:	80fb      	strh	r3, [r7, #6]
 800227c:	4603      	mov	r3, r0
 800227e:	80bb      	strh	r3, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	f1c3 0301 	rsb	r3, r3, #1
 800228e:	b29b      	uxth	r3, r3
 8002290:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	461a      	mov	r2, r3
 800229a:	03d2      	lsls	r2, r2, #15
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 80022ac:	88ba      	ldrh	r2, [r7, #4]
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	4413      	add	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b219      	sxth	r1, r3
 80022b6:	787a      	ldrb	r2, [r7, #1]
 80022b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fca9 	bl	8001c14 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 80022c2:	88ba      	ldrh	r2, [r7, #4]
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b219      	sxth	r1, r3
 80022cc:	787a      	ldrb	r2, [r7, #1]
 80022ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fc9e 	bl	8001c14 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	4413      	add	r3, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	787a      	ldrb	r2, [r7, #1]
 80022e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fc93 	bl	8001c14 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	787a      	ldrb	r2, [r7, #1]
 80022fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fc88 	bl	8001c14 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002304:	88fa      	ldrh	r2, [r7, #6]
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	b29b      	uxth	r3, r3
 800230c:	b218      	sxth	r0, r3
 800230e:	88fa      	ldrh	r2, [r7, #6]
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	4413      	add	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	b21a      	sxth	r2, r3
 8002318:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800231c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002320:	787b      	ldrb	r3, [r7, #1]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4623      	mov	r3, r4
 8002326:	f7ff fca3 	bl	8001c70 <DrawLine>

    while (x < y) {
 800232a:	e089      	b.n	8002440 <FillCircle+0x1d6>
        if (f >= 0) {
 800232c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0e      	blt.n	8002352 <FillCircle+0xe8>
            y--;
 8002334:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29b      	uxth	r3, r3
 800233e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002340:	8a7b      	ldrh	r3, [r7, #18]
 8002342:	3302      	adds	r3, #2
 8002344:	b29b      	uxth	r3, r3
 8002346:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002348:	8afa      	ldrh	r2, [r7, #22]
 800234a:	8a7b      	ldrh	r3, [r7, #18]
 800234c:	4413      	add	r3, r2
 800234e:	b29b      	uxth	r3, r3
 8002350:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002352:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002356:	b29b      	uxth	r3, r3
 8002358:	3301      	adds	r3, #1
 800235a:	b29b      	uxth	r3, r3
 800235c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800235e:	8abb      	ldrh	r3, [r7, #20]
 8002360:	3302      	adds	r3, #2
 8002362:	b29b      	uxth	r3, r3
 8002364:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002366:	8afa      	ldrh	r2, [r7, #22]
 8002368:	8abb      	ldrh	r3, [r7, #20]
 800236a:	4413      	add	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	8a3b      	ldrh	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	b29b      	uxth	r3, r3
 8002378:	b218      	sxth	r0, r3
 800237a:	88ba      	ldrh	r2, [r7, #4]
 800237c:	89fb      	ldrh	r3, [r7, #14]
 800237e:	4413      	add	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	b219      	sxth	r1, r3
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	8a3b      	ldrh	r3, [r7, #16]
 8002388:	4413      	add	r3, r2
 800238a:	b29b      	uxth	r3, r3
 800238c:	b21c      	sxth	r4, r3
 800238e:	88ba      	ldrh	r2, [r7, #4]
 8002390:	89fb      	ldrh	r3, [r7, #14]
 8002392:	4413      	add	r3, r2
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21a      	sxth	r2, r3
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	4622      	mov	r2, r4
 80023a0:	f7ff fc66 	bl	8001c70 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	8a3b      	ldrh	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	b218      	sxth	r0, r3
 80023ae:	88ba      	ldrh	r2, [r7, #4]
 80023b0:	89fb      	ldrh	r3, [r7, #14]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b219      	sxth	r1, r3
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	8a3b      	ldrh	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	b21c      	sxth	r4, r3
 80023c2:	88ba      	ldrh	r2, [r7, #4]
 80023c4:	89fb      	ldrh	r3, [r7, #14]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	787b      	ldrb	r3, [r7, #1]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	4622      	mov	r2, r4
 80023d4:	f7ff fc4c 	bl	8001c70 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	89fb      	ldrh	r3, [r7, #14]
 80023dc:	4413      	add	r3, r2
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b218      	sxth	r0, r3
 80023e2:	88ba      	ldrh	r2, [r7, #4]
 80023e4:	8a3b      	ldrh	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	b219      	sxth	r1, r3
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	b21c      	sxth	r4, r3
 80023f6:	88ba      	ldrh	r2, [r7, #4]
 80023f8:	8a3b      	ldrh	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b21a      	sxth	r2, r3
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	4622      	mov	r2, r4
 8002408:	f7ff fc32 	bl	8001c70 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 800240c:	88fa      	ldrh	r2, [r7, #6]
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	4413      	add	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	b218      	sxth	r0, r3
 8002416:	88ba      	ldrh	r2, [r7, #4]
 8002418:	8a3b      	ldrh	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b29b      	uxth	r3, r3
 800241e:	b219      	sxth	r1, r3
 8002420:	88fa      	ldrh	r2, [r7, #6]
 8002422:	89fb      	ldrh	r3, [r7, #14]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21c      	sxth	r4, r3
 800242a:	88ba      	ldrh	r2, [r7, #4]
 800242c:	8a3b      	ldrh	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	b21a      	sxth	r2, r3
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	4622      	mov	r2, r4
 800243c:	f7ff fc18 	bl	8001c70 <DrawLine>
    while (x < y) {
 8002440:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002444:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002448:	429a      	cmp	r2, r3
 800244a:	f6ff af6f 	blt.w	800232c <FillCircle+0xc2>
    }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}

08002458 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	813b      	strh	r3, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 8002472:	2300      	movs	r3, #0
 8002474:	82fb      	strh	r3, [r7, #22]
 8002476:	e02e      	b.n	80024d6 <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 8002478:	2300      	movs	r3, #0
 800247a:	82bb      	strh	r3, [r7, #20]
 800247c:	e01f      	b.n	80024be <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 800247e:	8aba      	ldrh	r2, [r7, #20]
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4413      	add	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	b218      	sxth	r0, r3
 8002488:	8afa      	ldrh	r2, [r7, #22]
 800248a:	8c3b      	ldrh	r3, [r7, #32]
 800248c:	4413      	add	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	b219      	sxth	r1, r3
 8002492:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002496:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800249a:	fb03 f202 	mul.w	r2, r3, r2
 800249e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024a2:	4413      	add	r3, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f7ff fbb1 	bl	8001c14 <DrawPixel>
    	for(i=0;i<x;i++){
 80024b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	82bb      	strh	r3, [r7, #20]
 80024be:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80024c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	dbd9      	blt.n	800247e <ShowImage+0x26>
    for(j=0;j<y;j++){
 80024ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	82fb      	strh	r3, [r7, #22]
 80024d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80024da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbca      	blt.n	8002478 <ShowImage+0x20>
    	}
    }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002512:	f7fe fe9b 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002516:	f002 fb0d 	bl	8004b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800251a:	f7fd ffdb 	bl	80004d4 <main>
  bx lr
 800251e:	4770      	bx	lr
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002528:	0800bd64 	.word	0x0800bd64
  ldr r2, =_sbss
 800252c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002530:	20002c60 	.word	0x20002c60

08002534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_2_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_Init+0x28>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_Init+0x28>)
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002548:	2003      	movs	r0, #3
 800254a:	f000 f947 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254e:	200f      	movs	r0, #15
 8002550:	f000 f808 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002554:	f7fe fc84 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x54>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x58>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	fbb3 f3f1 	udiv	r3, r3, r1
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f95f 	bl	8002846 <HAL_SYSTICK_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00e      	b.n	80025b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d80a      	bhi.n	80025ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002598:	2200      	movs	r2, #0
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f000 f927 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <HAL_InitTick+0x5c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000048 	.word	0x20000048
 80025bc:	20000058 	.word	0x20000058
 80025c0:	20000054 	.word	0x20000054

080025c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_IncTick+0x1c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_IncTick+0x20>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <HAL_IncTick+0x20>)
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000058 	.word	0x20000058
 80025e4:	20002c4c 	.word	0x20002c4c

080025e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <HAL_GetTick+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	20002c4c 	.word	0x20002c4c

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fff0 	bl	80025e8 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffe0 	bl	80025e8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000058 	.word	0x20000058

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800266c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4906      	ldr	r1, [pc, #24]	; (80026dc <__NVIC_EnableIRQ+0x34>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f7ff ff90 	bl	80026e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff2d 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff ff42 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff90 	bl	8002734 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5f 	bl	80026e0 <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff35 	bl	80026a8 <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffa2 	bl	8002798 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e043      	b.n	80028fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	4b22      	ldr	r3, [pc, #136]	; (8002908 <HAL_DMA_Init+0xa8>)
 800287e:	4413      	add	r3, r2
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <HAL_DMA_Init+0xac>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	009a      	lsls	r2, r3, #2
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_DMA_Init+0xb0>)
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	bffdfff8 	.word	0xbffdfff8
 800290c:	cccccccd 	.word	0xcccccccd
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_DMA_Start_IT+0x20>
 8002930:	2302      	movs	r3, #2
 8002932:	e04a      	b.n	80029ca <HAL_DMA_Start_IT+0xb6>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002942:	2b01      	cmp	r3, #1
 8002944:	d13a      	bne.n	80029bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fa30 	bl	8002dd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 020e 	orr.w	r2, r2, #14
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e00f      	b.n	80029aa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 020a 	orr.w	r2, r2, #10
 80029a8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e005      	b.n	80029c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
 80029c6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d008      	beq.n	80029fa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2204      	movs	r2, #4
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e020      	b.n	8002a3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 020e 	bic.w	r2, r2, #14
 8002a08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0201 	bic.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
	...

08002a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d005      	beq.n	8002a6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e051      	b.n	8002b0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 020e 	bic.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_DMA_Abort_IT+0xd0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d029      	beq.n	8002ae8 <HAL_DMA_Abort_IT+0xa0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_DMA_Abort_IT+0xd4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d022      	beq.n	8002ae4 <HAL_DMA_Abort_IT+0x9c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <HAL_DMA_Abort_IT+0xd8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d01a      	beq.n	8002ade <HAL_DMA_Abort_IT+0x96>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_DMA_Abort_IT+0xdc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d012      	beq.n	8002ad8 <HAL_DMA_Abort_IT+0x90>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_DMA_Abort_IT+0xe0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00a      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x8a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_DMA_Abort_IT+0xe4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d102      	bne.n	8002acc <HAL_DMA_Abort_IT+0x84>
 8002ac6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aca:	e00e      	b.n	8002aea <HAL_DMA_Abort_IT+0xa2>
 8002acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad0:	e00b      	b.n	8002aea <HAL_DMA_Abort_IT+0xa2>
 8002ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad6:	e008      	b.n	8002aea <HAL_DMA_Abort_IT+0xa2>
 8002ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002adc:	e005      	b.n	8002aea <HAL_DMA_Abort_IT+0xa2>
 8002ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ae2:	e002      	b.n	8002aea <HAL_DMA_Abort_IT+0xa2>
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	e000      	b.n	8002aea <HAL_DMA_Abort_IT+0xa2>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_DMA_Abort_IT+0xe8>)
 8002aec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
    } 
  }
  return status;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40020008 	.word	0x40020008
 8002b1c:	4002001c 	.word	0x4002001c
 8002b20:	40020030 	.word	0x40020030
 8002b24:	40020044 	.word	0x40020044
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	4002006c 	.word	0x4002006c
 8002b30:	40020000 	.word	0x40020000

08002b34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2204      	movs	r2, #4
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d04f      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc8>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0204 	bic.w	r2, r2, #4
 8002b82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a66      	ldr	r2, [pc, #408]	; (8002d24 <HAL_DMA_IRQHandler+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d029      	beq.n	8002be2 <HAL_DMA_IRQHandler+0xae>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_DMA_IRQHandler+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_IRQHandler+0xaa>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a63      	ldr	r2, [pc, #396]	; (8002d2c <HAL_DMA_IRQHandler+0x1f8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0xa4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a62      	ldr	r2, [pc, #392]	; (8002d30 <HAL_DMA_IRQHandler+0x1fc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d012      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x9e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a60      	ldr	r2, [pc, #384]	; (8002d34 <HAL_DMA_IRQHandler+0x200>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x98>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5f      	ldr	r2, [pc, #380]	; (8002d38 <HAL_DMA_IRQHandler+0x204>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x92>
 8002bc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bc4:	e00e      	b.n	8002be4 <HAL_DMA_IRQHandler+0xb0>
 8002bc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bca:	e00b      	b.n	8002be4 <HAL_DMA_IRQHandler+0xb0>
 8002bcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bd0:	e008      	b.n	8002be4 <HAL_DMA_IRQHandler+0xb0>
 8002bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bd6:	e005      	b.n	8002be4 <HAL_DMA_IRQHandler+0xb0>
 8002bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bdc:	e002      	b.n	8002be4 <HAL_DMA_IRQHandler+0xb0>
 8002bde:	2340      	movs	r3, #64	; 0x40
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_IRQHandler+0xb0>
 8002be2:	2304      	movs	r3, #4
 8002be4:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_DMA_IRQHandler+0x208>)
 8002be6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8094 	beq.w	8002d1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bfa:	e08e      	b.n	8002d1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2202      	movs	r2, #2
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d056      	beq.n	8002cba <HAL_DMA_IRQHandler+0x186>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d051      	beq.n	8002cba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 020a 	bic.w	r2, r2, #10
 8002c32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a38      	ldr	r2, [pc, #224]	; (8002d24 <HAL_DMA_IRQHandler+0x1f0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d029      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x166>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <HAL_DMA_IRQHandler+0x1f4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d022      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x162>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <HAL_DMA_IRQHandler+0x1f8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01a      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x15c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a34      	ldr	r2, [pc, #208]	; (8002d30 <HAL_DMA_IRQHandler+0x1fc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d012      	beq.n	8002c8a <HAL_DMA_IRQHandler+0x156>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <HAL_DMA_IRQHandler+0x200>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00a      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x150>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <HAL_DMA_IRQHandler+0x204>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d102      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x14a>
 8002c78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c7c:	e00e      	b.n	8002c9c <HAL_DMA_IRQHandler+0x168>
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c82:	e00b      	b.n	8002c9c <HAL_DMA_IRQHandler+0x168>
 8002c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c88:	e008      	b.n	8002c9c <HAL_DMA_IRQHandler+0x168>
 8002c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c8e:	e005      	b.n	8002c9c <HAL_DMA_IRQHandler+0x168>
 8002c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c94:	e002      	b.n	8002c9c <HAL_DMA_IRQHandler+0x168>
 8002c96:	2320      	movs	r3, #32
 8002c98:	e000      	b.n	8002c9c <HAL_DMA_IRQHandler+0x168>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	4a27      	ldr	r2, [pc, #156]	; (8002d3c <HAL_DMA_IRQHandler+0x208>)
 8002c9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d034      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cb8:	e02f      	b.n	8002d1a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d028      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x1e8>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d023      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	2101      	movs	r1, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
    }
  }
  return;
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
}
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40020008 	.word	0x40020008
 8002d28:	4002001c 	.word	0x4002001c
 8002d2c:	40020030 	.word	0x40020030
 8002d30:	40020044 	.word	0x40020044
 8002d34:	40020058 	.word	0x40020058
 8002d38:	4002006c 	.word	0x4002006c
 8002d3c:	40020000 	.word	0x40020000

08002d40 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_RegisterCallback+0x20>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e031      	b.n	8002dc4 <HAL_DMA_RegisterCallback+0x84>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d121      	bne.n	8002db6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8002d72:	7afb      	ldrb	r3, [r7, #11]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d81b      	bhi.n	8002db0 <HAL_DMA_RegisterCallback+0x70>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_DMA_RegisterCallback+0x40>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002da1 	.word	0x08002da1
 8002d8c:	08002da9 	.word	0x08002da9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002d96:	e010      	b.n	8002dba <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8002d9e:	e00c      	b.n	8002dba <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8002da6:	e008      	b.n	8002dba <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8002dae:	e004      	b.n	8002dba <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8002db4:	e001      	b.n	8002dba <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	371c      	adds	r7, #28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b10      	cmp	r3, #16
 8002dfc:	d108      	bne.n	8002e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e0e:	e007      	b.n	8002e20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b08b      	sub	sp, #44	; 0x2c
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3e:	e169      	b.n	8003114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e40:	2201      	movs	r2, #1
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69fa      	ldr	r2, [r7, #28]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 8158 	bne.w	800310e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a9a      	ldr	r2, [pc, #616]	; (80030cc <HAL_GPIO_Init+0x2a0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d05e      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e68:	4a98      	ldr	r2, [pc, #608]	; (80030cc <HAL_GPIO_Init+0x2a0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d875      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e6e:	4a98      	ldr	r2, [pc, #608]	; (80030d0 <HAL_GPIO_Init+0x2a4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d058      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e74:	4a96      	ldr	r2, [pc, #600]	; (80030d0 <HAL_GPIO_Init+0x2a4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d86f      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e7a:	4a96      	ldr	r2, [pc, #600]	; (80030d4 <HAL_GPIO_Init+0x2a8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d052      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e80:	4a94      	ldr	r2, [pc, #592]	; (80030d4 <HAL_GPIO_Init+0x2a8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d869      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e86:	4a94      	ldr	r2, [pc, #592]	; (80030d8 <HAL_GPIO_Init+0x2ac>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d04c      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e8c:	4a92      	ldr	r2, [pc, #584]	; (80030d8 <HAL_GPIO_Init+0x2ac>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d863      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e92:	4a92      	ldr	r2, [pc, #584]	; (80030dc <HAL_GPIO_Init+0x2b0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d046      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
 8002e98:	4a90      	ldr	r2, [pc, #576]	; (80030dc <HAL_GPIO_Init+0x2b0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d85d      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d82a      	bhi.n	8002ef8 <HAL_GPIO_Init+0xcc>
 8002ea2:	2b12      	cmp	r3, #18
 8002ea4:	d859      	bhi.n	8002f5a <HAL_GPIO_Init+0x12e>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <HAL_GPIO_Init+0x80>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002f27 	.word	0x08002f27
 8002eb0:	08002f01 	.word	0x08002f01
 8002eb4:	08002f13 	.word	0x08002f13
 8002eb8:	08002f55 	.word	0x08002f55
 8002ebc:	08002f5b 	.word	0x08002f5b
 8002ec0:	08002f5b 	.word	0x08002f5b
 8002ec4:	08002f5b 	.word	0x08002f5b
 8002ec8:	08002f5b 	.word	0x08002f5b
 8002ecc:	08002f5b 	.word	0x08002f5b
 8002ed0:	08002f5b 	.word	0x08002f5b
 8002ed4:	08002f5b 	.word	0x08002f5b
 8002ed8:	08002f5b 	.word	0x08002f5b
 8002edc:	08002f5b 	.word	0x08002f5b
 8002ee0:	08002f5b 	.word	0x08002f5b
 8002ee4:	08002f5b 	.word	0x08002f5b
 8002ee8:	08002f5b 	.word	0x08002f5b
 8002eec:	08002f5b 	.word	0x08002f5b
 8002ef0:	08002f09 	.word	0x08002f09
 8002ef4:	08002f1d 	.word	0x08002f1d
 8002ef8:	4a79      	ldr	r2, [pc, #484]	; (80030e0 <HAL_GPIO_Init+0x2b4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002efe:	e02c      	b.n	8002f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	623b      	str	r3, [r7, #32]
          break;
 8002f06:	e029      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	623b      	str	r3, [r7, #32]
          break;
 8002f10:	e024      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	3308      	adds	r3, #8
 8002f18:	623b      	str	r3, [r7, #32]
          break;
 8002f1a:	e01f      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	330c      	adds	r3, #12
 8002f22:	623b      	str	r3, [r7, #32]
          break;
 8002f24:	e01a      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	623b      	str	r3, [r7, #32]
          break;
 8002f32:	e013      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	611a      	str	r2, [r3, #16]
          break;
 8002f46:	e009      	b.n	8002f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	615a      	str	r2, [r3, #20]
          break;
 8002f52:	e003      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f54:	2300      	movs	r3, #0
 8002f56:	623b      	str	r3, [r7, #32]
          break;
 8002f58:	e000      	b.n	8002f5c <HAL_GPIO_Init+0x130>
          break;
 8002f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2bff      	cmp	r3, #255	; 0xff
 8002f60:	d801      	bhi.n	8002f66 <HAL_GPIO_Init+0x13a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_Init+0x13e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2bff      	cmp	r3, #255	; 0xff
 8002f70:	d802      	bhi.n	8002f78 <HAL_GPIO_Init+0x14c>
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	e002      	b.n	8002f7e <HAL_GPIO_Init+0x152>
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	3b08      	subs	r3, #8
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	210f      	movs	r1, #15
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	6a39      	ldr	r1, [r7, #32]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 80b1 	beq.w	800310e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fac:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_GPIO_Init+0x2b8>)
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	4a4c      	ldr	r2, [pc, #304]	; (80030e4 <HAL_GPIO_Init+0x2b8>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6193      	str	r3, [r2, #24]
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_GPIO_Init+0x2b8>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fc4:	4a48      	ldr	r2, [pc, #288]	; (80030e8 <HAL_GPIO_Init+0x2bc>)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	3302      	adds	r3, #2
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a40      	ldr	r2, [pc, #256]	; (80030ec <HAL_GPIO_Init+0x2c0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_GPIO_Init+0x1ec>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <HAL_GPIO_Init+0x2c4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00d      	beq.n	8003014 <HAL_GPIO_Init+0x1e8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3e      	ldr	r2, [pc, #248]	; (80030f4 <HAL_GPIO_Init+0x2c8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d007      	beq.n	8003010 <HAL_GPIO_Init+0x1e4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <HAL_GPIO_Init+0x2cc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d101      	bne.n	800300c <HAL_GPIO_Init+0x1e0>
 8003008:	2303      	movs	r3, #3
 800300a:	e006      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 800300c:	2304      	movs	r3, #4
 800300e:	e004      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 8003010:	2302      	movs	r3, #2
 8003012:	e002      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_GPIO_Init+0x1ee>
 8003018:	2300      	movs	r3, #0
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	f002 0203 	and.w	r2, r2, #3
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	4093      	lsls	r3, r2
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800302a:	492f      	ldr	r1, [pc, #188]	; (80030e8 <HAL_GPIO_Init+0x2bc>)
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	492c      	ldr	r1, [pc, #176]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	4928      	ldr	r1, [pc, #160]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4922      	ldr	r1, [pc, #136]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	43db      	mvns	r3, r3
 8003082:	491e      	ldr	r1, [pc, #120]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003084:	4013      	ands	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4918      	ldr	r1, [pc, #96]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
 80030a0:	e006      	b.n	80030b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	4914      	ldr	r1, [pc, #80]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d021      	beq.n	8003100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_GPIO_Init+0x2d0>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
 80030c8:	e021      	b.n	800310e <HAL_GPIO_Init+0x2e2>
 80030ca:	bf00      	nop
 80030cc:	10320000 	.word	0x10320000
 80030d0:	10310000 	.word	0x10310000
 80030d4:	10220000 	.word	0x10220000
 80030d8:	10210000 	.word	0x10210000
 80030dc:	10120000 	.word	0x10120000
 80030e0:	10110000 	.word	0x10110000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40010800 	.word	0x40010800
 80030f0:	40010c00 	.word	0x40010c00
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40011400 	.word	0x40011400
 80030fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_GPIO_Init+0x304>)
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	43db      	mvns	r3, r3
 8003108:	4909      	ldr	r1, [pc, #36]	; (8003130 <HAL_GPIO_Init+0x304>)
 800310a:	4013      	ands	r3, r2
 800310c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	f47f ae8e 	bne.w	8002e40 <HAL_GPIO_Init+0x14>
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	372c      	adds	r7, #44	; 0x2c
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr
 8003130:	40010400 	.word	0x40010400

08003134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	887b      	ldrh	r3, [r7, #2]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
 8003150:	e001      	b.n	8003156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3714      	adds	r7, #20
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	807b      	strh	r3, [r7, #2]
 800316e:	4613      	mov	r3, r2
 8003170:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003172:	787b      	ldrb	r3, [r7, #1]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800317e:	e003      	b.n	8003188 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	041a      	lsls	r2, r3, #16
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a4:	887a      	ldrh	r2, [r7, #2]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4013      	ands	r3, r2
 80031aa:	041a      	lsls	r2, r3, #16
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43d9      	mvns	r1, r3
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	400b      	ands	r3, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e272      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8087 	beq.w	80032f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e4:	4b92      	ldr	r3, [pc, #584]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d00c      	beq.n	800320a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f0:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d112      	bne.n	8003222 <HAL_RCC_OscConfig+0x5e>
 80031fc:	4b8c      	ldr	r3, [pc, #560]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003208:	d10b      	bne.n	8003222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320a:	4b89      	ldr	r3, [pc, #548]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d06c      	beq.n	80032f0 <HAL_RCC_OscConfig+0x12c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d168      	bne.n	80032f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e24c      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x76>
 800322c:	4b80      	ldr	r3, [pc, #512]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7f      	ldr	r2, [pc, #508]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e02e      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x98>
 8003242:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7a      	ldr	r2, [pc, #488]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b78      	ldr	r3, [pc, #480]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a77      	ldr	r2, [pc, #476]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e01d      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0xbc>
 8003266:	4b72      	ldr	r3, [pc, #456]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a71      	ldr	r2, [pc, #452]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6f      	ldr	r3, [pc, #444]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6e      	ldr	r2, [pc, #440]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0xd4>
 8003280:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6a      	ldr	r2, [pc, #424]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b68      	ldr	r3, [pc, #416]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a67      	ldr	r2, [pc, #412]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f9a2 	bl	80025e8 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f99e 	bl	80025e8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e200      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe4>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7ff f98e 	bl	80025e8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7ff f98a 	bl	80025e8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1ec      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x10c>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032fe:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800330a:	4b49      	ldr	r3, [pc, #292]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b08      	cmp	r3, #8
 8003314:	d11c      	bne.n	8003350 <HAL_RCC_OscConfig+0x18c>
 8003316:	4b46      	ldr	r3, [pc, #280]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d116      	bne.n	8003350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	4b43      	ldr	r3, [pc, #268]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_RCC_OscConfig+0x176>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1c0      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4939      	ldr	r1, [pc, #228]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	e03a      	b.n	80033c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x270>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7ff f943 	bl	80025e8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7ff f93f 	bl	80025e8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1a1      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4927      	ldr	r1, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
 8003398:	e015      	b.n	80033c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x270>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7ff f922 	bl	80025e8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7ff f91e 	bl	80025e8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e180      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d03a      	beq.n	8003448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d019      	beq.n	800340e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7ff f902 	bl	80025e8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e8:	f7ff f8fe 	bl	80025e8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e160      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003406:	2001      	movs	r0, #1
 8003408:	f000 faa6 	bl	8003958 <RCC_Delay>
 800340c:	e01c      	b.n	8003448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_RCC_OscConfig+0x274>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7ff f8e8 	bl	80025e8 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341a:	e00f      	b.n	800343c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7ff f8e4 	bl	80025e8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d908      	bls.n	800343c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e146      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	42420000 	.word	0x42420000
 8003438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b92      	ldr	r3, [pc, #584]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e9      	bne.n	800341c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a6 	beq.w	80035a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345a:	4b8b      	ldr	r3, [pc, #556]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10d      	bne.n	8003482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4a87      	ldr	r2, [pc, #540]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	61d3      	str	r3, [r2, #28]
 8003472:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003482:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348e:	4b7f      	ldr	r3, [pc, #508]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a7e      	ldr	r2, [pc, #504]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349a:	f7ff f8a5 	bl	80025e8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7ff f8a1 	bl	80025e8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e103      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b75      	ldr	r3, [pc, #468]	; (800368c <HAL_RCC_OscConfig+0x4c8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_OscConfig+0x312>
 80034c8:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	e02d      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x334>
 80034de:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a69      	ldr	r2, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a66      	ldr	r2, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6213      	str	r3, [r2, #32]
 80034f6:	e01c      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d10c      	bne.n	800351a <HAL_RCC_OscConfig+0x356>
 8003500:	4b61      	ldr	r3, [pc, #388]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a60      	ldr	r2, [pc, #384]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a5d      	ldr	r2, [pc, #372]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6213      	str	r3, [r2, #32]
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0x36e>
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a5a      	ldr	r2, [pc, #360]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d015      	beq.n	8003566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7ff f855 	bl	80025e8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003542:	f7ff f851 	bl	80025e8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003550:	4293      	cmp	r3, r2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e0b1      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ee      	beq.n	8003542 <HAL_RCC_OscConfig+0x37e>
 8003564:	e014      	b.n	8003590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003566:	f7ff f83f 	bl	80025e8 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7ff f83b 	bl	80025e8 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e09b      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ee      	bne.n	800356e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003596:	4b3c      	ldr	r3, [pc, #240]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	4a3b      	ldr	r2, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8087 	beq.w	80036ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d061      	beq.n	800367c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d146      	bne.n	800364e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c0:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_RCC_OscConfig+0x4cc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7ff f80f 	bl	80025e8 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ce:	f7ff f80b 	bl	80025e8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e06d      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e0:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d108      	bne.n	8003608 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4921      	ldr	r1, [pc, #132]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a19      	ldr	r1, [r3, #32]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	430b      	orrs	r3, r1
 800361a:	491b      	ldr	r1, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe ffdf 	bl	80025e8 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fe ffdb 	bl	80025e8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e03d      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x46a>
 800364c:	e035      	b.n	80036ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe ffc8 	bl	80025e8 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe ffc4 	bl	80025e8 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e026      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x498>
 800367a:	e01e      	b.n	80036ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e019      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x500>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000

080036c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0d0      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036dc:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d910      	bls.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 0207 	bic.w	r2, r3, #7
 80036f2:	4965      	ldr	r1, [pc, #404]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800372e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a52      	ldr	r2, [pc, #328]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003746:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d040      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d115      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e073      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06b      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f023 0203 	bic.w	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4936      	ldr	r1, [pc, #216]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b8:	f7fe ff16 	bl	80025e8 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe ff12 	bl	80025e8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e053      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	4b2d      	ldr	r3, [pc, #180]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 020c 	and.w	r2, r3, #12
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1eb      	bne.n	80037c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d210      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b24      	ldr	r3, [pc, #144]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4922      	ldr	r1, [pc, #136]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <HAL_RCC_ClockConfig+0x1cc>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1d0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fe74 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40022000 	.word	0x40022000
 800388c:	40021000 	.word	0x40021000
 8003890:	0800b3b0 	.word	0x0800b3b0
 8003894:	20000048 	.word	0x20000048
 8003898:	20000054 	.word	0x20000054

0800389c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b490      	push	{r4, r7}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038a2:	4b29      	ldr	r3, [pc, #164]	; (8003948 <HAL_RCC_GetSysClockFreq+0xac>)
 80038a4:	1d3c      	adds	r4, r7, #4
 80038a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038ac:	f240 2301 	movw	r3, #513	; 0x201
 80038b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	2300      	movs	r3, #0
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038c6:	4b21      	ldr	r3, [pc, #132]	; (800394c <HAL_RCC_GetSysClockFreq+0xb0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d002      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x46>
 80038da:	e02b      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038dc:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038de:	623b      	str	r3, [r7, #32]
      break;
 80038e0:	e02b      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	0c9b      	lsrs	r3, r3, #18
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3328      	adds	r3, #40	; 0x28
 80038ec:	443b      	add	r3, r7
 80038ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d012      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0c5b      	lsrs	r3, r3, #17
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	3328      	adds	r3, #40	; 0x28
 800390a:	443b      	add	r3, r7
 800390c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003910:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003916:	fb03 f202 	mul.w	r2, r3, r2
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
 8003922:	e004      	b.n	800392e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	623b      	str	r3, [r7, #32]
      break;
 8003932:	e002      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003936:	623b      	str	r3, [r7, #32]
      break;
 8003938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393a:	6a3b      	ldr	r3, [r7, #32]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc90      	pop	{r4, r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	0800606c 	.word	0x0800606c
 800394c:	40021000 	.word	0x40021000
 8003950:	007a1200 	.word	0x007a1200
 8003954:	003d0900 	.word	0x003d0900

08003958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <RCC_Delay+0x34>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <RCC_Delay+0x38>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0a5b      	lsrs	r3, r3, #9
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003974:	bf00      	nop
  }
  while (Delay --);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	60fa      	str	r2, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f9      	bne.n	8003974 <RCC_Delay+0x1c>
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	20000048 	.word	0x20000048
 8003990:	10624dd3 	.word	0x10624dd3

08003994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e041      	b.n	8003a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd fa82 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f000 fcb4 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d001      	beq.n	8003a4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e032      	b.n	8003ab2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a18      	ldr	r2, [pc, #96]	; (8003abc <HAL_TIM_Base_Start+0x88>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIM_Base_Start+0x48>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a66:	d009      	beq.n	8003a7c <HAL_TIM_Base_Start+0x48>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <HAL_TIM_Base_Start+0x8c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIM_Base_Start+0x48>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <HAL_TIM_Base_Start+0x90>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b06      	cmp	r3, #6
 8003a8c:	d010      	beq.n	8003ab0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	e007      	b.n	8003ab0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800

08003ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d001      	beq.n	8003ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e03a      	b.n	8003b56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0201 	orr.w	r2, r2, #1
 8003af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_TIM_Base_Start_IT+0x98>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_TIM_Base_Start_IT+0x58>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0a:	d009      	beq.n	8003b20 <HAL_TIM_Base_Start_IT+0x58>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIM_Base_Start_IT+0x58>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d111      	bne.n	8003b44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d010      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b42:	e007      	b.n	8003b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800

08003b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e041      	b.n	8003c02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f839 	bl	8003c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 fbc8 	bl	8004340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <HAL_TIM_PWM_Start+0x24>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e022      	b.n	8003c86 <HAL_TIM_PWM_Start+0x6a>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d109      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x3e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	bf14      	ite	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	2300      	moveq	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	e015      	b.n	8003c86 <HAL_TIM_PWM_Start+0x6a>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d109      	bne.n	8003c74 <HAL_TIM_PWM_Start+0x58>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e008      	b.n	8003c86 <HAL_TIM_PWM_Start+0x6a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	bf14      	ite	ne
 8003c80:	2301      	movne	r3, #1
 8003c82:	2300      	moveq	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e05e      	b.n	8003d4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_PWM_Start+0x82>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	e013      	b.n	8003cc6 <HAL_TIM_PWM_Start+0xaa>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d104      	bne.n	8003cae <HAL_TIM_PWM_Start+0x92>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cac:	e00b      	b.n	8003cc6 <HAL_TIM_PWM_Start+0xaa>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_PWM_Start+0xa2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cbc:	e003      	b.n	8003cc6 <HAL_TIM_PWM_Start+0xaa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fe44 	bl	800495c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_TIM_PWM_Start+0x138>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_TIM_PWM_Start+0x138>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIM_PWM_Start+0xfa>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d009      	beq.n	8003d16 <HAL_TIM_PWM_Start+0xfa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <HAL_TIM_PWM_Start+0x13c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIM_PWM_Start+0xfa>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <HAL_TIM_PWM_Start+0x140>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d111      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d010      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d38:	e007      	b.n	8003d4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d122      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d11b      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0202 	mvn.w	r2, #2
 8003d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fab1 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 faa4 	bl	80042f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fab3 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa87 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa7a 	bl	80042f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fa89 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0208 	mvn.w	r2, #8
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa5d 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fa50 	bl	80042f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fa5f 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b10      	cmp	r3, #16
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0210 	mvn.w	r2, #16
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fa33 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa26 	bl	80042f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fa35 	bl	800431c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0201 	mvn.w	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fc f9d8 	bl	8000294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d10e      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b80      	cmp	r3, #128	; 0x80
 8003efe:	d107      	bne.n	8003f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fe02 	bl	8004b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d10e      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f9f9 	bl	800432e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d10e      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d107      	bne.n	8003f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0220 	mvn.w	r2, #32
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fdcd 	bl	8004b02 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e0ac      	b.n	80040e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b0c      	cmp	r3, #12
 8003f96:	f200 809f 	bhi.w	80040d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	080040d9 	.word	0x080040d9
 8003fa8:	080040d9 	.word	0x080040d9
 8003fac:	080040d9 	.word	0x080040d9
 8003fb0:	08004015 	.word	0x08004015
 8003fb4:	080040d9 	.word	0x080040d9
 8003fb8:	080040d9 	.word	0x080040d9
 8003fbc:	080040d9 	.word	0x080040d9
 8003fc0:	08004057 	.word	0x08004057
 8003fc4:	080040d9 	.word	0x080040d9
 8003fc8:	080040d9 	.word	0x080040d9
 8003fcc:	080040d9 	.word	0x080040d9
 8003fd0:	08004097 	.word	0x08004097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68b9      	ldr	r1, [r7, #8]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fa12 	bl	8004404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0208 	orr.w	r2, r2, #8
 8003fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0204 	bic.w	r2, r2, #4
 8003ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6999      	ldr	r1, [r3, #24]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	619a      	str	r2, [r3, #24]
      break;
 8004012:	e062      	b.n	80040da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fa58 	bl	80044d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6999      	ldr	r1, [r3, #24]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	619a      	str	r2, [r3, #24]
      break;
 8004054:	e041      	b.n	80040da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	4618      	mov	r0, r3
 800405e:	f000 faa1 	bl	80045a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0208 	orr.w	r2, r2, #8
 8004070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0204 	bic.w	r2, r2, #4
 8004080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69d9      	ldr	r1, [r3, #28]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	61da      	str	r2, [r3, #28]
      break;
 8004094:	e021      	b.n	80040da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 faeb 	bl	8004678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69d9      	ldr	r1, [r3, #28]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	021a      	lsls	r2, r3, #8
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	61da      	str	r2, [r3, #28]
      break;
 80040d6:	e000      	b.n	80040da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_ConfigClockSource+0x18>
 8004100:	2302      	movs	r3, #2
 8004102:	e0b3      	b.n	800426c <HAL_TIM_ConfigClockSource+0x180>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800413c:	d03e      	beq.n	80041bc <HAL_TIM_ConfigClockSource+0xd0>
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004142:	f200 8087 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x168>
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414a:	f000 8085 	beq.w	8004258 <HAL_TIM_ConfigClockSource+0x16c>
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004152:	d87f      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 8004154:	2b70      	cmp	r3, #112	; 0x70
 8004156:	d01a      	beq.n	800418e <HAL_TIM_ConfigClockSource+0xa2>
 8004158:	2b70      	cmp	r3, #112	; 0x70
 800415a:	d87b      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 800415c:	2b60      	cmp	r3, #96	; 0x60
 800415e:	d050      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x116>
 8004160:	2b60      	cmp	r3, #96	; 0x60
 8004162:	d877      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 8004164:	2b50      	cmp	r3, #80	; 0x50
 8004166:	d03c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0xf6>
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d873      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 800416c:	2b40      	cmp	r3, #64	; 0x40
 800416e:	d058      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x136>
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d86f      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 8004174:	2b30      	cmp	r3, #48	; 0x30
 8004176:	d064      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x156>
 8004178:	2b30      	cmp	r3, #48	; 0x30
 800417a:	d86b      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 800417c:	2b20      	cmp	r3, #32
 800417e:	d060      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x156>
 8004180:	2b20      	cmp	r3, #32
 8004182:	d867      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d05c      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x156>
 8004188:	2b10      	cmp	r3, #16
 800418a:	d05a      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800418c:	e062      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6899      	ldr	r1, [r3, #8]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f000 fbbe 	bl	800491e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	609a      	str	r2, [r3, #8]
      break;
 80041ba:	e04e      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6899      	ldr	r1, [r3, #8]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f000 fba7 	bl	800491e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041de:	609a      	str	r2, [r3, #8]
      break;
 80041e0:	e03b      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fb1e 	bl	8004830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2150      	movs	r1, #80	; 0x50
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fb75 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004200:	e02b      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	461a      	mov	r2, r3
 8004210:	f000 fb3c 	bl	800488c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2160      	movs	r1, #96	; 0x60
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fb65 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004220:	e01b      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	461a      	mov	r2, r3
 8004230:	f000 fafe 	bl	8004830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2140      	movs	r1, #64	; 0x40
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb55 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004240:	e00b      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f000 fb4c 	bl	80048ea <TIM_ITRx_SetConfig>
        break;
 8004252:	e002      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004258:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e031      	b.n	80042f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800429c:	6839      	ldr	r1, [r7, #0]
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fa38 	bl	8004714 <TIM_SlaveTimer_SetConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e018      	b.n	80042f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042cc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042dc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <TIM_Base_SetConfig+0xb8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00b      	beq.n	8004370 <TIM_Base_SetConfig+0x30>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	d007      	beq.n	8004370 <TIM_Base_SetConfig+0x30>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a26      	ldr	r2, [pc, #152]	; (80043fc <TIM_Base_SetConfig+0xbc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0x30>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a25      	ldr	r2, [pc, #148]	; (8004400 <TIM_Base_SetConfig+0xc0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d108      	bne.n	8004382 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <TIM_Base_SetConfig+0xb8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0x62>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0x62>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <TIM_Base_SetConfig+0xbc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0x62>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <TIM_Base_SetConfig+0xc0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <TIM_Base_SetConfig+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d103      	bne.n	80043e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	615a      	str	r2, [r3, #20]
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr
 80043f8:	40012c00 	.word	0x40012c00
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800

08004404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f023 0201 	bic.w	r2, r3, #1
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f023 0302 	bic.w	r3, r3, #2
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <TIM_OC1_SetConfig+0xc8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d10c      	bne.n	800447a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0308 	bic.w	r3, r3, #8
 8004466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <TIM_OC1_SetConfig+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d111      	bne.n	80044a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00

080044d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f023 0210 	bic.w	r2, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0320 	bic.w	r3, r3, #32
 800451a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <TIM_OC2_SetConfig+0xd0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10d      	bne.n	800454c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <TIM_OC2_SetConfig+0xd0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d113      	bne.n	800457c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800455a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00

080045a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <TIM_OC3_SetConfig+0xd0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10d      	bne.n	800461e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a14      	ldr	r2, [pc, #80]	; (8004674 <TIM_OC3_SetConfig+0xd0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d113      	bne.n	800464e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800462c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00

08004678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0f      	ldr	r2, [pc, #60]	; (8004710 <TIM_OC4_SetConfig+0x98>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d109      	bne.n	80046ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	019b      	lsls	r3, r3, #6
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40012c00 	.word	0x40012c00

08004714 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0307 	bic.w	r3, r3, #7
 800473e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b70      	cmp	r3, #112	; 0x70
 8004758:	d01a      	beq.n	8004790 <TIM_SlaveTimer_SetConfig+0x7c>
 800475a:	2b70      	cmp	r3, #112	; 0x70
 800475c:	d860      	bhi.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
 800475e:	2b60      	cmp	r3, #96	; 0x60
 8004760:	d054      	beq.n	800480c <TIM_SlaveTimer_SetConfig+0xf8>
 8004762:	2b60      	cmp	r3, #96	; 0x60
 8004764:	d85c      	bhi.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
 8004766:	2b50      	cmp	r3, #80	; 0x50
 8004768:	d046      	beq.n	80047f8 <TIM_SlaveTimer_SetConfig+0xe4>
 800476a:	2b50      	cmp	r3, #80	; 0x50
 800476c:	d858      	bhi.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
 800476e:	2b40      	cmp	r3, #64	; 0x40
 8004770:	d019      	beq.n	80047a6 <TIM_SlaveTimer_SetConfig+0x92>
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d854      	bhi.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
 8004776:	2b30      	cmp	r3, #48	; 0x30
 8004778:	d054      	beq.n	8004824 <TIM_SlaveTimer_SetConfig+0x110>
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d850      	bhi.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
 800477e:	2b20      	cmp	r3, #32
 8004780:	d050      	beq.n	8004824 <TIM_SlaveTimer_SetConfig+0x110>
 8004782:	2b20      	cmp	r3, #32
 8004784:	d84c      	bhi.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d04c      	beq.n	8004824 <TIM_SlaveTimer_SetConfig+0x110>
 800478a:	2b10      	cmp	r3, #16
 800478c:	d04a      	beq.n	8004824 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800478e:	e047      	b.n	8004820 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68d9      	ldr	r1, [r3, #12]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f000 f8bd 	bl	800491e <TIM_ETR_SetConfig>
      break;
 80047a4:	e03f      	b.n	8004826 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b05      	cmp	r3, #5
 80047ac:	d101      	bne.n	80047b2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e03a      	b.n	8004828 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a1a      	ldr	r2, [r3, #32]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047d8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	621a      	str	r2, [r3, #32]
      break;
 80047f6:	e016      	b.n	8004826 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	461a      	mov	r2, r3
 8004806:	f000 f813 	bl	8004830 <TIM_TI1_ConfigInputStage>
      break;
 800480a:	e00c      	b.n	8004826 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6899      	ldr	r1, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	461a      	mov	r2, r3
 800481a:	f000 f837 	bl	800488c <TIM_TI2_ConfigInputStage>
      break;
 800481e:	e002      	b.n	8004826 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004824:	bf00      	nop
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 030a 	bic.w	r3, r3, #10
 800486c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	621a      	str	r2, [r3, #32]
}
 8004882:	bf00      	nop
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 0210 	bic.w	r2, r3, #16
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	031b      	lsls	r3, r3, #12
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	f043 0307 	orr.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004938:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	021a      	lsls	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	431a      	orrs	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4313      	orrs	r3, r2
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	609a      	str	r2, [r3, #8]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	2201      	movs	r2, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1a      	ldr	r2, [r3, #32]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	43db      	mvns	r3, r3
 800497e:	401a      	ands	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a1a      	ldr	r2, [r3, #32]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e046      	b.n	8004a4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a16      	ldr	r2, [pc, #88]	; (8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00e      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a08:	d009      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10c      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	40000800 	.word	0x40000800

08004a60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e03d      	b.n	8004af8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
	...

08004b28 <__errno>:
 8004b28:	4b01      	ldr	r3, [pc, #4]	; (8004b30 <__errno+0x8>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	2000005c 	.word	0x2000005c

08004b34 <__libc_init_array>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	2600      	movs	r6, #0
 8004b38:	4d0c      	ldr	r5, [pc, #48]	; (8004b6c <__libc_init_array+0x38>)
 8004b3a:	4c0d      	ldr	r4, [pc, #52]	; (8004b70 <__libc_init_array+0x3c>)
 8004b3c:	1b64      	subs	r4, r4, r5
 8004b3e:	10a4      	asrs	r4, r4, #2
 8004b40:	42a6      	cmp	r6, r4
 8004b42:	d109      	bne.n	8004b58 <__libc_init_array+0x24>
 8004b44:	f001 fa6a 	bl	800601c <_init>
 8004b48:	2600      	movs	r6, #0
 8004b4a:	4d0a      	ldr	r5, [pc, #40]	; (8004b74 <__libc_init_array+0x40>)
 8004b4c:	4c0a      	ldr	r4, [pc, #40]	; (8004b78 <__libc_init_array+0x44>)
 8004b4e:	1b64      	subs	r4, r4, r5
 8004b50:	10a4      	asrs	r4, r4, #2
 8004b52:	42a6      	cmp	r6, r4
 8004b54:	d105      	bne.n	8004b62 <__libc_init_array+0x2e>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5c:	4798      	blx	r3
 8004b5e:	3601      	adds	r6, #1
 8004b60:	e7ee      	b.n	8004b40 <__libc_init_array+0xc>
 8004b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b66:	4798      	blx	r3
 8004b68:	3601      	adds	r6, #1
 8004b6a:	e7f2      	b.n	8004b52 <__libc_init_array+0x1e>
 8004b6c:	0800bd5c 	.word	0x0800bd5c
 8004b70:	0800bd5c 	.word	0x0800bd5c
 8004b74:	0800bd5c 	.word	0x0800bd5c
 8004b78:	0800bd60 	.word	0x0800bd60

08004b7c <memcpy>:
 8004b7c:	440a      	add	r2, r1
 8004b7e:	4291      	cmp	r1, r2
 8004b80:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b84:	d100      	bne.n	8004b88 <memcpy+0xc>
 8004b86:	4770      	bx	lr
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b94:	d1f9      	bne.n	8004b8a <memcpy+0xe>
 8004b96:	bd10      	pop	{r4, pc}

08004b98 <memset>:
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4402      	add	r2, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <srand>:
 8004ba8:	b538      	push	{r3, r4, r5, lr}
 8004baa:	4b10      	ldr	r3, [pc, #64]	; (8004bec <srand+0x44>)
 8004bac:	4604      	mov	r4, r0
 8004bae:	681d      	ldr	r5, [r3, #0]
 8004bb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004bb2:	b9b3      	cbnz	r3, 8004be2 <srand+0x3a>
 8004bb4:	2018      	movs	r0, #24
 8004bb6:	f000 f8b3 	bl	8004d20 <malloc>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	63a8      	str	r0, [r5, #56]	; 0x38
 8004bbe:	b920      	cbnz	r0, 8004bca <srand+0x22>
 8004bc0:	2142      	movs	r1, #66	; 0x42
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <srand+0x48>)
 8004bc4:	480b      	ldr	r0, [pc, #44]	; (8004bf4 <srand+0x4c>)
 8004bc6:	f000 f87b 	bl	8004cc0 <__assert_func>
 8004bca:	490b      	ldr	r1, [pc, #44]	; (8004bf8 <srand+0x50>)
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <srand+0x54>)
 8004bce:	e9c0 1300 	strd	r1, r3, [r0]
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <srand+0x58>)
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	6083      	str	r3, [r0, #8]
 8004bd8:	230b      	movs	r3, #11
 8004bda:	8183      	strh	r3, [r0, #12]
 8004bdc:	2001      	movs	r0, #1
 8004bde:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004be2:	2200      	movs	r2, #0
 8004be4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004be6:	611c      	str	r4, [r3, #16]
 8004be8:	615a      	str	r2, [r3, #20]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	2000005c 	.word	0x2000005c
 8004bf0:	0800bc18 	.word	0x0800bc18
 8004bf4:	0800bc2f 	.word	0x0800bc2f
 8004bf8:	abcd330e 	.word	0xabcd330e
 8004bfc:	e66d1234 	.word	0xe66d1234
 8004c00:	0005deec 	.word	0x0005deec

08004c04 <rand>:
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <rand+0x5c>)
 8004c06:	b510      	push	{r4, lr}
 8004c08:	681c      	ldr	r4, [r3, #0]
 8004c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c0c:	b9b3      	cbnz	r3, 8004c3c <rand+0x38>
 8004c0e:	2018      	movs	r0, #24
 8004c10:	f000 f886 	bl	8004d20 <malloc>
 8004c14:	4602      	mov	r2, r0
 8004c16:	63a0      	str	r0, [r4, #56]	; 0x38
 8004c18:	b920      	cbnz	r0, 8004c24 <rand+0x20>
 8004c1a:	214e      	movs	r1, #78	; 0x4e
 8004c1c:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <rand+0x60>)
 8004c1e:	4812      	ldr	r0, [pc, #72]	; (8004c68 <rand+0x64>)
 8004c20:	f000 f84e 	bl	8004cc0 <__assert_func>
 8004c24:	4911      	ldr	r1, [pc, #68]	; (8004c6c <rand+0x68>)
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <rand+0x6c>)
 8004c28:	e9c0 1300 	strd	r1, r3, [r0]
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <rand+0x70>)
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6083      	str	r3, [r0, #8]
 8004c32:	230b      	movs	r3, #11
 8004c34:	8183      	strh	r3, [r0, #12]
 8004c36:	2001      	movs	r0, #1
 8004c38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004c3e:	4a0e      	ldr	r2, [pc, #56]	; (8004c78 <rand+0x74>)
 8004c40:	6920      	ldr	r0, [r4, #16]
 8004c42:	6963      	ldr	r3, [r4, #20]
 8004c44:	4342      	muls	r2, r0
 8004c46:	490d      	ldr	r1, [pc, #52]	; (8004c7c <rand+0x78>)
 8004c48:	fb01 2203 	mla	r2, r1, r3, r2
 8004c4c:	fba0 0101 	umull	r0, r1, r0, r1
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	eb42 0001 	adc.w	r0, r2, r1
 8004c56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004c5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	2000005c 	.word	0x2000005c
 8004c64:	0800bc18 	.word	0x0800bc18
 8004c68:	0800bc2f 	.word	0x0800bc2f
 8004c6c:	abcd330e 	.word	0xabcd330e
 8004c70:	e66d1234 	.word	0xe66d1234
 8004c74:	0005deec 	.word	0x0005deec
 8004c78:	5851f42d 	.word	0x5851f42d
 8004c7c:	4c957f2d 	.word	0x4c957f2d

08004c80 <siprintf>:
 8004c80:	b40e      	push	{r1, r2, r3}
 8004c82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c86:	b500      	push	{lr}
 8004c88:	b09c      	sub	sp, #112	; 0x70
 8004c8a:	ab1d      	add	r3, sp, #116	; 0x74
 8004c8c:	9002      	str	r0, [sp, #8]
 8004c8e:	9006      	str	r0, [sp, #24]
 8004c90:	9107      	str	r1, [sp, #28]
 8004c92:	9104      	str	r1, [sp, #16]
 8004c94:	4808      	ldr	r0, [pc, #32]	; (8004cb8 <siprintf+0x38>)
 8004c96:	4909      	ldr	r1, [pc, #36]	; (8004cbc <siprintf+0x3c>)
 8004c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c9c:	9105      	str	r1, [sp, #20]
 8004c9e:	6800      	ldr	r0, [r0, #0]
 8004ca0:	a902      	add	r1, sp, #8
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	f000 f97c 	bl	8004fa0 <_svfiprintf_r>
 8004ca8:	2200      	movs	r2, #0
 8004caa:	9b02      	ldr	r3, [sp, #8]
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	b01c      	add	sp, #112	; 0x70
 8004cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb4:	b003      	add	sp, #12
 8004cb6:	4770      	bx	lr
 8004cb8:	2000005c 	.word	0x2000005c
 8004cbc:	ffff0208 	.word	0xffff0208

08004cc0 <__assert_func>:
 8004cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cc2:	4614      	mov	r4, r2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <__assert_func+0x2c>)
 8004cc8:	4605      	mov	r5, r0
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68d8      	ldr	r0, [r3, #12]
 8004cce:	b14c      	cbz	r4, 8004ce4 <__assert_func+0x24>
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <__assert_func+0x30>)
 8004cd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cd6:	9100      	str	r1, [sp, #0]
 8004cd8:	462b      	mov	r3, r5
 8004cda:	4906      	ldr	r1, [pc, #24]	; (8004cf4 <__assert_func+0x34>)
 8004cdc:	f000 f80e 	bl	8004cfc <fiprintf>
 8004ce0:	f000 fe1c 	bl	800591c <abort>
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <__assert_func+0x38>)
 8004ce6:	461c      	mov	r4, r3
 8004ce8:	e7f3      	b.n	8004cd2 <__assert_func+0x12>
 8004cea:	bf00      	nop
 8004cec:	2000005c 	.word	0x2000005c
 8004cf0:	0800bc8a 	.word	0x0800bc8a
 8004cf4:	0800bc97 	.word	0x0800bc97
 8004cf8:	0800bcc5 	.word	0x0800bcc5

08004cfc <fiprintf>:
 8004cfc:	b40e      	push	{r1, r2, r3}
 8004cfe:	b503      	push	{r0, r1, lr}
 8004d00:	4601      	mov	r1, r0
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	4805      	ldr	r0, [pc, #20]	; (8004d1c <fiprintf+0x20>)
 8004d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	f000 fa6f 	bl	80051f0 <_vfiprintf_r>
 8004d12:	b002      	add	sp, #8
 8004d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d18:	b003      	add	sp, #12
 8004d1a:	4770      	bx	lr
 8004d1c:	2000005c 	.word	0x2000005c

08004d20 <malloc>:
 8004d20:	4b02      	ldr	r3, [pc, #8]	; (8004d2c <malloc+0xc>)
 8004d22:	4601      	mov	r1, r0
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	f000 b86b 	b.w	8004e00 <_malloc_r>
 8004d2a:	bf00      	nop
 8004d2c:	2000005c 	.word	0x2000005c

08004d30 <_free_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4605      	mov	r5, r0
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d040      	beq.n	8004dba <_free_r+0x8a>
 8004d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d3c:	1f0c      	subs	r4, r1, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bfb8      	it	lt
 8004d42:	18e4      	addlt	r4, r4, r3
 8004d44:	f001 f836 	bl	8005db4 <__malloc_lock>
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <_free_r+0x8c>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	b933      	cbnz	r3, 8004d5c <_free_r+0x2c>
 8004d4e:	6063      	str	r3, [r4, #4]
 8004d50:	6014      	str	r4, [r2, #0]
 8004d52:	4628      	mov	r0, r5
 8004d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d58:	f001 b832 	b.w	8005dc0 <__malloc_unlock>
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	d908      	bls.n	8004d72 <_free_r+0x42>
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	1821      	adds	r1, r4, r0
 8004d64:	428b      	cmp	r3, r1
 8004d66:	bf01      	itttt	eq
 8004d68:	6819      	ldreq	r1, [r3, #0]
 8004d6a:	685b      	ldreq	r3, [r3, #4]
 8004d6c:	1809      	addeq	r1, r1, r0
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	e7ed      	b.n	8004d4e <_free_r+0x1e>
 8004d72:	461a      	mov	r2, r3
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	b10b      	cbz	r3, 8004d7c <_free_r+0x4c>
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	d9fa      	bls.n	8004d72 <_free_r+0x42>
 8004d7c:	6811      	ldr	r1, [r2, #0]
 8004d7e:	1850      	adds	r0, r2, r1
 8004d80:	42a0      	cmp	r0, r4
 8004d82:	d10b      	bne.n	8004d9c <_free_r+0x6c>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	4401      	add	r1, r0
 8004d88:	1850      	adds	r0, r2, r1
 8004d8a:	4283      	cmp	r3, r0
 8004d8c:	6011      	str	r1, [r2, #0]
 8004d8e:	d1e0      	bne.n	8004d52 <_free_r+0x22>
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4401      	add	r1, r0
 8004d96:	6011      	str	r1, [r2, #0]
 8004d98:	6053      	str	r3, [r2, #4]
 8004d9a:	e7da      	b.n	8004d52 <_free_r+0x22>
 8004d9c:	d902      	bls.n	8004da4 <_free_r+0x74>
 8004d9e:	230c      	movs	r3, #12
 8004da0:	602b      	str	r3, [r5, #0]
 8004da2:	e7d6      	b.n	8004d52 <_free_r+0x22>
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	1821      	adds	r1, r4, r0
 8004da8:	428b      	cmp	r3, r1
 8004daa:	bf01      	itttt	eq
 8004dac:	6819      	ldreq	r1, [r3, #0]
 8004dae:	685b      	ldreq	r3, [r3, #4]
 8004db0:	1809      	addeq	r1, r1, r0
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6063      	str	r3, [r4, #4]
 8004db6:	6054      	str	r4, [r2, #4]
 8004db8:	e7cb      	b.n	8004d52 <_free_r+0x22>
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20002c50 	.word	0x20002c50

08004dc0 <sbrk_aligned>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4e0e      	ldr	r6, [pc, #56]	; (8004dfc <sbrk_aligned+0x3c>)
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	6831      	ldr	r1, [r6, #0]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	b911      	cbnz	r1, 8004dd2 <sbrk_aligned+0x12>
 8004dcc:	f000 fcd6 	bl	800577c <_sbrk_r>
 8004dd0:	6030      	str	r0, [r6, #0]
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 fcd1 	bl	800577c <_sbrk_r>
 8004dda:	1c43      	adds	r3, r0, #1
 8004ddc:	d00a      	beq.n	8004df4 <sbrk_aligned+0x34>
 8004dde:	1cc4      	adds	r4, r0, #3
 8004de0:	f024 0403 	bic.w	r4, r4, #3
 8004de4:	42a0      	cmp	r0, r4
 8004de6:	d007      	beq.n	8004df8 <sbrk_aligned+0x38>
 8004de8:	1a21      	subs	r1, r4, r0
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 fcc6 	bl	800577c <_sbrk_r>
 8004df0:	3001      	adds	r0, #1
 8004df2:	d101      	bne.n	8004df8 <sbrk_aligned+0x38>
 8004df4:	f04f 34ff 	mov.w	r4, #4294967295
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	20002c54 	.word	0x20002c54

08004e00 <_malloc_r>:
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	1ccd      	adds	r5, r1, #3
 8004e06:	f025 0503 	bic.w	r5, r5, #3
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	2d0c      	cmp	r5, #12
 8004e0e:	bf38      	it	cc
 8004e10:	250c      	movcc	r5, #12
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	4607      	mov	r7, r0
 8004e16:	db01      	blt.n	8004e1c <_malloc_r+0x1c>
 8004e18:	42a9      	cmp	r1, r5
 8004e1a:	d905      	bls.n	8004e28 <_malloc_r+0x28>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	2600      	movs	r6, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4630      	mov	r0, r6
 8004e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e28:	4e2e      	ldr	r6, [pc, #184]	; (8004ee4 <_malloc_r+0xe4>)
 8004e2a:	f000 ffc3 	bl	8005db4 <__malloc_lock>
 8004e2e:	6833      	ldr	r3, [r6, #0]
 8004e30:	461c      	mov	r4, r3
 8004e32:	bb34      	cbnz	r4, 8004e82 <_malloc_r+0x82>
 8004e34:	4629      	mov	r1, r5
 8004e36:	4638      	mov	r0, r7
 8004e38:	f7ff ffc2 	bl	8004dc0 <sbrk_aligned>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	4604      	mov	r4, r0
 8004e40:	d14d      	bne.n	8004ede <_malloc_r+0xde>
 8004e42:	6834      	ldr	r4, [r6, #0]
 8004e44:	4626      	mov	r6, r4
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	d140      	bne.n	8004ecc <_malloc_r+0xcc>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4638      	mov	r0, r7
 8004e50:	eb04 0803 	add.w	r8, r4, r3
 8004e54:	f000 fc92 	bl	800577c <_sbrk_r>
 8004e58:	4580      	cmp	r8, r0
 8004e5a:	d13a      	bne.n	8004ed2 <_malloc_r+0xd2>
 8004e5c:	6821      	ldr	r1, [r4, #0]
 8004e5e:	3503      	adds	r5, #3
 8004e60:	1a6d      	subs	r5, r5, r1
 8004e62:	f025 0503 	bic.w	r5, r5, #3
 8004e66:	3508      	adds	r5, #8
 8004e68:	2d0c      	cmp	r5, #12
 8004e6a:	bf38      	it	cc
 8004e6c:	250c      	movcc	r5, #12
 8004e6e:	4638      	mov	r0, r7
 8004e70:	4629      	mov	r1, r5
 8004e72:	f7ff ffa5 	bl	8004dc0 <sbrk_aligned>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d02b      	beq.n	8004ed2 <_malloc_r+0xd2>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	442b      	add	r3, r5
 8004e7e:	6023      	str	r3, [r4, #0]
 8004e80:	e00e      	b.n	8004ea0 <_malloc_r+0xa0>
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	1b52      	subs	r2, r2, r5
 8004e86:	d41e      	bmi.n	8004ec6 <_malloc_r+0xc6>
 8004e88:	2a0b      	cmp	r2, #11
 8004e8a:	d916      	bls.n	8004eba <_malloc_r+0xba>
 8004e8c:	1961      	adds	r1, r4, r5
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	6025      	str	r5, [r4, #0]
 8004e92:	bf18      	it	ne
 8004e94:	6059      	strne	r1, [r3, #4]
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	bf08      	it	eq
 8004e9a:	6031      	streq	r1, [r6, #0]
 8004e9c:	5162      	str	r2, [r4, r5]
 8004e9e:	604b      	str	r3, [r1, #4]
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f104 060b 	add.w	r6, r4, #11
 8004ea6:	f000 ff8b 	bl	8005dc0 <__malloc_unlock>
 8004eaa:	f026 0607 	bic.w	r6, r6, #7
 8004eae:	1d23      	adds	r3, r4, #4
 8004eb0:	1af2      	subs	r2, r6, r3
 8004eb2:	d0b6      	beq.n	8004e22 <_malloc_r+0x22>
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	50a3      	str	r3, [r4, r2]
 8004eb8:	e7b3      	b.n	8004e22 <_malloc_r+0x22>
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	bf0c      	ite	eq
 8004ec0:	6032      	streq	r2, [r6, #0]
 8004ec2:	605a      	strne	r2, [r3, #4]
 8004ec4:	e7ec      	b.n	8004ea0 <_malloc_r+0xa0>
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	6864      	ldr	r4, [r4, #4]
 8004eca:	e7b2      	b.n	8004e32 <_malloc_r+0x32>
 8004ecc:	4634      	mov	r4, r6
 8004ece:	6876      	ldr	r6, [r6, #4]
 8004ed0:	e7b9      	b.n	8004e46 <_malloc_r+0x46>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	f000 ff72 	bl	8005dc0 <__malloc_unlock>
 8004edc:	e7a1      	b.n	8004e22 <_malloc_r+0x22>
 8004ede:	6025      	str	r5, [r4, #0]
 8004ee0:	e7de      	b.n	8004ea0 <_malloc_r+0xa0>
 8004ee2:	bf00      	nop
 8004ee4:	20002c50 	.word	0x20002c50

08004ee8 <__ssputs_r>:
 8004ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	688e      	ldr	r6, [r1, #8]
 8004eee:	4682      	mov	sl, r0
 8004ef0:	429e      	cmp	r6, r3
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	4690      	mov	r8, r2
 8004ef6:	461f      	mov	r7, r3
 8004ef8:	d838      	bhi.n	8004f6c <__ssputs_r+0x84>
 8004efa:	898a      	ldrh	r2, [r1, #12]
 8004efc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f00:	d032      	beq.n	8004f68 <__ssputs_r+0x80>
 8004f02:	6825      	ldr	r5, [r4, #0]
 8004f04:	6909      	ldr	r1, [r1, #16]
 8004f06:	3301      	adds	r3, #1
 8004f08:	eba5 0901 	sub.w	r9, r5, r1
 8004f0c:	6965      	ldr	r5, [r4, #20]
 8004f0e:	444b      	add	r3, r9
 8004f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f18:	106d      	asrs	r5, r5, #1
 8004f1a:	429d      	cmp	r5, r3
 8004f1c:	bf38      	it	cc
 8004f1e:	461d      	movcc	r5, r3
 8004f20:	0553      	lsls	r3, r2, #21
 8004f22:	d531      	bpl.n	8004f88 <__ssputs_r+0xa0>
 8004f24:	4629      	mov	r1, r5
 8004f26:	f7ff ff6b 	bl	8004e00 <_malloc_r>
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	b950      	cbnz	r0, 8004f44 <__ssputs_r+0x5c>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	f8ca 3000 	str.w	r3, [sl]
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	464a      	mov	r2, r9
 8004f46:	6921      	ldr	r1, [r4, #16]
 8004f48:	f7ff fe18 	bl	8004b7c <memcpy>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	6126      	str	r6, [r4, #16]
 8004f5a:	444e      	add	r6, r9
 8004f5c:	6026      	str	r6, [r4, #0]
 8004f5e:	463e      	mov	r6, r7
 8004f60:	6165      	str	r5, [r4, #20]
 8004f62:	eba5 0509 	sub.w	r5, r5, r9
 8004f66:	60a5      	str	r5, [r4, #8]
 8004f68:	42be      	cmp	r6, r7
 8004f6a:	d900      	bls.n	8004f6e <__ssputs_r+0x86>
 8004f6c:	463e      	mov	r6, r7
 8004f6e:	4632      	mov	r2, r6
 8004f70:	4641      	mov	r1, r8
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f000 ff04 	bl	8005d80 <memmove>
 8004f78:	68a3      	ldr	r3, [r4, #8]
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	1b9b      	subs	r3, r3, r6
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	4433      	add	r3, r6
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	e7db      	b.n	8004f40 <__ssputs_r+0x58>
 8004f88:	462a      	mov	r2, r5
 8004f8a:	f000 ff1f 	bl	8005dcc <_realloc_r>
 8004f8e:	4606      	mov	r6, r0
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d1e1      	bne.n	8004f58 <__ssputs_r+0x70>
 8004f94:	4650      	mov	r0, sl
 8004f96:	6921      	ldr	r1, [r4, #16]
 8004f98:	f7ff feca 	bl	8004d30 <_free_r>
 8004f9c:	e7c7      	b.n	8004f2e <__ssputs_r+0x46>
	...

08004fa0 <_svfiprintf_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	4698      	mov	r8, r3
 8004fa6:	898b      	ldrh	r3, [r1, #12]
 8004fa8:	4607      	mov	r7, r0
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	460d      	mov	r5, r1
 8004fae:	4614      	mov	r4, r2
 8004fb0:	b09d      	sub	sp, #116	; 0x74
 8004fb2:	d50e      	bpl.n	8004fd2 <_svfiprintf_r+0x32>
 8004fb4:	690b      	ldr	r3, [r1, #16]
 8004fb6:	b963      	cbnz	r3, 8004fd2 <_svfiprintf_r+0x32>
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	f7ff ff21 	bl	8004e00 <_malloc_r>
 8004fbe:	6028      	str	r0, [r5, #0]
 8004fc0:	6128      	str	r0, [r5, #16]
 8004fc2:	b920      	cbnz	r0, 8004fce <_svfiprintf_r+0x2e>
 8004fc4:	230c      	movs	r3, #12
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	e0d1      	b.n	8005172 <_svfiprintf_r+0x1d2>
 8004fce:	2340      	movs	r3, #64	; 0x40
 8004fd0:	616b      	str	r3, [r5, #20]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fdc:	2330      	movs	r3, #48	; 0x30
 8004fde:	f04f 0901 	mov.w	r9, #1
 8004fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800518c <_svfiprintf_r+0x1ec>
 8004fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fee:	4623      	mov	r3, r4
 8004ff0:	469a      	mov	sl, r3
 8004ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ff6:	b10a      	cbz	r2, 8004ffc <_svfiprintf_r+0x5c>
 8004ff8:	2a25      	cmp	r2, #37	; 0x25
 8004ffa:	d1f9      	bne.n	8004ff0 <_svfiprintf_r+0x50>
 8004ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8005000:	d00b      	beq.n	800501a <_svfiprintf_r+0x7a>
 8005002:	465b      	mov	r3, fp
 8005004:	4622      	mov	r2, r4
 8005006:	4629      	mov	r1, r5
 8005008:	4638      	mov	r0, r7
 800500a:	f7ff ff6d 	bl	8004ee8 <__ssputs_r>
 800500e:	3001      	adds	r0, #1
 8005010:	f000 80aa 	beq.w	8005168 <_svfiprintf_r+0x1c8>
 8005014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005016:	445a      	add	r2, fp
 8005018:	9209      	str	r2, [sp, #36]	; 0x24
 800501a:	f89a 3000 	ldrb.w	r3, [sl]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 80a2 	beq.w	8005168 <_svfiprintf_r+0x1c8>
 8005024:	2300      	movs	r3, #0
 8005026:	f04f 32ff 	mov.w	r2, #4294967295
 800502a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800502e:	f10a 0a01 	add.w	sl, sl, #1
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	9307      	str	r3, [sp, #28]
 8005036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800503a:	931a      	str	r3, [sp, #104]	; 0x68
 800503c:	4654      	mov	r4, sl
 800503e:	2205      	movs	r2, #5
 8005040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005044:	4851      	ldr	r0, [pc, #324]	; (800518c <_svfiprintf_r+0x1ec>)
 8005046:	f000 fe8d 	bl	8005d64 <memchr>
 800504a:	9a04      	ldr	r2, [sp, #16]
 800504c:	b9d8      	cbnz	r0, 8005086 <_svfiprintf_r+0xe6>
 800504e:	06d0      	lsls	r0, r2, #27
 8005050:	bf44      	itt	mi
 8005052:	2320      	movmi	r3, #32
 8005054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005058:	0711      	lsls	r1, r2, #28
 800505a:	bf44      	itt	mi
 800505c:	232b      	movmi	r3, #43	; 0x2b
 800505e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b2a      	cmp	r3, #42	; 0x2a
 8005068:	d015      	beq.n	8005096 <_svfiprintf_r+0xf6>
 800506a:	4654      	mov	r4, sl
 800506c:	2000      	movs	r0, #0
 800506e:	f04f 0c0a 	mov.w	ip, #10
 8005072:	9a07      	ldr	r2, [sp, #28]
 8005074:	4621      	mov	r1, r4
 8005076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800507a:	3b30      	subs	r3, #48	; 0x30
 800507c:	2b09      	cmp	r3, #9
 800507e:	d94e      	bls.n	800511e <_svfiprintf_r+0x17e>
 8005080:	b1b0      	cbz	r0, 80050b0 <_svfiprintf_r+0x110>
 8005082:	9207      	str	r2, [sp, #28]
 8005084:	e014      	b.n	80050b0 <_svfiprintf_r+0x110>
 8005086:	eba0 0308 	sub.w	r3, r0, r8
 800508a:	fa09 f303 	lsl.w	r3, r9, r3
 800508e:	4313      	orrs	r3, r2
 8005090:	46a2      	mov	sl, r4
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	e7d2      	b.n	800503c <_svfiprintf_r+0x9c>
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	1d19      	adds	r1, r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	9103      	str	r1, [sp, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bfbb      	ittet	lt
 80050a2:	425b      	neglt	r3, r3
 80050a4:	f042 0202 	orrlt.w	r2, r2, #2
 80050a8:	9307      	strge	r3, [sp, #28]
 80050aa:	9307      	strlt	r3, [sp, #28]
 80050ac:	bfb8      	it	lt
 80050ae:	9204      	strlt	r2, [sp, #16]
 80050b0:	7823      	ldrb	r3, [r4, #0]
 80050b2:	2b2e      	cmp	r3, #46	; 0x2e
 80050b4:	d10c      	bne.n	80050d0 <_svfiprintf_r+0x130>
 80050b6:	7863      	ldrb	r3, [r4, #1]
 80050b8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ba:	d135      	bne.n	8005128 <_svfiprintf_r+0x188>
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	3402      	adds	r4, #2
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9203      	str	r2, [sp, #12]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bfb8      	it	lt
 80050ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80050ce:	9305      	str	r3, [sp, #20]
 80050d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005190 <_svfiprintf_r+0x1f0>
 80050d4:	2203      	movs	r2, #3
 80050d6:	4650      	mov	r0, sl
 80050d8:	7821      	ldrb	r1, [r4, #0]
 80050da:	f000 fe43 	bl	8005d64 <memchr>
 80050de:	b140      	cbz	r0, 80050f2 <_svfiprintf_r+0x152>
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	eba0 000a 	sub.w	r0, r0, sl
 80050e6:	fa03 f000 	lsl.w	r0, r3, r0
 80050ea:	9b04      	ldr	r3, [sp, #16]
 80050ec:	3401      	adds	r4, #1
 80050ee:	4303      	orrs	r3, r0
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f6:	2206      	movs	r2, #6
 80050f8:	4826      	ldr	r0, [pc, #152]	; (8005194 <_svfiprintf_r+0x1f4>)
 80050fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050fe:	f000 fe31 	bl	8005d64 <memchr>
 8005102:	2800      	cmp	r0, #0
 8005104:	d038      	beq.n	8005178 <_svfiprintf_r+0x1d8>
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <_svfiprintf_r+0x1f8>)
 8005108:	bb1b      	cbnz	r3, 8005152 <_svfiprintf_r+0x1b2>
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	3307      	adds	r3, #7
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	3308      	adds	r3, #8
 8005114:	9303      	str	r3, [sp, #12]
 8005116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005118:	4433      	add	r3, r6
 800511a:	9309      	str	r3, [sp, #36]	; 0x24
 800511c:	e767      	b.n	8004fee <_svfiprintf_r+0x4e>
 800511e:	460c      	mov	r4, r1
 8005120:	2001      	movs	r0, #1
 8005122:	fb0c 3202 	mla	r2, ip, r2, r3
 8005126:	e7a5      	b.n	8005074 <_svfiprintf_r+0xd4>
 8005128:	2300      	movs	r3, #0
 800512a:	f04f 0c0a 	mov.w	ip, #10
 800512e:	4619      	mov	r1, r3
 8005130:	3401      	adds	r4, #1
 8005132:	9305      	str	r3, [sp, #20]
 8005134:	4620      	mov	r0, r4
 8005136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800513a:	3a30      	subs	r2, #48	; 0x30
 800513c:	2a09      	cmp	r2, #9
 800513e:	d903      	bls.n	8005148 <_svfiprintf_r+0x1a8>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0c5      	beq.n	80050d0 <_svfiprintf_r+0x130>
 8005144:	9105      	str	r1, [sp, #20]
 8005146:	e7c3      	b.n	80050d0 <_svfiprintf_r+0x130>
 8005148:	4604      	mov	r4, r0
 800514a:	2301      	movs	r3, #1
 800514c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005150:	e7f0      	b.n	8005134 <_svfiprintf_r+0x194>
 8005152:	ab03      	add	r3, sp, #12
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	462a      	mov	r2, r5
 8005158:	4638      	mov	r0, r7
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <_svfiprintf_r+0x1fc>)
 800515c:	a904      	add	r1, sp, #16
 800515e:	f3af 8000 	nop.w
 8005162:	1c42      	adds	r2, r0, #1
 8005164:	4606      	mov	r6, r0
 8005166:	d1d6      	bne.n	8005116 <_svfiprintf_r+0x176>
 8005168:	89ab      	ldrh	r3, [r5, #12]
 800516a:	065b      	lsls	r3, r3, #25
 800516c:	f53f af2c 	bmi.w	8004fc8 <_svfiprintf_r+0x28>
 8005170:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005172:	b01d      	add	sp, #116	; 0x74
 8005174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005178:	ab03      	add	r3, sp, #12
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	462a      	mov	r2, r5
 800517e:	4638      	mov	r0, r7
 8005180:	4b06      	ldr	r3, [pc, #24]	; (800519c <_svfiprintf_r+0x1fc>)
 8005182:	a904      	add	r1, sp, #16
 8005184:	f000 f9d4 	bl	8005530 <_printf_i>
 8005188:	e7eb      	b.n	8005162 <_svfiprintf_r+0x1c2>
 800518a:	bf00      	nop
 800518c:	0800bcc6 	.word	0x0800bcc6
 8005190:	0800bccc 	.word	0x0800bccc
 8005194:	0800bcd0 	.word	0x0800bcd0
 8005198:	00000000 	.word	0x00000000
 800519c:	08004ee9 	.word	0x08004ee9

080051a0 <__sfputc_r>:
 80051a0:	6893      	ldr	r3, [r2, #8]
 80051a2:	b410      	push	{r4}
 80051a4:	3b01      	subs	r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	6093      	str	r3, [r2, #8]
 80051aa:	da07      	bge.n	80051bc <__sfputc_r+0x1c>
 80051ac:	6994      	ldr	r4, [r2, #24]
 80051ae:	42a3      	cmp	r3, r4
 80051b0:	db01      	blt.n	80051b6 <__sfputc_r+0x16>
 80051b2:	290a      	cmp	r1, #10
 80051b4:	d102      	bne.n	80051bc <__sfputc_r+0x1c>
 80051b6:	bc10      	pop	{r4}
 80051b8:	f000 baf0 	b.w	800579c <__swbuf_r>
 80051bc:	6813      	ldr	r3, [r2, #0]
 80051be:	1c58      	adds	r0, r3, #1
 80051c0:	6010      	str	r0, [r2, #0]
 80051c2:	7019      	strb	r1, [r3, #0]
 80051c4:	4608      	mov	r0, r1
 80051c6:	bc10      	pop	{r4}
 80051c8:	4770      	bx	lr

080051ca <__sfputs_r>:
 80051ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051cc:	4606      	mov	r6, r0
 80051ce:	460f      	mov	r7, r1
 80051d0:	4614      	mov	r4, r2
 80051d2:	18d5      	adds	r5, r2, r3
 80051d4:	42ac      	cmp	r4, r5
 80051d6:	d101      	bne.n	80051dc <__sfputs_r+0x12>
 80051d8:	2000      	movs	r0, #0
 80051da:	e007      	b.n	80051ec <__sfputs_r+0x22>
 80051dc:	463a      	mov	r2, r7
 80051de:	4630      	mov	r0, r6
 80051e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e4:	f7ff ffdc 	bl	80051a0 <__sfputc_r>
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	d1f3      	bne.n	80051d4 <__sfputs_r+0xa>
 80051ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051f0 <_vfiprintf_r>:
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	460d      	mov	r5, r1
 80051f6:	4614      	mov	r4, r2
 80051f8:	4698      	mov	r8, r3
 80051fa:	4606      	mov	r6, r0
 80051fc:	b09d      	sub	sp, #116	; 0x74
 80051fe:	b118      	cbz	r0, 8005208 <_vfiprintf_r+0x18>
 8005200:	6983      	ldr	r3, [r0, #24]
 8005202:	b90b      	cbnz	r3, 8005208 <_vfiprintf_r+0x18>
 8005204:	f000 fca8 	bl	8005b58 <__sinit>
 8005208:	4b89      	ldr	r3, [pc, #548]	; (8005430 <_vfiprintf_r+0x240>)
 800520a:	429d      	cmp	r5, r3
 800520c:	d11b      	bne.n	8005246 <_vfiprintf_r+0x56>
 800520e:	6875      	ldr	r5, [r6, #4]
 8005210:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005212:	07d9      	lsls	r1, r3, #31
 8005214:	d405      	bmi.n	8005222 <_vfiprintf_r+0x32>
 8005216:	89ab      	ldrh	r3, [r5, #12]
 8005218:	059a      	lsls	r2, r3, #22
 800521a:	d402      	bmi.n	8005222 <_vfiprintf_r+0x32>
 800521c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521e:	f000 fd39 	bl	8005c94 <__retarget_lock_acquire_recursive>
 8005222:	89ab      	ldrh	r3, [r5, #12]
 8005224:	071b      	lsls	r3, r3, #28
 8005226:	d501      	bpl.n	800522c <_vfiprintf_r+0x3c>
 8005228:	692b      	ldr	r3, [r5, #16]
 800522a:	b9eb      	cbnz	r3, 8005268 <_vfiprintf_r+0x78>
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f000 fb06 	bl	8005840 <__swsetup_r>
 8005234:	b1c0      	cbz	r0, 8005268 <_vfiprintf_r+0x78>
 8005236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005238:	07dc      	lsls	r4, r3, #31
 800523a:	d50e      	bpl.n	800525a <_vfiprintf_r+0x6a>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b01d      	add	sp, #116	; 0x74
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	4b7b      	ldr	r3, [pc, #492]	; (8005434 <_vfiprintf_r+0x244>)
 8005248:	429d      	cmp	r5, r3
 800524a:	d101      	bne.n	8005250 <_vfiprintf_r+0x60>
 800524c:	68b5      	ldr	r5, [r6, #8]
 800524e:	e7df      	b.n	8005210 <_vfiprintf_r+0x20>
 8005250:	4b79      	ldr	r3, [pc, #484]	; (8005438 <_vfiprintf_r+0x248>)
 8005252:	429d      	cmp	r5, r3
 8005254:	bf08      	it	eq
 8005256:	68f5      	ldreq	r5, [r6, #12]
 8005258:	e7da      	b.n	8005210 <_vfiprintf_r+0x20>
 800525a:	89ab      	ldrh	r3, [r5, #12]
 800525c:	0598      	lsls	r0, r3, #22
 800525e:	d4ed      	bmi.n	800523c <_vfiprintf_r+0x4c>
 8005260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005262:	f000 fd18 	bl	8005c96 <__retarget_lock_release_recursive>
 8005266:	e7e9      	b.n	800523c <_vfiprintf_r+0x4c>
 8005268:	2300      	movs	r3, #0
 800526a:	9309      	str	r3, [sp, #36]	; 0x24
 800526c:	2320      	movs	r3, #32
 800526e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005272:	2330      	movs	r3, #48	; 0x30
 8005274:	f04f 0901 	mov.w	r9, #1
 8005278:	f8cd 800c 	str.w	r8, [sp, #12]
 800527c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800543c <_vfiprintf_r+0x24c>
 8005280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005284:	4623      	mov	r3, r4
 8005286:	469a      	mov	sl, r3
 8005288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800528c:	b10a      	cbz	r2, 8005292 <_vfiprintf_r+0xa2>
 800528e:	2a25      	cmp	r2, #37	; 0x25
 8005290:	d1f9      	bne.n	8005286 <_vfiprintf_r+0x96>
 8005292:	ebba 0b04 	subs.w	fp, sl, r4
 8005296:	d00b      	beq.n	80052b0 <_vfiprintf_r+0xc0>
 8005298:	465b      	mov	r3, fp
 800529a:	4622      	mov	r2, r4
 800529c:	4629      	mov	r1, r5
 800529e:	4630      	mov	r0, r6
 80052a0:	f7ff ff93 	bl	80051ca <__sfputs_r>
 80052a4:	3001      	adds	r0, #1
 80052a6:	f000 80aa 	beq.w	80053fe <_vfiprintf_r+0x20e>
 80052aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ac:	445a      	add	r2, fp
 80052ae:	9209      	str	r2, [sp, #36]	; 0x24
 80052b0:	f89a 3000 	ldrb.w	r3, [sl]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80a2 	beq.w	80053fe <_vfiprintf_r+0x20e>
 80052ba:	2300      	movs	r3, #0
 80052bc:	f04f 32ff 	mov.w	r2, #4294967295
 80052c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052c4:	f10a 0a01 	add.w	sl, sl, #1
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	9307      	str	r3, [sp, #28]
 80052cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052d0:	931a      	str	r3, [sp, #104]	; 0x68
 80052d2:	4654      	mov	r4, sl
 80052d4:	2205      	movs	r2, #5
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	4858      	ldr	r0, [pc, #352]	; (800543c <_vfiprintf_r+0x24c>)
 80052dc:	f000 fd42 	bl	8005d64 <memchr>
 80052e0:	9a04      	ldr	r2, [sp, #16]
 80052e2:	b9d8      	cbnz	r0, 800531c <_vfiprintf_r+0x12c>
 80052e4:	06d1      	lsls	r1, r2, #27
 80052e6:	bf44      	itt	mi
 80052e8:	2320      	movmi	r3, #32
 80052ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ee:	0713      	lsls	r3, r2, #28
 80052f0:	bf44      	itt	mi
 80052f2:	232b      	movmi	r3, #43	; 0x2b
 80052f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f8:	f89a 3000 	ldrb.w	r3, [sl]
 80052fc:	2b2a      	cmp	r3, #42	; 0x2a
 80052fe:	d015      	beq.n	800532c <_vfiprintf_r+0x13c>
 8005300:	4654      	mov	r4, sl
 8005302:	2000      	movs	r0, #0
 8005304:	f04f 0c0a 	mov.w	ip, #10
 8005308:	9a07      	ldr	r2, [sp, #28]
 800530a:	4621      	mov	r1, r4
 800530c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005310:	3b30      	subs	r3, #48	; 0x30
 8005312:	2b09      	cmp	r3, #9
 8005314:	d94e      	bls.n	80053b4 <_vfiprintf_r+0x1c4>
 8005316:	b1b0      	cbz	r0, 8005346 <_vfiprintf_r+0x156>
 8005318:	9207      	str	r2, [sp, #28]
 800531a:	e014      	b.n	8005346 <_vfiprintf_r+0x156>
 800531c:	eba0 0308 	sub.w	r3, r0, r8
 8005320:	fa09 f303 	lsl.w	r3, r9, r3
 8005324:	4313      	orrs	r3, r2
 8005326:	46a2      	mov	sl, r4
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	e7d2      	b.n	80052d2 <_vfiprintf_r+0xe2>
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	1d19      	adds	r1, r3, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	9103      	str	r1, [sp, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	bfbb      	ittet	lt
 8005338:	425b      	neglt	r3, r3
 800533a:	f042 0202 	orrlt.w	r2, r2, #2
 800533e:	9307      	strge	r3, [sp, #28]
 8005340:	9307      	strlt	r3, [sp, #28]
 8005342:	bfb8      	it	lt
 8005344:	9204      	strlt	r2, [sp, #16]
 8005346:	7823      	ldrb	r3, [r4, #0]
 8005348:	2b2e      	cmp	r3, #46	; 0x2e
 800534a:	d10c      	bne.n	8005366 <_vfiprintf_r+0x176>
 800534c:	7863      	ldrb	r3, [r4, #1]
 800534e:	2b2a      	cmp	r3, #42	; 0x2a
 8005350:	d135      	bne.n	80053be <_vfiprintf_r+0x1ce>
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	3402      	adds	r4, #2
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	9203      	str	r2, [sp, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfb8      	it	lt
 8005360:	f04f 33ff 	movlt.w	r3, #4294967295
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005440 <_vfiprintf_r+0x250>
 800536a:	2203      	movs	r2, #3
 800536c:	4650      	mov	r0, sl
 800536e:	7821      	ldrb	r1, [r4, #0]
 8005370:	f000 fcf8 	bl	8005d64 <memchr>
 8005374:	b140      	cbz	r0, 8005388 <_vfiprintf_r+0x198>
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	eba0 000a 	sub.w	r0, r0, sl
 800537c:	fa03 f000 	lsl.w	r0, r3, r0
 8005380:	9b04      	ldr	r3, [sp, #16]
 8005382:	3401      	adds	r4, #1
 8005384:	4303      	orrs	r3, r0
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800538c:	2206      	movs	r2, #6
 800538e:	482d      	ldr	r0, [pc, #180]	; (8005444 <_vfiprintf_r+0x254>)
 8005390:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005394:	f000 fce6 	bl	8005d64 <memchr>
 8005398:	2800      	cmp	r0, #0
 800539a:	d03f      	beq.n	800541c <_vfiprintf_r+0x22c>
 800539c:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <_vfiprintf_r+0x258>)
 800539e:	bb1b      	cbnz	r3, 80053e8 <_vfiprintf_r+0x1f8>
 80053a0:	9b03      	ldr	r3, [sp, #12]
 80053a2:	3307      	adds	r3, #7
 80053a4:	f023 0307 	bic.w	r3, r3, #7
 80053a8:	3308      	adds	r3, #8
 80053aa:	9303      	str	r3, [sp, #12]
 80053ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ae:	443b      	add	r3, r7
 80053b0:	9309      	str	r3, [sp, #36]	; 0x24
 80053b2:	e767      	b.n	8005284 <_vfiprintf_r+0x94>
 80053b4:	460c      	mov	r4, r1
 80053b6:	2001      	movs	r0, #1
 80053b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80053bc:	e7a5      	b.n	800530a <_vfiprintf_r+0x11a>
 80053be:	2300      	movs	r3, #0
 80053c0:	f04f 0c0a 	mov.w	ip, #10
 80053c4:	4619      	mov	r1, r3
 80053c6:	3401      	adds	r4, #1
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	4620      	mov	r0, r4
 80053cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d0:	3a30      	subs	r2, #48	; 0x30
 80053d2:	2a09      	cmp	r2, #9
 80053d4:	d903      	bls.n	80053de <_vfiprintf_r+0x1ee>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0c5      	beq.n	8005366 <_vfiprintf_r+0x176>
 80053da:	9105      	str	r1, [sp, #20]
 80053dc:	e7c3      	b.n	8005366 <_vfiprintf_r+0x176>
 80053de:	4604      	mov	r4, r0
 80053e0:	2301      	movs	r3, #1
 80053e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e6:	e7f0      	b.n	80053ca <_vfiprintf_r+0x1da>
 80053e8:	ab03      	add	r3, sp, #12
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	462a      	mov	r2, r5
 80053ee:	4630      	mov	r0, r6
 80053f0:	4b16      	ldr	r3, [pc, #88]	; (800544c <_vfiprintf_r+0x25c>)
 80053f2:	a904      	add	r1, sp, #16
 80053f4:	f3af 8000 	nop.w
 80053f8:	4607      	mov	r7, r0
 80053fa:	1c78      	adds	r0, r7, #1
 80053fc:	d1d6      	bne.n	80053ac <_vfiprintf_r+0x1bc>
 80053fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005400:	07d9      	lsls	r1, r3, #31
 8005402:	d405      	bmi.n	8005410 <_vfiprintf_r+0x220>
 8005404:	89ab      	ldrh	r3, [r5, #12]
 8005406:	059a      	lsls	r2, r3, #22
 8005408:	d402      	bmi.n	8005410 <_vfiprintf_r+0x220>
 800540a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800540c:	f000 fc43 	bl	8005c96 <__retarget_lock_release_recursive>
 8005410:	89ab      	ldrh	r3, [r5, #12]
 8005412:	065b      	lsls	r3, r3, #25
 8005414:	f53f af12 	bmi.w	800523c <_vfiprintf_r+0x4c>
 8005418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800541a:	e711      	b.n	8005240 <_vfiprintf_r+0x50>
 800541c:	ab03      	add	r3, sp, #12
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	462a      	mov	r2, r5
 8005422:	4630      	mov	r0, r6
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <_vfiprintf_r+0x25c>)
 8005426:	a904      	add	r1, sp, #16
 8005428:	f000 f882 	bl	8005530 <_printf_i>
 800542c:	e7e4      	b.n	80053f8 <_vfiprintf_r+0x208>
 800542e:	bf00      	nop
 8005430:	0800bd1c 	.word	0x0800bd1c
 8005434:	0800bd3c 	.word	0x0800bd3c
 8005438:	0800bcfc 	.word	0x0800bcfc
 800543c:	0800bcc6 	.word	0x0800bcc6
 8005440:	0800bccc 	.word	0x0800bccc
 8005444:	0800bcd0 	.word	0x0800bcd0
 8005448:	00000000 	.word	0x00000000
 800544c:	080051cb 	.word	0x080051cb

08005450 <_printf_common>:
 8005450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005454:	4616      	mov	r6, r2
 8005456:	4699      	mov	r9, r3
 8005458:	688a      	ldr	r2, [r1, #8]
 800545a:	690b      	ldr	r3, [r1, #16]
 800545c:	4607      	mov	r7, r0
 800545e:	4293      	cmp	r3, r2
 8005460:	bfb8      	it	lt
 8005462:	4613      	movlt	r3, r2
 8005464:	6033      	str	r3, [r6, #0]
 8005466:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800546a:	460c      	mov	r4, r1
 800546c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005470:	b10a      	cbz	r2, 8005476 <_printf_common+0x26>
 8005472:	3301      	adds	r3, #1
 8005474:	6033      	str	r3, [r6, #0]
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	0699      	lsls	r1, r3, #26
 800547a:	bf42      	ittt	mi
 800547c:	6833      	ldrmi	r3, [r6, #0]
 800547e:	3302      	addmi	r3, #2
 8005480:	6033      	strmi	r3, [r6, #0]
 8005482:	6825      	ldr	r5, [r4, #0]
 8005484:	f015 0506 	ands.w	r5, r5, #6
 8005488:	d106      	bne.n	8005498 <_printf_common+0x48>
 800548a:	f104 0a19 	add.w	sl, r4, #25
 800548e:	68e3      	ldr	r3, [r4, #12]
 8005490:	6832      	ldr	r2, [r6, #0]
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	42ab      	cmp	r3, r5
 8005496:	dc28      	bgt.n	80054ea <_printf_common+0x9a>
 8005498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800549c:	1e13      	subs	r3, r2, #0
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	bf18      	it	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	0692      	lsls	r2, r2, #26
 80054a6:	d42d      	bmi.n	8005504 <_printf_common+0xb4>
 80054a8:	4649      	mov	r1, r9
 80054aa:	4638      	mov	r0, r7
 80054ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054b0:	47c0      	blx	r8
 80054b2:	3001      	adds	r0, #1
 80054b4:	d020      	beq.n	80054f8 <_printf_common+0xa8>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	68e5      	ldr	r5, [r4, #12]
 80054ba:	f003 0306 	and.w	r3, r3, #6
 80054be:	2b04      	cmp	r3, #4
 80054c0:	bf18      	it	ne
 80054c2:	2500      	movne	r5, #0
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	f04f 0600 	mov.w	r6, #0
 80054ca:	68a3      	ldr	r3, [r4, #8]
 80054cc:	bf08      	it	eq
 80054ce:	1aad      	subeq	r5, r5, r2
 80054d0:	6922      	ldr	r2, [r4, #16]
 80054d2:	bf08      	it	eq
 80054d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d8:	4293      	cmp	r3, r2
 80054da:	bfc4      	itt	gt
 80054dc:	1a9b      	subgt	r3, r3, r2
 80054de:	18ed      	addgt	r5, r5, r3
 80054e0:	341a      	adds	r4, #26
 80054e2:	42b5      	cmp	r5, r6
 80054e4:	d11a      	bne.n	800551c <_printf_common+0xcc>
 80054e6:	2000      	movs	r0, #0
 80054e8:	e008      	b.n	80054fc <_printf_common+0xac>
 80054ea:	2301      	movs	r3, #1
 80054ec:	4652      	mov	r2, sl
 80054ee:	4649      	mov	r1, r9
 80054f0:	4638      	mov	r0, r7
 80054f2:	47c0      	blx	r8
 80054f4:	3001      	adds	r0, #1
 80054f6:	d103      	bne.n	8005500 <_printf_common+0xb0>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	3501      	adds	r5, #1
 8005502:	e7c4      	b.n	800548e <_printf_common+0x3e>
 8005504:	2030      	movs	r0, #48	; 0x30
 8005506:	18e1      	adds	r1, r4, r3
 8005508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005512:	4422      	add	r2, r4
 8005514:	3302      	adds	r3, #2
 8005516:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800551a:	e7c5      	b.n	80054a8 <_printf_common+0x58>
 800551c:	2301      	movs	r3, #1
 800551e:	4622      	mov	r2, r4
 8005520:	4649      	mov	r1, r9
 8005522:	4638      	mov	r0, r7
 8005524:	47c0      	blx	r8
 8005526:	3001      	adds	r0, #1
 8005528:	d0e6      	beq.n	80054f8 <_printf_common+0xa8>
 800552a:	3601      	adds	r6, #1
 800552c:	e7d9      	b.n	80054e2 <_printf_common+0x92>
	...

08005530 <_printf_i>:
 8005530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	7e0f      	ldrb	r7, [r1, #24]
 8005536:	4691      	mov	r9, r2
 8005538:	2f78      	cmp	r7, #120	; 0x78
 800553a:	4680      	mov	r8, r0
 800553c:	460c      	mov	r4, r1
 800553e:	469a      	mov	sl, r3
 8005540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005546:	d807      	bhi.n	8005558 <_printf_i+0x28>
 8005548:	2f62      	cmp	r7, #98	; 0x62
 800554a:	d80a      	bhi.n	8005562 <_printf_i+0x32>
 800554c:	2f00      	cmp	r7, #0
 800554e:	f000 80d9 	beq.w	8005704 <_printf_i+0x1d4>
 8005552:	2f58      	cmp	r7, #88	; 0x58
 8005554:	f000 80a4 	beq.w	80056a0 <_printf_i+0x170>
 8005558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005560:	e03a      	b.n	80055d8 <_printf_i+0xa8>
 8005562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005566:	2b15      	cmp	r3, #21
 8005568:	d8f6      	bhi.n	8005558 <_printf_i+0x28>
 800556a:	a101      	add	r1, pc, #4	; (adr r1, 8005570 <_printf_i+0x40>)
 800556c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055dd 	.word	0x080055dd
 8005578:	08005559 	.word	0x08005559
 800557c:	08005559 	.word	0x08005559
 8005580:	08005559 	.word	0x08005559
 8005584:	08005559 	.word	0x08005559
 8005588:	080055dd 	.word	0x080055dd
 800558c:	08005559 	.word	0x08005559
 8005590:	08005559 	.word	0x08005559
 8005594:	08005559 	.word	0x08005559
 8005598:	08005559 	.word	0x08005559
 800559c:	080056eb 	.word	0x080056eb
 80055a0:	0800560d 	.word	0x0800560d
 80055a4:	080056cd 	.word	0x080056cd
 80055a8:	08005559 	.word	0x08005559
 80055ac:	08005559 	.word	0x08005559
 80055b0:	0800570d 	.word	0x0800570d
 80055b4:	08005559 	.word	0x08005559
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005559 	.word	0x08005559
 80055c0:	08005559 	.word	0x08005559
 80055c4:	080056d5 	.word	0x080056d5
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	1d1a      	adds	r2, r3, #4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	602a      	str	r2, [r5, #0]
 80055d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d8:	2301      	movs	r3, #1
 80055da:	e0a4      	b.n	8005726 <_printf_i+0x1f6>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	6829      	ldr	r1, [r5, #0]
 80055e0:	0606      	lsls	r6, r0, #24
 80055e2:	f101 0304 	add.w	r3, r1, #4
 80055e6:	d50a      	bpl.n	80055fe <_printf_i+0xce>
 80055e8:	680e      	ldr	r6, [r1, #0]
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	2e00      	cmp	r6, #0
 80055ee:	da03      	bge.n	80055f8 <_printf_i+0xc8>
 80055f0:	232d      	movs	r3, #45	; 0x2d
 80055f2:	4276      	negs	r6, r6
 80055f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f8:	230a      	movs	r3, #10
 80055fa:	485e      	ldr	r0, [pc, #376]	; (8005774 <_printf_i+0x244>)
 80055fc:	e019      	b.n	8005632 <_printf_i+0x102>
 80055fe:	680e      	ldr	r6, [r1, #0]
 8005600:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	bf18      	it	ne
 8005608:	b236      	sxthne	r6, r6
 800560a:	e7ef      	b.n	80055ec <_printf_i+0xbc>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	1d19      	adds	r1, r3, #4
 8005612:	6029      	str	r1, [r5, #0]
 8005614:	0601      	lsls	r1, r0, #24
 8005616:	d501      	bpl.n	800561c <_printf_i+0xec>
 8005618:	681e      	ldr	r6, [r3, #0]
 800561a:	e002      	b.n	8005622 <_printf_i+0xf2>
 800561c:	0646      	lsls	r6, r0, #25
 800561e:	d5fb      	bpl.n	8005618 <_printf_i+0xe8>
 8005620:	881e      	ldrh	r6, [r3, #0]
 8005622:	2f6f      	cmp	r7, #111	; 0x6f
 8005624:	bf0c      	ite	eq
 8005626:	2308      	moveq	r3, #8
 8005628:	230a      	movne	r3, #10
 800562a:	4852      	ldr	r0, [pc, #328]	; (8005774 <_printf_i+0x244>)
 800562c:	2100      	movs	r1, #0
 800562e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005632:	6865      	ldr	r5, [r4, #4]
 8005634:	2d00      	cmp	r5, #0
 8005636:	bfa8      	it	ge
 8005638:	6821      	ldrge	r1, [r4, #0]
 800563a:	60a5      	str	r5, [r4, #8]
 800563c:	bfa4      	itt	ge
 800563e:	f021 0104 	bicge.w	r1, r1, #4
 8005642:	6021      	strge	r1, [r4, #0]
 8005644:	b90e      	cbnz	r6, 800564a <_printf_i+0x11a>
 8005646:	2d00      	cmp	r5, #0
 8005648:	d04d      	beq.n	80056e6 <_printf_i+0x1b6>
 800564a:	4615      	mov	r5, r2
 800564c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005650:	fb03 6711 	mls	r7, r3, r1, r6
 8005654:	5dc7      	ldrb	r7, [r0, r7]
 8005656:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800565a:	4637      	mov	r7, r6
 800565c:	42bb      	cmp	r3, r7
 800565e:	460e      	mov	r6, r1
 8005660:	d9f4      	bls.n	800564c <_printf_i+0x11c>
 8005662:	2b08      	cmp	r3, #8
 8005664:	d10b      	bne.n	800567e <_printf_i+0x14e>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	07de      	lsls	r6, r3, #31
 800566a:	d508      	bpl.n	800567e <_printf_i+0x14e>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	6861      	ldr	r1, [r4, #4]
 8005670:	4299      	cmp	r1, r3
 8005672:	bfde      	ittt	le
 8005674:	2330      	movle	r3, #48	; 0x30
 8005676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800567a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800567e:	1b52      	subs	r2, r2, r5
 8005680:	6122      	str	r2, [r4, #16]
 8005682:	464b      	mov	r3, r9
 8005684:	4621      	mov	r1, r4
 8005686:	4640      	mov	r0, r8
 8005688:	f8cd a000 	str.w	sl, [sp]
 800568c:	aa03      	add	r2, sp, #12
 800568e:	f7ff fedf 	bl	8005450 <_printf_common>
 8005692:	3001      	adds	r0, #1
 8005694:	d14c      	bne.n	8005730 <_printf_i+0x200>
 8005696:	f04f 30ff 	mov.w	r0, #4294967295
 800569a:	b004      	add	sp, #16
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	4834      	ldr	r0, [pc, #208]	; (8005774 <_printf_i+0x244>)
 80056a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056a6:	6829      	ldr	r1, [r5, #0]
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80056ae:	6029      	str	r1, [r5, #0]
 80056b0:	061d      	lsls	r5, r3, #24
 80056b2:	d514      	bpl.n	80056de <_printf_i+0x1ae>
 80056b4:	07df      	lsls	r7, r3, #31
 80056b6:	bf44      	itt	mi
 80056b8:	f043 0320 	orrmi.w	r3, r3, #32
 80056bc:	6023      	strmi	r3, [r4, #0]
 80056be:	b91e      	cbnz	r6, 80056c8 <_printf_i+0x198>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	f023 0320 	bic.w	r3, r3, #32
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	2310      	movs	r3, #16
 80056ca:	e7af      	b.n	800562c <_printf_i+0xfc>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	f043 0320 	orr.w	r3, r3, #32
 80056d2:	6023      	str	r3, [r4, #0]
 80056d4:	2378      	movs	r3, #120	; 0x78
 80056d6:	4828      	ldr	r0, [pc, #160]	; (8005778 <_printf_i+0x248>)
 80056d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056dc:	e7e3      	b.n	80056a6 <_printf_i+0x176>
 80056de:	0659      	lsls	r1, r3, #25
 80056e0:	bf48      	it	mi
 80056e2:	b2b6      	uxthmi	r6, r6
 80056e4:	e7e6      	b.n	80056b4 <_printf_i+0x184>
 80056e6:	4615      	mov	r5, r2
 80056e8:	e7bb      	b.n	8005662 <_printf_i+0x132>
 80056ea:	682b      	ldr	r3, [r5, #0]
 80056ec:	6826      	ldr	r6, [r4, #0]
 80056ee:	1d18      	adds	r0, r3, #4
 80056f0:	6961      	ldr	r1, [r4, #20]
 80056f2:	6028      	str	r0, [r5, #0]
 80056f4:	0635      	lsls	r5, r6, #24
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	d501      	bpl.n	80056fe <_printf_i+0x1ce>
 80056fa:	6019      	str	r1, [r3, #0]
 80056fc:	e002      	b.n	8005704 <_printf_i+0x1d4>
 80056fe:	0670      	lsls	r0, r6, #25
 8005700:	d5fb      	bpl.n	80056fa <_printf_i+0x1ca>
 8005702:	8019      	strh	r1, [r3, #0]
 8005704:	2300      	movs	r3, #0
 8005706:	4615      	mov	r5, r2
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	e7ba      	b.n	8005682 <_printf_i+0x152>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	2100      	movs	r1, #0
 8005710:	1d1a      	adds	r2, r3, #4
 8005712:	602a      	str	r2, [r5, #0]
 8005714:	681d      	ldr	r5, [r3, #0]
 8005716:	6862      	ldr	r2, [r4, #4]
 8005718:	4628      	mov	r0, r5
 800571a:	f000 fb23 	bl	8005d64 <memchr>
 800571e:	b108      	cbz	r0, 8005724 <_printf_i+0x1f4>
 8005720:	1b40      	subs	r0, r0, r5
 8005722:	6060      	str	r0, [r4, #4]
 8005724:	6863      	ldr	r3, [r4, #4]
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	2300      	movs	r3, #0
 800572a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572e:	e7a8      	b.n	8005682 <_printf_i+0x152>
 8005730:	462a      	mov	r2, r5
 8005732:	4649      	mov	r1, r9
 8005734:	4640      	mov	r0, r8
 8005736:	6923      	ldr	r3, [r4, #16]
 8005738:	47d0      	blx	sl
 800573a:	3001      	adds	r0, #1
 800573c:	d0ab      	beq.n	8005696 <_printf_i+0x166>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	079b      	lsls	r3, r3, #30
 8005742:	d413      	bmi.n	800576c <_printf_i+0x23c>
 8005744:	68e0      	ldr	r0, [r4, #12]
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	4298      	cmp	r0, r3
 800574a:	bfb8      	it	lt
 800574c:	4618      	movlt	r0, r3
 800574e:	e7a4      	b.n	800569a <_printf_i+0x16a>
 8005750:	2301      	movs	r3, #1
 8005752:	4632      	mov	r2, r6
 8005754:	4649      	mov	r1, r9
 8005756:	4640      	mov	r0, r8
 8005758:	47d0      	blx	sl
 800575a:	3001      	adds	r0, #1
 800575c:	d09b      	beq.n	8005696 <_printf_i+0x166>
 800575e:	3501      	adds	r5, #1
 8005760:	68e3      	ldr	r3, [r4, #12]
 8005762:	9903      	ldr	r1, [sp, #12]
 8005764:	1a5b      	subs	r3, r3, r1
 8005766:	42ab      	cmp	r3, r5
 8005768:	dcf2      	bgt.n	8005750 <_printf_i+0x220>
 800576a:	e7eb      	b.n	8005744 <_printf_i+0x214>
 800576c:	2500      	movs	r5, #0
 800576e:	f104 0619 	add.w	r6, r4, #25
 8005772:	e7f5      	b.n	8005760 <_printf_i+0x230>
 8005774:	0800bcd7 	.word	0x0800bcd7
 8005778:	0800bce8 	.word	0x0800bce8

0800577c <_sbrk_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	2300      	movs	r3, #0
 8005780:	4d05      	ldr	r5, [pc, #20]	; (8005798 <_sbrk_r+0x1c>)
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fb fd2a 	bl	80011e0 <_sbrk>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_sbrk_r+0x1a>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_sbrk_r+0x1a>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20002c5c 	.word	0x20002c5c

0800579c <__swbuf_r>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	460e      	mov	r6, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	4605      	mov	r5, r0
 80057a4:	b118      	cbz	r0, 80057ae <__swbuf_r+0x12>
 80057a6:	6983      	ldr	r3, [r0, #24]
 80057a8:	b90b      	cbnz	r3, 80057ae <__swbuf_r+0x12>
 80057aa:	f000 f9d5 	bl	8005b58 <__sinit>
 80057ae:	4b21      	ldr	r3, [pc, #132]	; (8005834 <__swbuf_r+0x98>)
 80057b0:	429c      	cmp	r4, r3
 80057b2:	d12b      	bne.n	800580c <__swbuf_r+0x70>
 80057b4:	686c      	ldr	r4, [r5, #4]
 80057b6:	69a3      	ldr	r3, [r4, #24]
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	071a      	lsls	r2, r3, #28
 80057be:	d52f      	bpl.n	8005820 <__swbuf_r+0x84>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	b36b      	cbz	r3, 8005820 <__swbuf_r+0x84>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	b2f6      	uxtb	r6, r6
 80057ca:	1ac0      	subs	r0, r0, r3
 80057cc:	6963      	ldr	r3, [r4, #20]
 80057ce:	4637      	mov	r7, r6
 80057d0:	4283      	cmp	r3, r0
 80057d2:	dc04      	bgt.n	80057de <__swbuf_r+0x42>
 80057d4:	4621      	mov	r1, r4
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 f92a 	bl	8005a30 <_fflush_r>
 80057dc:	bb30      	cbnz	r0, 800582c <__swbuf_r+0x90>
 80057de:	68a3      	ldr	r3, [r4, #8]
 80057e0:	3001      	adds	r0, #1
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60a3      	str	r3, [r4, #8]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	6022      	str	r2, [r4, #0]
 80057ec:	701e      	strb	r6, [r3, #0]
 80057ee:	6963      	ldr	r3, [r4, #20]
 80057f0:	4283      	cmp	r3, r0
 80057f2:	d004      	beq.n	80057fe <__swbuf_r+0x62>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	07db      	lsls	r3, r3, #31
 80057f8:	d506      	bpl.n	8005808 <__swbuf_r+0x6c>
 80057fa:	2e0a      	cmp	r6, #10
 80057fc:	d104      	bne.n	8005808 <__swbuf_r+0x6c>
 80057fe:	4621      	mov	r1, r4
 8005800:	4628      	mov	r0, r5
 8005802:	f000 f915 	bl	8005a30 <_fflush_r>
 8005806:	b988      	cbnz	r0, 800582c <__swbuf_r+0x90>
 8005808:	4638      	mov	r0, r7
 800580a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <__swbuf_r+0x9c>)
 800580e:	429c      	cmp	r4, r3
 8005810:	d101      	bne.n	8005816 <__swbuf_r+0x7a>
 8005812:	68ac      	ldr	r4, [r5, #8]
 8005814:	e7cf      	b.n	80057b6 <__swbuf_r+0x1a>
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <__swbuf_r+0xa0>)
 8005818:	429c      	cmp	r4, r3
 800581a:	bf08      	it	eq
 800581c:	68ec      	ldreq	r4, [r5, #12]
 800581e:	e7ca      	b.n	80057b6 <__swbuf_r+0x1a>
 8005820:	4621      	mov	r1, r4
 8005822:	4628      	mov	r0, r5
 8005824:	f000 f80c 	bl	8005840 <__swsetup_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	d0cb      	beq.n	80057c4 <__swbuf_r+0x28>
 800582c:	f04f 37ff 	mov.w	r7, #4294967295
 8005830:	e7ea      	b.n	8005808 <__swbuf_r+0x6c>
 8005832:	bf00      	nop
 8005834:	0800bd1c 	.word	0x0800bd1c
 8005838:	0800bd3c 	.word	0x0800bd3c
 800583c:	0800bcfc 	.word	0x0800bcfc

08005840 <__swsetup_r>:
 8005840:	4b32      	ldr	r3, [pc, #200]	; (800590c <__swsetup_r+0xcc>)
 8005842:	b570      	push	{r4, r5, r6, lr}
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	4606      	mov	r6, r0
 8005848:	460c      	mov	r4, r1
 800584a:	b125      	cbz	r5, 8005856 <__swsetup_r+0x16>
 800584c:	69ab      	ldr	r3, [r5, #24]
 800584e:	b913      	cbnz	r3, 8005856 <__swsetup_r+0x16>
 8005850:	4628      	mov	r0, r5
 8005852:	f000 f981 	bl	8005b58 <__sinit>
 8005856:	4b2e      	ldr	r3, [pc, #184]	; (8005910 <__swsetup_r+0xd0>)
 8005858:	429c      	cmp	r4, r3
 800585a:	d10f      	bne.n	800587c <__swsetup_r+0x3c>
 800585c:	686c      	ldr	r4, [r5, #4]
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005864:	0719      	lsls	r1, r3, #28
 8005866:	d42c      	bmi.n	80058c2 <__swsetup_r+0x82>
 8005868:	06dd      	lsls	r5, r3, #27
 800586a:	d411      	bmi.n	8005890 <__swsetup_r+0x50>
 800586c:	2309      	movs	r3, #9
 800586e:	6033      	str	r3, [r6, #0]
 8005870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	e03e      	b.n	80058fa <__swsetup_r+0xba>
 800587c:	4b25      	ldr	r3, [pc, #148]	; (8005914 <__swsetup_r+0xd4>)
 800587e:	429c      	cmp	r4, r3
 8005880:	d101      	bne.n	8005886 <__swsetup_r+0x46>
 8005882:	68ac      	ldr	r4, [r5, #8]
 8005884:	e7eb      	b.n	800585e <__swsetup_r+0x1e>
 8005886:	4b24      	ldr	r3, [pc, #144]	; (8005918 <__swsetup_r+0xd8>)
 8005888:	429c      	cmp	r4, r3
 800588a:	bf08      	it	eq
 800588c:	68ec      	ldreq	r4, [r5, #12]
 800588e:	e7e6      	b.n	800585e <__swsetup_r+0x1e>
 8005890:	0758      	lsls	r0, r3, #29
 8005892:	d512      	bpl.n	80058ba <__swsetup_r+0x7a>
 8005894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005896:	b141      	cbz	r1, 80058aa <__swsetup_r+0x6a>
 8005898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800589c:	4299      	cmp	r1, r3
 800589e:	d002      	beq.n	80058a6 <__swsetup_r+0x66>
 80058a0:	4630      	mov	r0, r6
 80058a2:	f7ff fa45 	bl	8004d30 <_free_r>
 80058a6:	2300      	movs	r3, #0
 80058a8:	6363      	str	r3, [r4, #52]	; 0x34
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	2300      	movs	r3, #0
 80058b4:	6063      	str	r3, [r4, #4]
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	f043 0308 	orr.w	r3, r3, #8
 80058c0:	81a3      	strh	r3, [r4, #12]
 80058c2:	6923      	ldr	r3, [r4, #16]
 80058c4:	b94b      	cbnz	r3, 80058da <__swsetup_r+0x9a>
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d0:	d003      	beq.n	80058da <__swsetup_r+0x9a>
 80058d2:	4621      	mov	r1, r4
 80058d4:	4630      	mov	r0, r6
 80058d6:	f000 fa05 	bl	8005ce4 <__smakebuf_r>
 80058da:	89a0      	ldrh	r0, [r4, #12]
 80058dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058e0:	f010 0301 	ands.w	r3, r0, #1
 80058e4:	d00a      	beq.n	80058fc <__swsetup_r+0xbc>
 80058e6:	2300      	movs	r3, #0
 80058e8:	60a3      	str	r3, [r4, #8]
 80058ea:	6963      	ldr	r3, [r4, #20]
 80058ec:	425b      	negs	r3, r3
 80058ee:	61a3      	str	r3, [r4, #24]
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	b943      	cbnz	r3, 8005906 <__swsetup_r+0xc6>
 80058f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058f8:	d1ba      	bne.n	8005870 <__swsetup_r+0x30>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	0781      	lsls	r1, r0, #30
 80058fe:	bf58      	it	pl
 8005900:	6963      	ldrpl	r3, [r4, #20]
 8005902:	60a3      	str	r3, [r4, #8]
 8005904:	e7f4      	b.n	80058f0 <__swsetup_r+0xb0>
 8005906:	2000      	movs	r0, #0
 8005908:	e7f7      	b.n	80058fa <__swsetup_r+0xba>
 800590a:	bf00      	nop
 800590c:	2000005c 	.word	0x2000005c
 8005910:	0800bd1c 	.word	0x0800bd1c
 8005914:	0800bd3c 	.word	0x0800bd3c
 8005918:	0800bcfc 	.word	0x0800bcfc

0800591c <abort>:
 800591c:	2006      	movs	r0, #6
 800591e:	b508      	push	{r3, lr}
 8005920:	f000 faac 	bl	8005e7c <raise>
 8005924:	2001      	movs	r0, #1
 8005926:	f7fb fbe8 	bl	80010fa <_exit>
	...

0800592c <__sflush_r>:
 800592c:	898a      	ldrh	r2, [r1, #12]
 800592e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005930:	4605      	mov	r5, r0
 8005932:	0710      	lsls	r0, r2, #28
 8005934:	460c      	mov	r4, r1
 8005936:	d457      	bmi.n	80059e8 <__sflush_r+0xbc>
 8005938:	684b      	ldr	r3, [r1, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	dc04      	bgt.n	8005948 <__sflush_r+0x1c>
 800593e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	dc01      	bgt.n	8005948 <__sflush_r+0x1c>
 8005944:	2000      	movs	r0, #0
 8005946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800594a:	2e00      	cmp	r6, #0
 800594c:	d0fa      	beq.n	8005944 <__sflush_r+0x18>
 800594e:	2300      	movs	r3, #0
 8005950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005954:	682f      	ldr	r7, [r5, #0]
 8005956:	602b      	str	r3, [r5, #0]
 8005958:	d032      	beq.n	80059c0 <__sflush_r+0x94>
 800595a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	075a      	lsls	r2, r3, #29
 8005960:	d505      	bpl.n	800596e <__sflush_r+0x42>
 8005962:	6863      	ldr	r3, [r4, #4]
 8005964:	1ac0      	subs	r0, r0, r3
 8005966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005968:	b10b      	cbz	r3, 800596e <__sflush_r+0x42>
 800596a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800596c:	1ac0      	subs	r0, r0, r3
 800596e:	2300      	movs	r3, #0
 8005970:	4602      	mov	r2, r0
 8005972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005974:	4628      	mov	r0, r5
 8005976:	6a21      	ldr	r1, [r4, #32]
 8005978:	47b0      	blx	r6
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	d106      	bne.n	800598e <__sflush_r+0x62>
 8005980:	6829      	ldr	r1, [r5, #0]
 8005982:	291d      	cmp	r1, #29
 8005984:	d82c      	bhi.n	80059e0 <__sflush_r+0xb4>
 8005986:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <__sflush_r+0x100>)
 8005988:	40ca      	lsrs	r2, r1
 800598a:	07d6      	lsls	r6, r2, #31
 800598c:	d528      	bpl.n	80059e0 <__sflush_r+0xb4>
 800598e:	2200      	movs	r2, #0
 8005990:	6062      	str	r2, [r4, #4]
 8005992:	6922      	ldr	r2, [r4, #16]
 8005994:	04d9      	lsls	r1, r3, #19
 8005996:	6022      	str	r2, [r4, #0]
 8005998:	d504      	bpl.n	80059a4 <__sflush_r+0x78>
 800599a:	1c42      	adds	r2, r0, #1
 800599c:	d101      	bne.n	80059a2 <__sflush_r+0x76>
 800599e:	682b      	ldr	r3, [r5, #0]
 80059a0:	b903      	cbnz	r3, 80059a4 <__sflush_r+0x78>
 80059a2:	6560      	str	r0, [r4, #84]	; 0x54
 80059a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059a6:	602f      	str	r7, [r5, #0]
 80059a8:	2900      	cmp	r1, #0
 80059aa:	d0cb      	beq.n	8005944 <__sflush_r+0x18>
 80059ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b0:	4299      	cmp	r1, r3
 80059b2:	d002      	beq.n	80059ba <__sflush_r+0x8e>
 80059b4:	4628      	mov	r0, r5
 80059b6:	f7ff f9bb 	bl	8004d30 <_free_r>
 80059ba:	2000      	movs	r0, #0
 80059bc:	6360      	str	r0, [r4, #52]	; 0x34
 80059be:	e7c2      	b.n	8005946 <__sflush_r+0x1a>
 80059c0:	6a21      	ldr	r1, [r4, #32]
 80059c2:	2301      	movs	r3, #1
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b0      	blx	r6
 80059c8:	1c41      	adds	r1, r0, #1
 80059ca:	d1c7      	bne.n	800595c <__sflush_r+0x30>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0c4      	beq.n	800595c <__sflush_r+0x30>
 80059d2:	2b1d      	cmp	r3, #29
 80059d4:	d001      	beq.n	80059da <__sflush_r+0xae>
 80059d6:	2b16      	cmp	r3, #22
 80059d8:	d101      	bne.n	80059de <__sflush_r+0xb2>
 80059da:	602f      	str	r7, [r5, #0]
 80059dc:	e7b2      	b.n	8005944 <__sflush_r+0x18>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	e7ae      	b.n	8005946 <__sflush_r+0x1a>
 80059e8:	690f      	ldr	r7, [r1, #16]
 80059ea:	2f00      	cmp	r7, #0
 80059ec:	d0aa      	beq.n	8005944 <__sflush_r+0x18>
 80059ee:	0793      	lsls	r3, r2, #30
 80059f0:	bf18      	it	ne
 80059f2:	2300      	movne	r3, #0
 80059f4:	680e      	ldr	r6, [r1, #0]
 80059f6:	bf08      	it	eq
 80059f8:	694b      	ldreq	r3, [r1, #20]
 80059fa:	1bf6      	subs	r6, r6, r7
 80059fc:	600f      	str	r7, [r1, #0]
 80059fe:	608b      	str	r3, [r1, #8]
 8005a00:	2e00      	cmp	r6, #0
 8005a02:	dd9f      	ble.n	8005944 <__sflush_r+0x18>
 8005a04:	4633      	mov	r3, r6
 8005a06:	463a      	mov	r2, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	6a21      	ldr	r1, [r4, #32]
 8005a0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a10:	47e0      	blx	ip
 8005a12:	2800      	cmp	r0, #0
 8005a14:	dc06      	bgt.n	8005a24 <__sflush_r+0xf8>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	e790      	b.n	8005946 <__sflush_r+0x1a>
 8005a24:	4407      	add	r7, r0
 8005a26:	1a36      	subs	r6, r6, r0
 8005a28:	e7ea      	b.n	8005a00 <__sflush_r+0xd4>
 8005a2a:	bf00      	nop
 8005a2c:	20400001 	.word	0x20400001

08005a30 <_fflush_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	690b      	ldr	r3, [r1, #16]
 8005a34:	4605      	mov	r5, r0
 8005a36:	460c      	mov	r4, r1
 8005a38:	b913      	cbnz	r3, 8005a40 <_fflush_r+0x10>
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	bd38      	pop	{r3, r4, r5, pc}
 8005a40:	b118      	cbz	r0, 8005a4a <_fflush_r+0x1a>
 8005a42:	6983      	ldr	r3, [r0, #24]
 8005a44:	b90b      	cbnz	r3, 8005a4a <_fflush_r+0x1a>
 8005a46:	f000 f887 	bl	8005b58 <__sinit>
 8005a4a:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <_fflush_r+0x6c>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d11b      	bne.n	8005a88 <_fflush_r+0x58>
 8005a50:	686c      	ldr	r4, [r5, #4]
 8005a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0ef      	beq.n	8005a3a <_fflush_r+0xa>
 8005a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a5c:	07d0      	lsls	r0, r2, #31
 8005a5e:	d404      	bmi.n	8005a6a <_fflush_r+0x3a>
 8005a60:	0599      	lsls	r1, r3, #22
 8005a62:	d402      	bmi.n	8005a6a <_fflush_r+0x3a>
 8005a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a66:	f000 f915 	bl	8005c94 <__retarget_lock_acquire_recursive>
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	f7ff ff5d 	bl	800592c <__sflush_r>
 8005a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a74:	4605      	mov	r5, r0
 8005a76:	07da      	lsls	r2, r3, #31
 8005a78:	d4e0      	bmi.n	8005a3c <_fflush_r+0xc>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	059b      	lsls	r3, r3, #22
 8005a7e:	d4dd      	bmi.n	8005a3c <_fflush_r+0xc>
 8005a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a82:	f000 f908 	bl	8005c96 <__retarget_lock_release_recursive>
 8005a86:	e7d9      	b.n	8005a3c <_fflush_r+0xc>
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <_fflush_r+0x70>)
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	d101      	bne.n	8005a92 <_fflush_r+0x62>
 8005a8e:	68ac      	ldr	r4, [r5, #8]
 8005a90:	e7df      	b.n	8005a52 <_fflush_r+0x22>
 8005a92:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <_fflush_r+0x74>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	bf08      	it	eq
 8005a98:	68ec      	ldreq	r4, [r5, #12]
 8005a9a:	e7da      	b.n	8005a52 <_fflush_r+0x22>
 8005a9c:	0800bd1c 	.word	0x0800bd1c
 8005aa0:	0800bd3c 	.word	0x0800bd3c
 8005aa4:	0800bcfc 	.word	0x0800bcfc

08005aa8 <std>:
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ab6:	6083      	str	r3, [r0, #8]
 8005ab8:	8181      	strh	r1, [r0, #12]
 8005aba:	6643      	str	r3, [r0, #100]	; 0x64
 8005abc:	81c2      	strh	r2, [r0, #14]
 8005abe:	6183      	str	r3, [r0, #24]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	2208      	movs	r2, #8
 8005ac4:	305c      	adds	r0, #92	; 0x5c
 8005ac6:	f7ff f867 	bl	8004b98 <memset>
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <std+0x38>)
 8005acc:	6224      	str	r4, [r4, #32]
 8005ace:	6263      	str	r3, [r4, #36]	; 0x24
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <std+0x3c>)
 8005ad2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ad4:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <std+0x40>)
 8005ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <std+0x44>)
 8005ada:	6323      	str	r3, [r4, #48]	; 0x30
 8005adc:	bd10      	pop	{r4, pc}
 8005ade:	bf00      	nop
 8005ae0:	08005eb5 	.word	0x08005eb5
 8005ae4:	08005ed7 	.word	0x08005ed7
 8005ae8:	08005f0f 	.word	0x08005f0f
 8005aec:	08005f33 	.word	0x08005f33

08005af0 <_cleanup_r>:
 8005af0:	4901      	ldr	r1, [pc, #4]	; (8005af8 <_cleanup_r+0x8>)
 8005af2:	f000 b8af 	b.w	8005c54 <_fwalk_reent>
 8005af6:	bf00      	nop
 8005af8:	08005a31 	.word	0x08005a31

08005afc <__sfmoreglue>:
 8005afc:	2268      	movs	r2, #104	; 0x68
 8005afe:	b570      	push	{r4, r5, r6, lr}
 8005b00:	1e4d      	subs	r5, r1, #1
 8005b02:	4355      	muls	r5, r2
 8005b04:	460e      	mov	r6, r1
 8005b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b0a:	f7ff f979 	bl	8004e00 <_malloc_r>
 8005b0e:	4604      	mov	r4, r0
 8005b10:	b140      	cbz	r0, 8005b24 <__sfmoreglue+0x28>
 8005b12:	2100      	movs	r1, #0
 8005b14:	e9c0 1600 	strd	r1, r6, [r0]
 8005b18:	300c      	adds	r0, #12
 8005b1a:	60a0      	str	r0, [r4, #8]
 8005b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b20:	f7ff f83a 	bl	8004b98 <memset>
 8005b24:	4620      	mov	r0, r4
 8005b26:	bd70      	pop	{r4, r5, r6, pc}

08005b28 <__sfp_lock_acquire>:
 8005b28:	4801      	ldr	r0, [pc, #4]	; (8005b30 <__sfp_lock_acquire+0x8>)
 8005b2a:	f000 b8b3 	b.w	8005c94 <__retarget_lock_acquire_recursive>
 8005b2e:	bf00      	nop
 8005b30:	20002c59 	.word	0x20002c59

08005b34 <__sfp_lock_release>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__sfp_lock_release+0x8>)
 8005b36:	f000 b8ae 	b.w	8005c96 <__retarget_lock_release_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	20002c59 	.word	0x20002c59

08005b40 <__sinit_lock_acquire>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__sinit_lock_acquire+0x8>)
 8005b42:	f000 b8a7 	b.w	8005c94 <__retarget_lock_acquire_recursive>
 8005b46:	bf00      	nop
 8005b48:	20002c5a 	.word	0x20002c5a

08005b4c <__sinit_lock_release>:
 8005b4c:	4801      	ldr	r0, [pc, #4]	; (8005b54 <__sinit_lock_release+0x8>)
 8005b4e:	f000 b8a2 	b.w	8005c96 <__retarget_lock_release_recursive>
 8005b52:	bf00      	nop
 8005b54:	20002c5a 	.word	0x20002c5a

08005b58 <__sinit>:
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	f7ff fff0 	bl	8005b40 <__sinit_lock_acquire>
 8005b60:	69a3      	ldr	r3, [r4, #24]
 8005b62:	b11b      	cbz	r3, 8005b6c <__sinit+0x14>
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	f7ff bff0 	b.w	8005b4c <__sinit_lock_release>
 8005b6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b70:	6523      	str	r3, [r4, #80]	; 0x50
 8005b72:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <__sinit+0x68>)
 8005b74:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <__sinit+0x6c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	bf08      	it	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	4620      	mov	r0, r4
 8005b82:	bf08      	it	eq
 8005b84:	61a3      	streq	r3, [r4, #24]
 8005b86:	f000 f81f 	bl	8005bc8 <__sfp>
 8005b8a:	6060      	str	r0, [r4, #4]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 f81b 	bl	8005bc8 <__sfp>
 8005b92:	60a0      	str	r0, [r4, #8]
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 f817 	bl	8005bc8 <__sfp>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2104      	movs	r1, #4
 8005b9e:	60e0      	str	r0, [r4, #12]
 8005ba0:	6860      	ldr	r0, [r4, #4]
 8005ba2:	f7ff ff81 	bl	8005aa8 <std>
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	2109      	movs	r1, #9
 8005baa:	68a0      	ldr	r0, [r4, #8]
 8005bac:	f7ff ff7c 	bl	8005aa8 <std>
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	2112      	movs	r1, #18
 8005bb4:	68e0      	ldr	r0, [r4, #12]
 8005bb6:	f7ff ff77 	bl	8005aa8 <std>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61a3      	str	r3, [r4, #24]
 8005bbe:	e7d1      	b.n	8005b64 <__sinit+0xc>
 8005bc0:	0800bc14 	.word	0x0800bc14
 8005bc4:	08005af1 	.word	0x08005af1

08005bc8 <__sfp>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	4607      	mov	r7, r0
 8005bcc:	f7ff ffac 	bl	8005b28 <__sfp_lock_acquire>
 8005bd0:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <__sfp+0x84>)
 8005bd2:	681e      	ldr	r6, [r3, #0]
 8005bd4:	69b3      	ldr	r3, [r6, #24]
 8005bd6:	b913      	cbnz	r3, 8005bde <__sfp+0x16>
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7ff ffbd 	bl	8005b58 <__sinit>
 8005bde:	3648      	adds	r6, #72	; 0x48
 8005be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	d503      	bpl.n	8005bf0 <__sfp+0x28>
 8005be8:	6833      	ldr	r3, [r6, #0]
 8005bea:	b30b      	cbz	r3, 8005c30 <__sfp+0x68>
 8005bec:	6836      	ldr	r6, [r6, #0]
 8005bee:	e7f7      	b.n	8005be0 <__sfp+0x18>
 8005bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bf4:	b9d5      	cbnz	r5, 8005c2c <__sfp+0x64>
 8005bf6:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <__sfp+0x88>)
 8005bf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bfc:	60e3      	str	r3, [r4, #12]
 8005bfe:	6665      	str	r5, [r4, #100]	; 0x64
 8005c00:	f000 f847 	bl	8005c92 <__retarget_lock_init_recursive>
 8005c04:	f7ff ff96 	bl	8005b34 <__sfp_lock_release>
 8005c08:	2208      	movs	r2, #8
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c14:	6025      	str	r5, [r4, #0]
 8005c16:	61a5      	str	r5, [r4, #24]
 8005c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c1c:	f7fe ffbc 	bl	8004b98 <memset>
 8005c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c28:	4620      	mov	r0, r4
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2c:	3468      	adds	r4, #104	; 0x68
 8005c2e:	e7d9      	b.n	8005be4 <__sfp+0x1c>
 8005c30:	2104      	movs	r1, #4
 8005c32:	4638      	mov	r0, r7
 8005c34:	f7ff ff62 	bl	8005afc <__sfmoreglue>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	6030      	str	r0, [r6, #0]
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1d5      	bne.n	8005bec <__sfp+0x24>
 8005c40:	f7ff ff78 	bl	8005b34 <__sfp_lock_release>
 8005c44:	230c      	movs	r3, #12
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	e7ee      	b.n	8005c28 <__sfp+0x60>
 8005c4a:	bf00      	nop
 8005c4c:	0800bc14 	.word	0x0800bc14
 8005c50:	ffff0001 	.word	0xffff0001

08005c54 <_fwalk_reent>:
 8005c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c58:	4606      	mov	r6, r0
 8005c5a:	4688      	mov	r8, r1
 8005c5c:	2700      	movs	r7, #0
 8005c5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c66:	f1b9 0901 	subs.w	r9, r9, #1
 8005c6a:	d505      	bpl.n	8005c78 <_fwalk_reent+0x24>
 8005c6c:	6824      	ldr	r4, [r4, #0]
 8005c6e:	2c00      	cmp	r4, #0
 8005c70:	d1f7      	bne.n	8005c62 <_fwalk_reent+0xe>
 8005c72:	4638      	mov	r0, r7
 8005c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c78:	89ab      	ldrh	r3, [r5, #12]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d907      	bls.n	8005c8e <_fwalk_reent+0x3a>
 8005c7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c82:	3301      	adds	r3, #1
 8005c84:	d003      	beq.n	8005c8e <_fwalk_reent+0x3a>
 8005c86:	4629      	mov	r1, r5
 8005c88:	4630      	mov	r0, r6
 8005c8a:	47c0      	blx	r8
 8005c8c:	4307      	orrs	r7, r0
 8005c8e:	3568      	adds	r5, #104	; 0x68
 8005c90:	e7e9      	b.n	8005c66 <_fwalk_reent+0x12>

08005c92 <__retarget_lock_init_recursive>:
 8005c92:	4770      	bx	lr

08005c94 <__retarget_lock_acquire_recursive>:
 8005c94:	4770      	bx	lr

08005c96 <__retarget_lock_release_recursive>:
 8005c96:	4770      	bx	lr

08005c98 <__swhatbuf_r>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	460e      	mov	r6, r1
 8005c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	2900      	cmp	r1, #0
 8005ca4:	461d      	mov	r5, r3
 8005ca6:	b096      	sub	sp, #88	; 0x58
 8005ca8:	da08      	bge.n	8005cbc <__swhatbuf_r+0x24>
 8005caa:	2200      	movs	r2, #0
 8005cac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cb0:	602a      	str	r2, [r5, #0]
 8005cb2:	061a      	lsls	r2, r3, #24
 8005cb4:	d410      	bmi.n	8005cd8 <__swhatbuf_r+0x40>
 8005cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cba:	e00e      	b.n	8005cda <__swhatbuf_r+0x42>
 8005cbc:	466a      	mov	r2, sp
 8005cbe:	f000 f95f 	bl	8005f80 <_fstat_r>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	dbf1      	blt.n	8005caa <__swhatbuf_r+0x12>
 8005cc6:	9a01      	ldr	r2, [sp, #4]
 8005cc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cd0:	425a      	negs	r2, r3
 8005cd2:	415a      	adcs	r2, r3
 8005cd4:	602a      	str	r2, [r5, #0]
 8005cd6:	e7ee      	b.n	8005cb6 <__swhatbuf_r+0x1e>
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	2000      	movs	r0, #0
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	b016      	add	sp, #88	; 0x58
 8005ce0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ce4 <__smakebuf_r>:
 8005ce4:	898b      	ldrh	r3, [r1, #12]
 8005ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ce8:	079d      	lsls	r5, r3, #30
 8005cea:	4606      	mov	r6, r0
 8005cec:	460c      	mov	r4, r1
 8005cee:	d507      	bpl.n	8005d00 <__smakebuf_r+0x1c>
 8005cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	6123      	str	r3, [r4, #16]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	6163      	str	r3, [r4, #20]
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
 8005d00:	466a      	mov	r2, sp
 8005d02:	ab01      	add	r3, sp, #4
 8005d04:	f7ff ffc8 	bl	8005c98 <__swhatbuf_r>
 8005d08:	9900      	ldr	r1, [sp, #0]
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff f877 	bl	8004e00 <_malloc_r>
 8005d12:	b948      	cbnz	r0, 8005d28 <__smakebuf_r+0x44>
 8005d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d18:	059a      	lsls	r2, r3, #22
 8005d1a:	d4ef      	bmi.n	8005cfc <__smakebuf_r+0x18>
 8005d1c:	f023 0303 	bic.w	r3, r3, #3
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	81a3      	strh	r3, [r4, #12]
 8005d26:	e7e3      	b.n	8005cf0 <__smakebuf_r+0xc>
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <__smakebuf_r+0x7c>)
 8005d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	6020      	str	r0, [r4, #0]
 8005d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d34:	81a3      	strh	r3, [r4, #12]
 8005d36:	9b00      	ldr	r3, [sp, #0]
 8005d38:	6120      	str	r0, [r4, #16]
 8005d3a:	6163      	str	r3, [r4, #20]
 8005d3c:	9b01      	ldr	r3, [sp, #4]
 8005d3e:	b15b      	cbz	r3, 8005d58 <__smakebuf_r+0x74>
 8005d40:	4630      	mov	r0, r6
 8005d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d46:	f000 f92d 	bl	8005fa4 <_isatty_r>
 8005d4a:	b128      	cbz	r0, 8005d58 <__smakebuf_r+0x74>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	f043 0301 	orr.w	r3, r3, #1
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	89a0      	ldrh	r0, [r4, #12]
 8005d5a:	4305      	orrs	r5, r0
 8005d5c:	81a5      	strh	r5, [r4, #12]
 8005d5e:	e7cd      	b.n	8005cfc <__smakebuf_r+0x18>
 8005d60:	08005af1 	.word	0x08005af1

08005d64 <memchr>:
 8005d64:	4603      	mov	r3, r0
 8005d66:	b510      	push	{r4, lr}
 8005d68:	b2c9      	uxtb	r1, r1
 8005d6a:	4402      	add	r2, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	d101      	bne.n	8005d76 <memchr+0x12>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e003      	b.n	8005d7e <memchr+0x1a>
 8005d76:	7804      	ldrb	r4, [r0, #0]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	428c      	cmp	r4, r1
 8005d7c:	d1f6      	bne.n	8005d6c <memchr+0x8>
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <memmove>:
 8005d80:	4288      	cmp	r0, r1
 8005d82:	b510      	push	{r4, lr}
 8005d84:	eb01 0402 	add.w	r4, r1, r2
 8005d88:	d902      	bls.n	8005d90 <memmove+0x10>
 8005d8a:	4284      	cmp	r4, r0
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	d807      	bhi.n	8005da0 <memmove+0x20>
 8005d90:	1e43      	subs	r3, r0, #1
 8005d92:	42a1      	cmp	r1, r4
 8005d94:	d008      	beq.n	8005da8 <memmove+0x28>
 8005d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d9e:	e7f8      	b.n	8005d92 <memmove+0x12>
 8005da0:	4601      	mov	r1, r0
 8005da2:	4402      	add	r2, r0
 8005da4:	428a      	cmp	r2, r1
 8005da6:	d100      	bne.n	8005daa <memmove+0x2a>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005db2:	e7f7      	b.n	8005da4 <memmove+0x24>

08005db4 <__malloc_lock>:
 8005db4:	4801      	ldr	r0, [pc, #4]	; (8005dbc <__malloc_lock+0x8>)
 8005db6:	f7ff bf6d 	b.w	8005c94 <__retarget_lock_acquire_recursive>
 8005dba:	bf00      	nop
 8005dbc:	20002c58 	.word	0x20002c58

08005dc0 <__malloc_unlock>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__malloc_unlock+0x8>)
 8005dc2:	f7ff bf68 	b.w	8005c96 <__retarget_lock_release_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20002c58 	.word	0x20002c58

08005dcc <_realloc_r>:
 8005dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	b921      	cbnz	r1, 8005de2 <_realloc_r+0x16>
 8005dd8:	4611      	mov	r1, r2
 8005dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	f7ff b80f 	b.w	8004e00 <_malloc_r>
 8005de2:	b92a      	cbnz	r2, 8005df0 <_realloc_r+0x24>
 8005de4:	f7fe ffa4 	bl	8004d30 <_free_r>
 8005de8:	4625      	mov	r5, r4
 8005dea:	4628      	mov	r0, r5
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	f000 f8fa 	bl	8005fe8 <_malloc_usable_size_r>
 8005df4:	4284      	cmp	r4, r0
 8005df6:	4607      	mov	r7, r0
 8005df8:	d802      	bhi.n	8005e00 <_realloc_r+0x34>
 8005dfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dfe:	d812      	bhi.n	8005e26 <_realloc_r+0x5a>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4640      	mov	r0, r8
 8005e04:	f7fe fffc 	bl	8004e00 <_malloc_r>
 8005e08:	4605      	mov	r5, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0ed      	beq.n	8005dea <_realloc_r+0x1e>
 8005e0e:	42bc      	cmp	r4, r7
 8005e10:	4622      	mov	r2, r4
 8005e12:	4631      	mov	r1, r6
 8005e14:	bf28      	it	cs
 8005e16:	463a      	movcs	r2, r7
 8005e18:	f7fe feb0 	bl	8004b7c <memcpy>
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f7fe ff86 	bl	8004d30 <_free_r>
 8005e24:	e7e1      	b.n	8005dea <_realloc_r+0x1e>
 8005e26:	4635      	mov	r5, r6
 8005e28:	e7df      	b.n	8005dea <_realloc_r+0x1e>

08005e2a <_raise_r>:
 8005e2a:	291f      	cmp	r1, #31
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	d904      	bls.n	8005e3e <_raise_r+0x14>
 8005e34:	2316      	movs	r3, #22
 8005e36:	6003      	str	r3, [r0, #0]
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e40:	b112      	cbz	r2, 8005e48 <_raise_r+0x1e>
 8005e42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e46:	b94b      	cbnz	r3, 8005e5c <_raise_r+0x32>
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 f831 	bl	8005eb0 <_getpid_r>
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4601      	mov	r1, r0
 8005e52:	4620      	mov	r0, r4
 8005e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e58:	f000 b818 	b.w	8005e8c <_kill_r>
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d00a      	beq.n	8005e76 <_raise_r+0x4c>
 8005e60:	1c59      	adds	r1, r3, #1
 8005e62:	d103      	bne.n	8005e6c <_raise_r+0x42>
 8005e64:	2316      	movs	r3, #22
 8005e66:	6003      	str	r3, [r0, #0]
 8005e68:	2001      	movs	r0, #1
 8005e6a:	e7e7      	b.n	8005e3c <_raise_r+0x12>
 8005e6c:	2400      	movs	r4, #0
 8005e6e:	4628      	mov	r0, r5
 8005e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e74:	4798      	blx	r3
 8005e76:	2000      	movs	r0, #0
 8005e78:	e7e0      	b.n	8005e3c <_raise_r+0x12>
	...

08005e7c <raise>:
 8005e7c:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <raise+0xc>)
 8005e7e:	4601      	mov	r1, r0
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	f7ff bfd2 	b.w	8005e2a <_raise_r>
 8005e86:	bf00      	nop
 8005e88:	2000005c 	.word	0x2000005c

08005e8c <_kill_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	2300      	movs	r3, #0
 8005e90:	4d06      	ldr	r5, [pc, #24]	; (8005eac <_kill_r+0x20>)
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	f7fb f91e 	bl	80010da <_kill>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d102      	bne.n	8005ea8 <_kill_r+0x1c>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	b103      	cbz	r3, 8005ea8 <_kill_r+0x1c>
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	20002c5c 	.word	0x20002c5c

08005eb0 <_getpid_r>:
 8005eb0:	f7fb b90c 	b.w	80010cc <_getpid>

08005eb4 <__sread>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	f000 f89c 	bl	8005ff8 <_read_r>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	bfab      	itete	ge
 8005ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ec8:	181b      	addge	r3, r3, r0
 8005eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ece:	bfac      	ite	ge
 8005ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ed2:	81a3      	strhlt	r3, [r4, #12]
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <__swrite>:
 8005ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	461f      	mov	r7, r3
 8005edc:	898b      	ldrh	r3, [r1, #12]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	05db      	lsls	r3, r3, #23
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	d505      	bpl.n	8005ef4 <__swrite+0x1e>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	2200      	movs	r2, #0
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	f000 f868 	bl	8005fc4 <_lseek_r>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	4632      	mov	r2, r6
 8005ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	4628      	mov	r0, r5
 8005f00:	463b      	mov	r3, r7
 8005f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	f000 b817 	b.w	8005f3c <_write_r>

08005f0e <__sseek>:
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	460c      	mov	r4, r1
 8005f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f16:	f000 f855 	bl	8005fc4 <_lseek_r>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	bf15      	itete	ne
 8005f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f2a:	81a3      	strheq	r3, [r4, #12]
 8005f2c:	bf18      	it	ne
 8005f2e:	81a3      	strhne	r3, [r4, #12]
 8005f30:	bd10      	pop	{r4, pc}

08005f32 <__sclose>:
 8005f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f36:	f000 b813 	b.w	8005f60 <_close_r>
	...

08005f3c <_write_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	2200      	movs	r2, #0
 8005f46:	4d05      	ldr	r5, [pc, #20]	; (8005f5c <_write_r+0x20>)
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fb f8fc 	bl	8001148 <_write>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_write_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_write_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20002c5c 	.word	0x20002c5c

08005f60 <_close_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	2300      	movs	r3, #0
 8005f64:	4d05      	ldr	r5, [pc, #20]	; (8005f7c <_close_r+0x1c>)
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fb f908 	bl	8001180 <_close>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_close_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_close_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20002c5c 	.word	0x20002c5c

08005f80 <_fstat_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	2300      	movs	r3, #0
 8005f84:	4d06      	ldr	r5, [pc, #24]	; (8005fa0 <_fstat_r+0x20>)
 8005f86:	4604      	mov	r4, r0
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f7fb f902 	bl	8001196 <_fstat>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d102      	bne.n	8005f9c <_fstat_r+0x1c>
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	b103      	cbz	r3, 8005f9c <_fstat_r+0x1c>
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	bd38      	pop	{r3, r4, r5, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20002c5c 	.word	0x20002c5c

08005fa4 <_isatty_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4d05      	ldr	r5, [pc, #20]	; (8005fc0 <_isatty_r+0x1c>)
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb f900 	bl	80011b4 <_isatty>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_isatty_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_isatty_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	20002c5c 	.word	0x20002c5c

08005fc4 <_lseek_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4d05      	ldr	r5, [pc, #20]	; (8005fe4 <_lseek_r+0x20>)
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fb f8f8 	bl	80011c8 <_lseek>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_lseek_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_lseek_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20002c5c 	.word	0x20002c5c

08005fe8 <_malloc_usable_size_r>:
 8005fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fec:	1f18      	subs	r0, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bfbc      	itt	lt
 8005ff2:	580b      	ldrlt	r3, [r1, r0]
 8005ff4:	18c0      	addlt	r0, r0, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_read_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	4608      	mov	r0, r1
 8005ffe:	4611      	mov	r1, r2
 8006000:	2200      	movs	r2, #0
 8006002:	4d05      	ldr	r5, [pc, #20]	; (8006018 <_read_r+0x20>)
 8006004:	602a      	str	r2, [r5, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fb f881 	bl	800110e <_read>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_read_r+0x1e>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_read_r+0x1e>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	20002c5c 	.word	0x20002c5c

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
