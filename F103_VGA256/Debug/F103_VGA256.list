
F103_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c44  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be18  0800be18  0002027c  2**0
                  CONTENTS
  4 .ARM          00000000  0800be18  0800be18  0002027c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be18  0800be18  0002027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be18  0800be18  0001be18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be1c  0800be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800be20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d00  2000027c  0800c09c  0002027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f7c  0800c09c  00022f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acff  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fae  00000000  00000000  0002afa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189cc  00000000  00000000  0002e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cec7  00000000  00000000  00046fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a675  00000000  00000000  00053e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b78  00000000  00000000  000de550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000027c 	.word	0x2000027c
 8000128:	00000000 	.word	0x00000000
 800012c:	080061bc 	.word	0x080061bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000280 	.word	0x20000280
 8000148:	080061bc 	.word	0x080061bc

0800014c <VGA_update>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VGA_update(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	vga_voff[0]=VOFFSET;
 8000152:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <VGA_update+0x44>)
 8000154:	881a      	ldrh	r2, [r3, #0]
 8000156:	4b0f      	ldr	r3, [pc, #60]	; (8000194 <VGA_update+0x48>)
 8000158:	801a      	strh	r2, [r3, #0]
	for(int i=1;i<16;i++){
 800015a:	2301      	movs	r3, #1
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	e00d      	b.n	800017c <VGA_update+0x30>
		vga_voff[i]=vga_voff[i-1]+VGA_LBUFFERSIZE;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3b01      	subs	r3, #1
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <VGA_update+0x48>)
 8000166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800016a:	3380      	adds	r3, #128	; 0x80
 800016c:	b299      	uxth	r1, r3
 800016e:	4a09      	ldr	r2, [pc, #36]	; (8000194 <VGA_update+0x48>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=1;i<16;i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	ddee      	ble.n	8000160 <VGA_update+0x14>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200003b4 	.word	0x200003b4
 8000194:	200003bc 	.word	0x200003bc

08000198 <myDelay>:

extern void myDelay(int ms){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fafa 	bl	800279c <HAL_Delay>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <getch>:

extern uint8_t getch(uint8_t *ch){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<4;i++){
 80001b8:	2300      	movs	r3, #0
 80001ba:	617b      	str	r3, [r7, #20]
 80001bc:	e00c      	b.n	80001d8 <getch+0x28>
		//Prime row output for ready to bring col to ground
		HAL_GPIO_WritePin(keyPort,keyRowPin[i],0);
 80001be:	4b31      	ldr	r3, [pc, #196]	; (8000284 <getch+0xd4>)
 80001c0:	6818      	ldr	r0, [r3, #0]
 80001c2:	4a31      	ldr	r2, [pc, #196]	; (8000288 <getch+0xd8>)
 80001c4:	697b      	ldr	r3, [r7, #20]
 80001c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ca:	2200      	movs	r2, #0
 80001cc:	4619      	mov	r1, r3
 80001ce:	f003 f898 	bl	8003302 <HAL_GPIO_WritePin>
	for(int i=0;i<4;i++){
 80001d2:	697b      	ldr	r3, [r7, #20]
 80001d4:	3301      	adds	r3, #1
 80001d6:	617b      	str	r3, [r7, #20]
 80001d8:	697b      	ldr	r3, [r7, #20]
 80001da:	2b03      	cmp	r3, #3
 80001dc:	ddef      	ble.n	80001be <getch+0xe>
	}
	//Detect column pressed
	int i,j;
	for(i=0;i<3;i++){
 80001de:	2300      	movs	r3, #0
 80001e0:	613b      	str	r3, [r7, #16]
 80001e2:	e034      	b.n	800024e <getch+0x9e>
		if(HAL_GPIO_ReadPin(keyPort,keyColPin[i])==0){
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <getch+0xd4>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	4928      	ldr	r1, [pc, #160]	; (800028c <getch+0xdc>)
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4610      	mov	r0, r2
 80001f4:	f003 f86e 	bl	80032d4 <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d121      	bne.n	8000242 <getch+0x92>
			//Testing for row
			for(j=0;j<4;j++){
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e019      	b.n	8000238 <getch+0x88>
				HAL_GPIO_WritePin(keyPort,keyRowPin[j],1);
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getch+0xd4>)
 8000206:	6818      	ldr	r0, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getch+0xd8>)
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000210:	2201      	movs	r2, #1
 8000212:	4619      	mov	r1, r3
 8000214:	f003 f875 	bl	8003302 <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(keyPort,keyColPin[i]))
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <getch+0xd4>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <getch+0xdc>)
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000224:	4619      	mov	r1, r3
 8000226:	4610      	mov	r0, r2
 8000228:	f003 f854 	bl	80032d4 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d106      	bne.n	8000240 <getch+0x90>
			for(j=0;j<4;j++){
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	3301      	adds	r3, #1
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2b03      	cmp	r3, #3
 800023c:	dde2      	ble.n	8000204 <getch+0x54>
 800023e:	e000      	b.n	8000242 <getch+0x92>
					break;
 8000240:	bf00      	nop
			}
	    }
		if(j<4)break;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	2b03      	cmp	r3, #3
 8000246:	dd06      	ble.n	8000256 <getch+0xa6>
	for(i=0;i<3;i++){
 8000248:	693b      	ldr	r3, [r7, #16]
 800024a:	3301      	adds	r3, #1
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	2b02      	cmp	r3, #2
 8000252:	ddc7      	ble.n	80001e4 <getch+0x34>
 8000254:	e000      	b.n	8000258 <getch+0xa8>
		if(j<4)break;
 8000256:	bf00      	nop
	}
    if(i<3){  //a key is pressed
 8000258:	693b      	ldr	r3, [r7, #16]
 800025a:	2b02      	cmp	r3, #2
 800025c:	dc0d      	bgt.n	800027a <getch+0xca>
    	*ch = keyMap[j][i];
 800025e:	490c      	ldr	r1, [pc, #48]	; (8000290 <getch+0xe0>)
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	4613      	mov	r3, r2
 8000264:	005b      	lsls	r3, r3, #1
 8000266:	4413      	add	r3, r2
 8000268:	693a      	ldr	r2, [r7, #16]
 800026a:	4413      	add	r3, r2
 800026c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	701a      	strb	r2, [r3, #0]
    	return 1;
 8000276:	2301      	movs	r3, #1
 8000278:	e000      	b.n	800027c <getch+0xcc>
    }
    return 0;
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000004 	.word	0x20000004
 8000288:	20000008 	.word	0x20000008
 800028c:	20000010 	.word	0x20000010
 8000290:	20000018 	.word	0x20000018

08000294 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
     if(htim==&htim2){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a19      	ldr	r2, [pc, #100]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d12b      	bne.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x68>
     //V-sync detected
		line=-4;
 80002a4:	4b18      	ldr	r3, [pc, #96]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002a6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80002aa:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d023      	beq.n	80002fc <HAL_TIM_PeriodElapsedCallback+0x68>
			for(int i=0;i<preVoffset;i++);
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e002      	b.n	80002c0 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	461a      	mov	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	4293      	cmp	r3, r2
 80002ca:	dbf6      	blt.n	80002ba <HAL_TIM_PeriodElapsedCallback+0x26>
			if(
            HAL_DMA_Start_IT(&hdma_tim4_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 80002cc:	4911      	ldr	r1, [pc, #68]	; (8000314 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002d6:	4811      	ldr	r0, [pc, #68]	; (800031c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80002d8:	f002 fbec 	bl	8002ab4 <HAL_DMA_Start_IT>
 80002dc:	4603      	mov	r3, r0
			if(
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d009      	beq.n	80002f6 <HAL_TIM_PeriodElapsedCallback+0x62>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80002e8:	f003 f823 	bl	8003332 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 80002ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f0:	f002 fa54 	bl	800279c <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80002f4:	e7f5      	b.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
			}
			firstTrig=0;
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200002e0 	.word	0x200002e0
 8000308:	200003b8 	.word	0x200003b8
 800030c:	20000002 	.word	0x20000002
 8000310:	20000000 	.word	0x20000000
 8000314:	20000a18 	.word	0x20000a18
 8000318:	200003dc 	.word	0x200003dc
 800031c:	20000370 	.word	0x20000370
 8000320:	40011000 	.word	0x40011000

08000324 <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 800032e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	db04      	blt.n	8000340 <DMA_HalfCpltCallback+0x1c>
 8000336:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 8000338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800033c:	2b4a      	cmp	r3, #74	; 0x4a
 800033e:	dd06      	ble.n	800034e <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000344:	2100      	movs	r1, #0
 8000346:	4827      	ldr	r0, [pc, #156]	; (80003e4 <DMA_HalfCpltCallback+0xc0>)
 8000348:	f004 fcf6 	bl	8004d38 <memset>
 800034c:	e01c      	b.n	8000388 <DMA_HalfCpltCallback+0x64>
	}else{
		for(int i=0;i<8;i++){
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	e016      	b.n	8000382 <DMA_HalfCpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 8000354:	4a24      	ldr	r2, [pc, #144]	; (80003e8 <DMA_HalfCpltCallback+0xc4>)
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800035c:	461a      	mov	r2, r3
 800035e:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <DMA_HalfCpltCallback+0xc0>)
 8000360:	18d0      	adds	r0, r2, r3
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 8000364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000368:	461a      	mov	r2, r3
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <DMA_HalfCpltCallback+0xc8>)
 8000372:	4413      	add	r3, r2
 8000374:	2264      	movs	r2, #100	; 0x64
 8000376:	4619      	mov	r1, r3
 8000378:	f004 fcd0 	bl	8004d1c <memcpy>
		for(int i=0;i<8;i++){
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	2b07      	cmp	r3, #7
 8000386:	dde5      	ble.n	8000354 <DMA_HalfCpltCallback+0x30>
		}
	}
	line++;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 800038a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038e:	b29b      	uxth	r3, r3
 8000390:	3301      	adds	r3, #1
 8000392:	b29b      	uxth	r3, r3
 8000394:	b21a      	sxth	r2, r3
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 8000398:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <DMA_HalfCpltCallback+0xcc>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00a      	beq.n	80003b8 <DMA_HalfCpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003a2:	4814      	ldr	r0, [pc, #80]	; (80003f4 <DMA_HalfCpltCallback+0xd0>)
 80003a4:	f002 fc20 	bl	8002be8 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <DMA_HalfCpltCallback+0xd4>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 80003ae:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <DMA_HalfCpltCallback+0xcc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80003b4:	f7ff feca 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <DMA_HalfCpltCallback+0xbc>)
 80003ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003be:	2b4a      	cmp	r3, #74	; 0x4a
 80003c0:	dd09      	ble.n	80003d6 <DMA_HalfCpltCallback+0xb2>
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <DMA_HalfCpltCallback+0xd4>)
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d105      	bne.n	80003d6 <DMA_HalfCpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <DMA_HalfCpltCallback+0xd0>)
 80003cc:	f002 fc0c 	bl	8002be8 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <DMA_HalfCpltCallback+0xd4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	801a      	strh	r2, [r3, #0]
	}
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	200003b8 	.word	0x200003b8
 80003e4:	20000a18 	.word	0x20000a18
 80003e8:	200003bc 	.word	0x200003bc
 80003ec:	20001218 	.word	0x20001218
 80003f0:	200003b6 	.word	0x200003b6
 80003f4:	20000370 	.word	0x20000370
 80003f8:	20000002 	.word	0x20000002

080003fc <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800040a:	2b00      	cmp	r3, #0
 800040c:	db04      	blt.n	8000418 <DMA_CpltCallback+0x1c>
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000414:	2b4a      	cmp	r3, #74	; 0x4a
 8000416:	dd06      	ble.n	8000426 <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800041c:	2100      	movs	r1, #0
 800041e:	4827      	ldr	r0, [pc, #156]	; (80004bc <DMA_CpltCallback+0xc0>)
 8000420:	f004 fc8a 	bl	8004d38 <memset>
 8000424:	e01c      	b.n	8000460 <DMA_CpltCallback+0x64>
	}else{
		for(int i=8;i<16;i++){
 8000426:	2308      	movs	r3, #8
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e016      	b.n	800045a <DMA_CpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 800042c:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <DMA_CpltCallback+0xc4>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000434:	461a      	mov	r2, r3
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <DMA_CpltCallback+0xc0>)
 8000438:	18d0      	adds	r0, r2, r3
 800043a:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <DMA_CpltCallback+0xbc>)
 800043c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000440:	461a      	mov	r2, r3
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	fb02 f303 	mul.w	r3, r2, r3
 8000448:	4a1e      	ldr	r2, [pc, #120]	; (80004c4 <DMA_CpltCallback+0xc8>)
 800044a:	4413      	add	r3, r2
 800044c:	2264      	movs	r2, #100	; 0x64
 800044e:	4619      	mov	r1, r3
 8000450:	f004 fc64 	bl	8004d1c <memcpy>
		for(int i=8;i<16;i++){
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3301      	adds	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	dde5      	ble.n	800042c <DMA_CpltCallback+0x30>
		}
	}
	line++;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000466:	b29b      	uxth	r3, r3
 8000468:	3301      	adds	r3, #1
 800046a:	b29b      	uxth	r3, r3
 800046c:	b21a      	sxth	r2, r3
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000470:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <DMA_CpltCallback+0xcc>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d00a      	beq.n	8000490 <DMA_CpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <DMA_CpltCallback+0xd0>)
 800047c:	f002 fbb4 	bl	8002be8 <HAL_DMA_Abort_IT>
		firstTrig=1;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <DMA_CpltCallback+0xd4>)
 8000482:	2201      	movs	r2, #1
 8000484:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <DMA_CpltCallback+0xcc>)
 8000488:	2200      	movs	r2, #0
 800048a:	801a      	strh	r2, [r3, #0]
		VGA_update();
 800048c:	f7ff fe5e 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <DMA_CpltCallback+0xbc>)
 8000492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000496:	2b4a      	cmp	r3, #74	; 0x4a
 8000498:	dd09      	ble.n	80004ae <DMA_CpltCallback+0xb2>
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <DMA_CpltCallback+0xd4>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d105      	bne.n	80004ae <DMA_CpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80004a2:	480a      	ldr	r0, [pc, #40]	; (80004cc <DMA_CpltCallback+0xd0>)
 80004a4:	f002 fba0 	bl	8002be8 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <DMA_CpltCallback+0xd4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	801a      	strh	r2, [r3, #0]
	}
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200003b8 	.word	0x200003b8
 80004bc:	20000a18 	.word	0x20000a18
 80004c0:	200003bc 	.word	0x200003bc
 80004c4:	20001218 	.word	0x20001218
 80004c8:	200003b6 	.word	0x200003b6
 80004cc:	20000370 	.word	0x20000370
 80004d0:	20000002 	.word	0x20000002

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b093      	sub	sp, #76	; 0x4c
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  VGA_update();
 80004da:	f7ff fe37 	bl	800014c <VGA_update>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f002 f8fb 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 fa5d 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fc23 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 fc03 	bl	8000cf4 <MX_DMA_Init>
  MX_TIM1_Init();
 80004ee:	f000 fa9d 	bl	8000a2c <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f2:	f000 fb3b 	bl	8000b6c <MX_TIM2_Init>
  MX_TIM4_Init();
 80004f6:	f000 fbb1 	bl	8000c5c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim4_up);
 80004fa:	4813      	ldr	r0, [pc, #76]	; (8000548 <main+0x74>)
 80004fc:	f002 fb39 	bl	8002b72 <HAL_DMA_Abort>
    if(
    	  HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <main+0x78>)
 8000502:	2101      	movs	r1, #1
 8000504:	4810      	ldr	r0, [pc, #64]	; (8000548 <main+0x74>)
 8000506:	f002 fceb 	bl	8002ee0 <HAL_DMA_RegisterCallback>
 800050a:	4603      	mov	r3, r0
    if(
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <main+0x50>
    	  !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x7c>)
 8000516:	f002 ff0c 	bl	8003332 <HAL_GPIO_TogglePin>
    		  HAL_Delay(500);
 800051a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051e:	f002 f93d 	bl	800279c <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000522:	e7f5      	b.n	8000510 <main+0x3c>
    	  }
    }
    if(
          HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <main+0x80>)
 8000526:	2100      	movs	r1, #0
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <main+0x74>)
 800052a:	f002 fcd9 	bl	8002ee0 <HAL_DMA_RegisterCallback>
 800052e:	4603      	mov	r3, r0
    if(
 8000530:	2b00      	cmp	r3, #0
 8000532:	d011      	beq.n	8000558 <main+0x84>
          !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x7c>)
 800053a:	f002 fefa 	bl	8003332 <HAL_GPIO_TogglePin>
    		  HAL_Delay(250);
 800053e:	20fa      	movs	r0, #250	; 0xfa
 8000540:	f002 f92c 	bl	800279c <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000544:	e7f6      	b.n	8000534 <main+0x60>
 8000546:	bf00      	nop
 8000548:	20000370 	.word	0x20000370
 800054c:	08000325 	.word	0x08000325
 8000550:	40011000 	.word	0x40011000
 8000554:	080003fd 	.word	0x080003fd
    	  }
    }
    GPIOB_ODR = (uint32_t)&(GPIOB->ODR)+1;
 8000558:	4bc1      	ldr	r3, [pc, #772]	; (8000860 <main+0x38c>)
 800055a:	4ac2      	ldr	r2, [pc, #776]	; (8000864 <main+0x390>)
 800055c:	601a      	str	r2, [r3, #0]

    //Start GPIO-DMA output
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_TC);
 800055e:	4bc2      	ldr	r3, [pc, #776]	; (8000868 <main+0x394>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4bc0      	ldr	r3, [pc, #768]	; (8000868 <main+0x394>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 0202 	orr.w	r2, r2, #2
 800056c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_HT);
 800056e:	4bbe      	ldr	r3, [pc, #760]	; (8000868 <main+0x394>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4bbc      	ldr	r3, [pc, #752]	; (8000868 <main+0x394>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f042 0204 	orr.w	r2, r2, #4
 800057c:	601a      	str	r2, [r3, #0]
    __HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_UPDATE);
 800057e:	4bbb      	ldr	r3, [pc, #748]	; (800086c <main+0x398>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	4bb9      	ldr	r3, [pc, #740]	; (800086c <main+0x398>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800058c:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start(&htim4);
 800058e:	48b7      	ldr	r0, [pc, #732]	; (800086c <main+0x398>)
 8000590:	f003 fb20 	bl	8003bd4 <HAL_TIM_Base_Start>

    //Start H-sync
    HAL_TIM_Base_Start_IT(&htim1);
 8000594:	48b6      	ldr	r0, [pc, #728]	; (8000870 <main+0x39c>)
 8000596:	f003 fb67 	bl	8003c68 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800059a:	2100      	movs	r1, #0
 800059c:	48b4      	ldr	r0, [pc, #720]	; (8000870 <main+0x39c>)
 800059e:	f003 fc0d 	bl	8003dbc <HAL_TIM_PWM_Start>

    //Start V-sync
    HAL_TIM_Base_Start_IT(&htim2);
 80005a2:	48b4      	ldr	r0, [pc, #720]	; (8000874 <main+0x3a0>)
 80005a4:	f003 fb60 	bl	8003c68 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	48b2      	ldr	r0, [pc, #712]	; (8000874 <main+0x3a0>)
 80005ac:	f003 fc06 	bl	8003dbc <HAL_TIM_PWM_Start>



    HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f002 f8f3 	bl	800279c <HAL_Delay>
    vga_stop=1;
 80005b6:	4bb0      	ldr	r3, [pc, #704]	; (8000878 <main+0x3a4>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	801a      	strh	r2, [r3, #0]

    ClearScreen(VGA_BLACK);
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 fbcf 	bl	8001d60 <ClearScreen>
    DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 80005c2:	23ff      	movs	r3, #255	; 0xff
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2348      	movs	r3, #72	; 0x48
 80005c8:	2263      	movs	r2, #99	; 0x63
 80005ca:	2100      	movs	r1, #0
 80005cc:	2000      	movs	r0, #0
 80005ce:	f001 fe93 	bl	80022f8 <DrawRectangle>
    char msg[32]="Testing";
 80005d2:	4aaa      	ldr	r2, [pc, #680]	; (800087c <main+0x3a8>)
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005da:	e883 0003 	stmia.w	r3, {r0, r1}
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
    SetCursor(3,3);
 80005f0:	2103      	movs	r1, #3
 80005f2:	2003      	movs	r0, #3
 80005f4:	f001 fdc0 	bl	8002178 <SetCursor>
    WriteString(msg,Font_7x10,VGA_GREEN);
 80005f8:	4aa1      	ldr	r2, [pc, #644]	; (8000880 <main+0x3ac>)
 80005fa:	1d38      	adds	r0, r7, #4
 80005fc:	231c      	movs	r3, #28
 80005fe:	ca06      	ldmia	r2, {r1, r2}
 8000600:	f001 fd94 	bl	800212c <WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int r,x,y,w,h,z=0,c;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
	  r = rand()%25;
 8000608:	f004 fbcc 	bl	8004da4 <rand>
 800060c:	4602      	mov	r2, r0
 800060e:	4b9d      	ldr	r3, [pc, #628]	; (8000884 <main+0x3b0>)
 8000610:	fb83 1302 	smull	r1, r3, r3, r2
 8000614:	10d9      	asrs	r1, r3, #3
 8000616:	17d3      	asrs	r3, r2, #31
 8000618:	1ac9      	subs	r1, r1, r3
 800061a:	460b      	mov	r3, r1
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	440b      	add	r3, r1
 8000620:	0099      	lsls	r1, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000628:	f004 fbbc 	bl	8004da4 <rand>
 800062c:	4603      	mov	r3, r0
 800062e:	4a95      	ldr	r2, [pc, #596]	; (8000884 <main+0x3b0>)
 8000630:	fb82 1203 	smull	r1, r2, r2, r3
 8000634:	1151      	asrs	r1, r2, #5
 8000636:	17da      	asrs	r2, r3, #31
 8000638:	1a8a      	subs	r2, r1, r2
 800063a:	2164      	movs	r1, #100	; 0x64
 800063c:	fb01 f202 	mul.w	r2, r1, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000644:	f004 fbae 	bl	8004da4 <rand>
 8000648:	4602      	mov	r2, r0
 800064a:	4b8f      	ldr	r3, [pc, #572]	; (8000888 <main+0x3b4>)
 800064c:	fb83 1302 	smull	r1, r3, r3, r2
 8000650:	4413      	add	r3, r2
 8000652:	1199      	asrs	r1, r3, #6
 8000654:	17d3      	asrs	r3, r2, #31
 8000656:	1ac9      	subs	r1, r1, r3
 8000658:	460b      	mov	r3, r1
 800065a:	00db      	lsls	r3, r3, #3
 800065c:	440b      	add	r3, r1
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	440b      	add	r3, r1
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000666:	f004 fb9d 	bl	8004da4 <rand>
 800066a:	4603      	mov	r3, r0
 800066c:	425a      	negs	r2, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	bf58      	it	pl
 8000674:	4253      	negpl	r3, r2
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 8000678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800067a:	b218      	sxth	r0, r3
 800067c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800067e:	b219      	sxth	r1, r3
 8000680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000682:	b21a      	sxth	r2, r3
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f001 fda4 	bl	80021d4 <DrawCircle>
	  r = rand()%25;
 800068c:	f004 fb8a 	bl	8004da4 <rand>
 8000690:	4602      	mov	r2, r0
 8000692:	4b7c      	ldr	r3, [pc, #496]	; (8000884 <main+0x3b0>)
 8000694:	fb83 1302 	smull	r1, r3, r3, r2
 8000698:	10d9      	asrs	r1, r3, #3
 800069a:	17d3      	asrs	r3, r2, #31
 800069c:	1ac9      	subs	r1, r1, r3
 800069e:	460b      	mov	r3, r1
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	0099      	lsls	r1, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 80006ac:	f004 fb7a 	bl	8004da4 <rand>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a74      	ldr	r2, [pc, #464]	; (8000884 <main+0x3b0>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1151      	asrs	r1, r2, #5
 80006ba:	17da      	asrs	r2, r3, #31
 80006bc:	1a8a      	subs	r2, r1, r2
 80006be:	2164      	movs	r1, #100	; 0x64
 80006c0:	fb01 f202 	mul.w	r2, r1, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80006c8:	f004 fb6c 	bl	8004da4 <rand>
 80006cc:	4602      	mov	r2, r0
 80006ce:	4b6e      	ldr	r3, [pc, #440]	; (8000888 <main+0x3b4>)
 80006d0:	fb83 1302 	smull	r1, r3, r3, r2
 80006d4:	4413      	add	r3, r2
 80006d6:	1199      	asrs	r1, r3, #6
 80006d8:	17d3      	asrs	r3, r2, #31
 80006da:	1ac9      	subs	r1, r1, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	440b      	add	r3, r1
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	440b      	add	r3, r1
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 80006ea:	f004 fb5b 	bl	8004da4 <rand>
 80006ee:	4603      	mov	r3, r0
 80006f0:	425a      	negs	r2, r3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	bf58      	it	pl
 80006f8:	4253      	negpl	r3, r2
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 80006fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fe:	b218      	sxth	r0, r3
 8000700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000702:	b219      	sxth	r1, r3
 8000704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000706:	b21a      	sxth	r2, r3
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f001 fe7d 	bl	800240a <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000710:	f004 fb48 	bl	8004da4 <rand>
 8000714:	4603      	mov	r3, r0
 8000716:	4a5b      	ldr	r2, [pc, #364]	; (8000884 <main+0x3b0>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1151      	asrs	r1, r2, #5
 800071e:	17da      	asrs	r2, r3, #31
 8000720:	1a8a      	subs	r2, r1, r2
 8000722:	2164      	movs	r1, #100	; 0x64
 8000724:	fb01 f202 	mul.w	r2, r1, r2
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 800072c:	f004 fb3a 	bl	8004da4 <rand>
 8000730:	4602      	mov	r2, r0
 8000732:	4b55      	ldr	r3, [pc, #340]	; (8000888 <main+0x3b4>)
 8000734:	fb83 1302 	smull	r1, r3, r3, r2
 8000738:	4413      	add	r3, r2
 800073a:	1199      	asrs	r1, r3, #6
 800073c:	17d3      	asrs	r3, r2, #31
 800073e:	1ac9      	subs	r1, r1, r3
 8000740:	460b      	mov	r3, r1
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	440b      	add	r3, r1
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 800074e:	f004 fb29 	bl	8004da4 <rand>
 8000752:	4602      	mov	r2, r0
 8000754:	4b4d      	ldr	r3, [pc, #308]	; (800088c <main+0x3b8>)
 8000756:	fb83 1302 	smull	r1, r3, r3, r2
 800075a:	4413      	add	r3, r2
 800075c:	1119      	asrs	r1, r3, #4
 800075e:	17d3      	asrs	r3, r2, #31
 8000760:	1ac9      	subs	r1, r1, r3
 8000762:	460b      	mov	r3, r1
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	1a5b      	subs	r3, r3, r1
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 800076e:	f004 fb19 	bl	8004da4 <rand>
 8000772:	4602      	mov	r2, r0
 8000774:	4b45      	ldr	r3, [pc, #276]	; (800088c <main+0x3b8>)
 8000776:	fb83 1302 	smull	r1, r3, r3, r2
 800077a:	4413      	add	r3, r2
 800077c:	1119      	asrs	r1, r3, #4
 800077e:	17d3      	asrs	r3, r2, #31
 8000780:	1ac9      	subs	r1, r1, r3
 8000782:	460b      	mov	r3, r1
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	1a5b      	subs	r3, r3, r1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 800078e:	f004 fb09 	bl	8004da4 <rand>
 8000792:	4603      	mov	r3, r0
 8000794:	425a      	negs	r2, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	bf58      	it	pl
 800079c:	4253      	negpl	r3, r2
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 80007a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a2:	b218      	sxth	r0, r3
 80007a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a6:	b219      	sxth	r1, r3
 80007a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4413      	add	r3, r2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b21c      	sxth	r4, r3
 80007b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4413      	add	r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	4613      	mov	r3, r2
 80007cc:	4622      	mov	r2, r4
 80007ce:	f001 fd93 	bl	80022f8 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 80007d2:	f004 fae7 	bl	8004da4 <rand>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4a2a      	ldr	r2, [pc, #168]	; (8000884 <main+0x3b0>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	1151      	asrs	r1, r2, #5
 80007e0:	17da      	asrs	r2, r3, #31
 80007e2:	1a8a      	subs	r2, r1, r2
 80007e4:	2164      	movs	r1, #100	; 0x64
 80007e6:	fb01 f202 	mul.w	r2, r1, r2
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80007ee:	f004 fad9 	bl	8004da4 <rand>
 80007f2:	4602      	mov	r2, r0
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x3b4>)
 80007f6:	fb83 1302 	smull	r1, r3, r3, r2
 80007fa:	4413      	add	r3, r2
 80007fc:	1199      	asrs	r1, r3, #6
 80007fe:	17d3      	asrs	r3, r2, #31
 8000800:	1ac9      	subs	r1, r1, r3
 8000802:	460b      	mov	r3, r1
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	440b      	add	r3, r1
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	440b      	add	r3, r1
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 8000810:	f004 fac8 	bl	8004da4 <rand>
 8000814:	4602      	mov	r2, r0
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <main+0x3b8>)
 8000818:	fb83 1302 	smull	r1, r3, r3, r2
 800081c:	4413      	add	r3, r2
 800081e:	1119      	asrs	r1, r3, #4
 8000820:	17d3      	asrs	r3, r2, #31
 8000822:	1ac9      	subs	r1, r1, r3
 8000824:	460b      	mov	r3, r1
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 8000830:	f004 fab8 	bl	8004da4 <rand>
 8000834:	4602      	mov	r2, r0
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x3b8>)
 8000838:	fb83 1302 	smull	r1, r3, r3, r2
 800083c:	4413      	add	r3, r2
 800083e:	1119      	asrs	r1, r3, #4
 8000840:	17d3      	asrs	r3, r2, #31
 8000842:	1ac9      	subs	r1, r1, r3
 8000844:	460b      	mov	r3, r1
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	1a5b      	subs	r3, r3, r1
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000850:	f004 faa8 	bl	8004da4 <rand>
 8000854:	4603      	mov	r3, r0
 8000856:	425a      	negs	r2, r3
 8000858:	b2db      	uxtb	r3, r3
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	e018      	b.n	8000890 <main+0x3bc>
 800085e:	bf00      	nop
 8000860:	200003dc 	.word	0x200003dc
 8000864:	40010c0d 	.word	0x40010c0d
 8000868:	20000370 	.word	0x20000370
 800086c:	20000328 	.word	0x20000328
 8000870:	20000298 	.word	0x20000298
 8000874:	200002e0 	.word	0x200002e0
 8000878:	200003b6 	.word	0x200003b6
 800087c:	080061e0 	.word	0x080061e0
 8000880:	20000208 	.word	0x20000208
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	e070381d 	.word	0xe070381d
 800088c:	88888889 	.word	0x88888889
 8000890:	bf58      	it	pl
 8000892:	4253      	negpl	r3, r2
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 8000896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000898:	b218      	sxth	r0, r3
 800089a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800089c:	b219      	sxth	r1, r3
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	b21a      	sxth	r2, r3
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	b21c      	sxth	r4, r3
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4623      	mov	r3, r4
 80008ae:	f001 fd6a 	bl	8002386 <FillRectangle>
	      }
	  }
	  HAL_Delay(100);
	  continue;
	  */
	  z=z+1;
 80008b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b4:	3301      	adds	r3, #1
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 80008b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ba:	2b63      	cmp	r3, #99	; 0x63
 80008bc:	dd5c      	ble.n	8000978 <main+0x4a4>
		  /////////
		  ClearScreen(VGA_BLACK);
 80008be:	2000      	movs	r0, #0
 80008c0:	f001 fa4e 	bl	8001d60 <ClearScreen>
		  ShowImage((uint8_t *)colors,100,75,0,0);
 80008c4:	2300      	movs	r3, #0
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	224b      	movs	r2, #75	; 0x4b
 80008cc:	2164      	movs	r1, #100	; 0x64
 80008ce:	482c      	ldr	r0, [pc, #176]	; (8000980 <main+0x4ac>)
 80008d0:	f001 fe92 	bl	80025f8 <ShowImage>
		  HAL_Delay(5000);
 80008d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d8:	f001 ff60 	bl	800279c <HAL_Delay>
		  ShowImage((uint8_t *)flower,100,63,0,0);
 80008dc:	2300      	movs	r3, #0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2300      	movs	r3, #0
 80008e2:	223f      	movs	r2, #63	; 0x3f
 80008e4:	2164      	movs	r1, #100	; 0x64
 80008e6:	4827      	ldr	r0, [pc, #156]	; (8000984 <main+0x4b0>)
 80008e8:	f001 fe86 	bl	80025f8 <ShowImage>
		  HAL_Delay(5000);
 80008ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80008f0:	f001 ff54 	bl	800279c <HAL_Delay>
		  ShowImage((uint8_t *)rgb,100,75,0,0);
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	224b      	movs	r2, #75	; 0x4b
 80008fc:	2164      	movs	r1, #100	; 0x64
 80008fe:	4822      	ldr	r0, [pc, #136]	; (8000988 <main+0x4b4>)
 8000900:	f001 fe7a 	bl	80025f8 <ShowImage>
		  HAL_Delay(5000);
 8000904:	f241 3088 	movw	r0, #5000	; 0x1388
 8000908:	f001 ff48 	bl	800279c <HAL_Delay>

		  tetris();
 800090c:	f001 f88a 	bl	8001a24 <tetris>
		  //////////
		  z=0;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 8000914:	2000      	movs	r0, #0
 8000916:	f001 fa23 	bl	8001d60 <ClearScreen>
		  HAL_Delay(100);
 800091a:	2064      	movs	r0, #100	; 0x64
 800091c:	f001 ff3e 	bl	800279c <HAL_Delay>
		  vga_stop=1;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <main+0x4b8>)
 8000922:	2201      	movs	r2, #1
 8000924:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4919      	ldr	r1, [pc, #100]	; (8000990 <main+0x4bc>)
 800092a:	4618      	mov	r0, r3
 800092c:	f004 fa78 	bl	8004e20 <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000930:	23ff      	movs	r3, #255	; 0xff
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2348      	movs	r3, #72	; 0x48
 8000936:	2263      	movs	r2, #99	; 0x63
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f001 fcdc 	bl	80022f8 <DrawRectangle>
		  SetCursor(3,3);
 8000940:	2103      	movs	r1, #3
 8000942:	2003      	movs	r0, #3
 8000944:	f001 fc18 	bl	8002178 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <main+0x4c0>)
 800094a:	1d38      	adds	r0, r7, #4
 800094c:	231c      	movs	r3, #28
 800094e:	ca06      	ldmia	r2, {r1, r2}
 8000950:	f001 fbec 	bl	800212c <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <main+0x4c4>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	490f      	ldr	r1, [pc, #60]	; (800099c <main+0x4c8>)
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fa5e 	bl	8004e20 <siprintf>
		  SetCursor(3,50);
 8000964:	2132      	movs	r1, #50	; 0x32
 8000966:	2003      	movs	r0, #3
 8000968:	f001 fc06 	bl	8002178 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 800096c:	4a09      	ldr	r2, [pc, #36]	; (8000994 <main+0x4c0>)
 800096e:	1d38      	adds	r0, r7, #4
 8000970:	23ff      	movs	r3, #255	; 0xff
 8000972:	ca06      	ldmia	r2, {r1, r2}
 8000974:	f001 fbda 	bl	800212c <WriteString>
	  }
	  HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f001 ff0f 	bl	800279c <HAL_Delay>
	  r = rand()%25;
 800097e:	e643      	b.n	8000608 <main+0x134>
 8000980:	08006220 	.word	0x08006220
 8000984:	08007f6c 	.word	0x08007f6c
 8000988:	08009808 	.word	0x08009808
 800098c:	200003b6 	.word	0x200003b6
 8000990:	080061d4 	.word	0x080061d4
 8000994:	20000208 	.word	0x20000208
 8000998:	200003b4 	.word	0x200003b4
 800099c:	080061dc 	.word	0x080061dc

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b090      	sub	sp, #64	; 0x40
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	2228      	movs	r2, #40	; 0x28
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f9c2 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	2302      	movs	r3, #2
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 fcbb 	bl	8003364 <HAL_RCC_OscConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009f4:	f000 fa2e 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f8:	230f      	movs	r3, #15
 80009fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fc:	2302      	movs	r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2102      	movs	r1, #2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 ff28 	bl	8003868 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a1e:	f000 fa19 	bl	8000e54 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3740      	adds	r7, #64	; 0x40
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2220      	movs	r2, #32
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 f967 	bl	8004d38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a6c:	4a3e      	ldr	r2, [pc, #248]	; (8000b68 <MX_TIM1_Init+0x13c>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8000a70:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a7e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a90:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a96:	4833      	ldr	r0, [pc, #204]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000a98:	f003 f84c 	bl	8003b34 <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000aa2:	f000 f9d7 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482c      	ldr	r0, [pc, #176]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000ab4:	f003 fbea 	bl	800428c <HAL_TIM_ConfigClockSource>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000abe:	f000 f9c9 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac2:	4828      	ldr	r0, [pc, #160]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000ac4:	f003 f922 	bl	8003d0c <HAL_TIM_PWM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ace:	f000 f9c1 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ada:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4820      	ldr	r0, [pc, #128]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000ae2:	f004 f82f 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000aec:	f000 f9b2 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 72-1;
 8000af4:	2347      	movs	r3, #71	; 0x47
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	4813      	ldr	r0, [pc, #76]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000b16:	f003 fafb 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b20:	f000 f998 	bl	8000e54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4807      	ldr	r0, [pc, #28]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000b48:	f004 f85a 	bl	8004c00 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b52:	f000 f97f 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <MX_TIM1_Init+0x138>)
 8000b58:	f000 fa2a 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000b5c:	bf00      	nop
 8000b5e:	3758      	adds	r7, #88	; 0x58
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000298 	.word	0x20000298
 8000b68:	40012c00 	.word	0x40012c00

08000b6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000ba0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-2;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bb4:	f240 226f 	movw	r2, #623	; 0x26f
 8000bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bc8:	f002 ffb4 	bl	8003b34 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f93f 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bd6:	4820      	ldr	r0, [pc, #128]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bd8:	f003 f898 	bl	8003d0c <HAL_TIM_PWM_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000be2:	f000 f937 	bl	8000e54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000be6:	2307      	movs	r3, #7
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000bf6:	f003 fc0d 	bl	8004414 <HAL_TIM_SlaveConfigSynchro>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c00:	f000 f928 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c04:	2320      	movs	r3, #32
 8000c06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000c14:	f003 ff96 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c1e:	f000 f919 	bl	8000e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c22:	2360      	movs	r3, #96	; 0x60
 8000c24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000c3a:	f003 fa69 	bl	8004110 <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c44:	f000 f906 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM2_Init+0xec>)
 8000c4a:	f000 f9b1 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000c4e:	bf00      	nop
 8000c50:	3738      	adds	r7, #56	; 0x38
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200002e0 	.word	0x200002e0

08000c5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <MX_TIM4_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM4_Init+0x90>)
 8000c9e:	f002 ff49 	bl	8003b34 <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000ca8:	f000 f8d4 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM4_Init+0x90>)
 8000cba:	f003 fae7 	bl	800428c <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000cc4:	f000 f8c6 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM4_Init+0x90>)
 8000cd6:	f003 ff35 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000ce0:	f000 f8b8 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000328 	.word	0x20000328
 8000cf0:	40000800 	.word	0x40000800

08000cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_DMA_Init+0x38>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <MX_DMA_Init+0x38>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_DMA_Init+0x38>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2011      	movs	r0, #17
 8000d18:	f001 fe3b 	bl	8002992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d1c:	2011      	movs	r0, #17
 8000d1e:	f001 fe54 	bl	80029ca <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a3e      	ldr	r2, [pc, #248]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a38      	ldr	r2, [pc, #224]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_GPIO_Init+0x114>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <MX_GPIO_Init+0x118>)
 8000dac:	f002 faa9 	bl	8003302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <MX_GPIO_Init+0x11c>)
 8000db8:	f002 faa3 	bl	8003302 <HAL_GPIO_WritePin>
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000dc2:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000dc4:	f002 fa9d 	bl	8003302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4819      	ldr	r0, [pc, #100]	; (8000e48 <MX_GPIO_Init+0x118>)
 8000de2:	f002 f8f3 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	4815      	ldr	r0, [pc, #84]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000dfa:	f002 f8e7 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : G0_Pin G1_Pin G2_Pin R0_Pin
                           R1_Pin R2_Pin B0_Pin B1_Pin */
  GPIO_InitStruct.Pin = G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000dfe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e02:	613b      	str	r3, [r7, #16]
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <MX_GPIO_Init+0x11c>)
 8000e18:	f002 f8d8 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000e1c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000e36:	f002 f8c9 	bl	8002fcc <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40011000 	.word	0x40011000
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40010800 	.word	0x40010800

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <Error_Handler+0x8>
	...

08000e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MspInit+0x60>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_MspInit+0x60>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_TIM_Base_MspInit+0xd8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000edc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eee:	e051      	b.n	8000f94 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef8:	d114      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	201c      	movs	r0, #28
 8000f18:	f001 fd3b 	bl	8002992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f1c:	201c      	movs	r0, #28
 8000f1e:	f001 fd54 	bl	80029ca <HAL_NVIC_EnableIRQ>
}
 8000f22:	e037      	b.n	8000f94 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1e      	ldr	r2, [pc, #120]	; (8000fa4 <HAL_TIM_Base_MspInit+0xe0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d132      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_TIM_Base_MspInit+0xdc>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_up.Instance = DMA1_Channel7;
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f48:	4a18      	ldr	r2, [pc, #96]	; (8000fac <HAL_TIM_Base_MspInit+0xe8>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f4e:	2210      	movs	r2, #16
 8000f50:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f70:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f72:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f7a:	f001 fd41 	bl	8002a00 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 8000f84:	f7ff ff66 	bl	8000e54 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f8c:	621a      	str	r2, [r3, #32]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_TIM_Base_MspInit+0xe4>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40000800 	.word	0x40000800
 8000fa8:	20000370 	.word	0x20000370
 8000fac:	40020080 	.word	0x40020080

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1f      	ldr	r2, [pc, #124]	; (8001048 <HAL_TIM_MspPostInit+0x98>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d119      	bne.n	8001004 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <HAL_TIM_MspPostInit+0xa0>)
 8000ffe:	f001 ffe5 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001002:	e01c      	b.n	800103e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d117      	bne.n	800103e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_TIM_MspPostInit+0x9c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001026:	2301      	movs	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_TIM_MspPostInit+0xa0>)
 800103a:	f001 ffc7 	bl	8002fcc <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	3720      	adds	r7, #32
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012c00 	.word	0x40012c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f001 fb63 	bl	8002764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DMA1_Channel7_IRQHandler+0x10>)
 80010aa:	f001 fe13 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000370 	.word	0x20000370

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f002 ff1f 	bl	8003f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002e0 	.word	0x200002e0

080010cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	return 1;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <_kill>:

int _kill(int pid, int sig)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010e4:	f003 fdf0 	bl	8004cc8 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2216      	movs	r2, #22
 80010ec:	601a      	str	r2, [r3, #0]
	return -1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_exit>:

void _exit (int status)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffe7 	bl	80010da <_kill>
	while (1) {}		/* Make sure we hang here */
 800110c:	e7fe      	b.n	800110c <_exit+0x12>

0800110e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e00a      	b.n	8001136 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001120:	f3af 8000 	nop.w
 8001124:	4601      	mov	r1, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	b2ca      	uxtb	r2, r1
 800112e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	429a      	cmp	r2, r3
 800113c:	dbf0      	blt.n	8001120 <_read+0x12>
	}

return len;
 800113e:	687b      	ldr	r3, [r7, #4]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e009      	b.n	800116e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf1      	blt.n	800115a <_write+0x12>
	}
	return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_close>:

int _close(int file)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
	return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <_isatty>:

int _isatty(int file)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	return 1;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f003 fd5a 	bl	8004cc8 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20005000 	.word	0x20005000
 8001240:	00000400 	.word	0x00000400
 8001244:	200003e0 	.word	0x200003e0
 8001248:	20002f80 	.word	0x20002f80

0800124c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <NextBlock>:
extern uint8_t getch(char *ch);
extern void myDelay(int ms);

//spawning next falling block
void NextBlock()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
fallingblockNum=rand()%5;
 800125c:	f003 fda2 	bl	8004da4 <rand>
 8001260:	4601      	mov	r1, r0
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <NextBlock+0x88>)
 8001264:	fb83 2301 	smull	r2, r3, r3, r1
 8001268:	105a      	asrs	r2, r3, #1
 800126a:	17cb      	asrs	r3, r1, #31
 800126c:	1ad2      	subs	r2, r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	1aca      	subs	r2, r1, r3
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <NextBlock+0x8c>)
 8001278:	601a      	str	r2, [r3, #0]
if(fallingblockNum==0||fallingblockNum==1)
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <NextBlock+0x8c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <NextBlock+0x32>
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <NextBlock+0x8c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10c      	bne.n	80012a4 <NextBlock+0x4c>
 fallingBlockVersion=rand()%4;
 800128a:	f003 fd8b 	bl	8004da4 <rand>
 800128e:	4603      	mov	r3, r0
 8001290:	425a      	negs	r2, r3
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	bf58      	it	pl
 800129c:	4253      	negpl	r3, r2
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <NextBlock+0x90>)
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e015      	b.n	80012d0 <NextBlock+0x78>
else if(fallingblockNum==4||fallingblockNum==3)
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <NextBlock+0x8c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d003      	beq.n	80012b4 <NextBlock+0x5c>
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <NextBlock+0x8c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d10a      	bne.n	80012ca <NextBlock+0x72>
 fallingBlockVersion=rand()%2;
 80012b4:	f003 fd76 	bl	8004da4 <rand>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	bfb8      	it	lt
 80012c2:	425b      	neglt	r3, r3
 80012c4:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <NextBlock+0x90>)
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e002      	b.n	80012d0 <NextBlock+0x78>
else
 fallingBlockVersion=0;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <NextBlock+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
fallingBlockRow=0;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <NextBlock+0x94>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
fallingBlockCol=5;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <NextBlock+0x98>)
 80012d8:	2205      	movs	r2, #5
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	66666667 	.word	0x66666667
 80012e4:	20000a00 	.word	0x20000a00
 80012e8:	20000a04 	.word	0x20000a04
 80012ec:	20000a08 	.word	0x20000a08
 80012f0:	20000a0c 	.word	0x20000a0c

080012f4 <getFallingBlockArray>:
//store pointer to current falling block's array in *blockarray;
int *getFallingBlockArray()
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
int a=fallingblockNum*10+fallingBlockVersion;
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <getFallingBlockArray+0x110>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	461a      	mov	r2, r3
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <getFallingBlockArray+0x114>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4413      	add	r3, r2
 800130e:	607b      	str	r3, [r7, #4]
switch(a)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b29      	cmp	r3, #41	; 0x29
 8001314:	d870      	bhi.n	80013f8 <getFallingBlockArray+0x104>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <getFallingBlockArray+0x28>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	080013c5 	.word	0x080013c5
 8001320:	080013c9 	.word	0x080013c9
 8001324:	080013cd 	.word	0x080013cd
 8001328:	080013d1 	.word	0x080013d1
 800132c:	080013f9 	.word	0x080013f9
 8001330:	080013f9 	.word	0x080013f9
 8001334:	080013f9 	.word	0x080013f9
 8001338:	080013f9 	.word	0x080013f9
 800133c:	080013f9 	.word	0x080013f9
 8001340:	080013f9 	.word	0x080013f9
 8001344:	080013d5 	.word	0x080013d5
 8001348:	080013d9 	.word	0x080013d9
 800134c:	080013dd 	.word	0x080013dd
 8001350:	080013e1 	.word	0x080013e1
 8001354:	080013f9 	.word	0x080013f9
 8001358:	080013f9 	.word	0x080013f9
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013f9 	.word	0x080013f9
 8001364:	080013f9 	.word	0x080013f9
 8001368:	080013f9 	.word	0x080013f9
 800136c:	080013e5 	.word	0x080013e5
 8001370:	080013f9 	.word	0x080013f9
 8001374:	080013f9 	.word	0x080013f9
 8001378:	080013f9 	.word	0x080013f9
 800137c:	080013f9 	.word	0x080013f9
 8001380:	080013f9 	.word	0x080013f9
 8001384:	080013f9 	.word	0x080013f9
 8001388:	080013f9 	.word	0x080013f9
 800138c:	080013f9 	.word	0x080013f9
 8001390:	080013f9 	.word	0x080013f9
 8001394:	080013e9 	.word	0x080013e9
 8001398:	080013ed 	.word	0x080013ed
 800139c:	080013f9 	.word	0x080013f9
 80013a0:	080013f9 	.word	0x080013f9
 80013a4:	080013f9 	.word	0x080013f9
 80013a8:	080013f9 	.word	0x080013f9
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	080013f9 	.word	0x080013f9
 80013b4:	080013f9 	.word	0x080013f9
 80013b8:	080013f9 	.word	0x080013f9
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080013f5 	.word	0x080013f5
    {
    case 0:return ((int*)&t_);
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <getFallingBlockArray+0x118>)
 80013c6:	e018      	b.n	80013fa <getFallingBlockArray+0x106>
    case 1:return ((int*)&t_90);
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <getFallingBlockArray+0x11c>)
 80013ca:	e016      	b.n	80013fa <getFallingBlockArray+0x106>
    case 2:return ((int*)&t_180);
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <getFallingBlockArray+0x120>)
 80013ce:	e014      	b.n	80013fa <getFallingBlockArray+0x106>
    case 3:return ((int*)&t_270);
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <getFallingBlockArray+0x124>)
 80013d2:	e012      	b.n	80013fa <getFallingBlockArray+0x106>
    case 10:return ((int*)&l_);
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <getFallingBlockArray+0x128>)
 80013d6:	e010      	b.n	80013fa <getFallingBlockArray+0x106>
    case 11:return ((int*)&l_90);
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <getFallingBlockArray+0x12c>)
 80013da:	e00e      	b.n	80013fa <getFallingBlockArray+0x106>
    case 12:return ((int*)&l_180);
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <getFallingBlockArray+0x130>)
 80013de:	e00c      	b.n	80013fa <getFallingBlockArray+0x106>
    case 13:return ((int*)&l_270);
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <getFallingBlockArray+0x134>)
 80013e2:	e00a      	b.n	80013fa <getFallingBlockArray+0x106>
    case 20:return ((int*)&s_);
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <getFallingBlockArray+0x138>)
 80013e6:	e008      	b.n	80013fa <getFallingBlockArray+0x106>
    case 30:return ((int*)&z_);
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <getFallingBlockArray+0x13c>)
 80013ea:	e006      	b.n	80013fa <getFallingBlockArray+0x106>
    case 31:return ((int*)&z_90);
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <getFallingBlockArray+0x140>)
 80013ee:	e004      	b.n	80013fa <getFallingBlockArray+0x106>
    case 40:return ((int*)&i_hor);
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <getFallingBlockArray+0x144>)
 80013f2:	e002      	b.n	80013fa <getFallingBlockArray+0x106>
    case 41:return ((int*)&i_ver);
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <getFallingBlockArray+0x148>)
 80013f6:	e000      	b.n	80013fa <getFallingBlockArray+0x106>
    }
return ((int*)&i_ver);
 80013f8:	4b10      	ldr	r3, [pc, #64]	; (800143c <getFallingBlockArray+0x148>)
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000a00 	.word	0x20000a00
 8001408:	20000a04 	.word	0x20000a04
 800140c:	2000004c 	.word	0x2000004c
 8001410:	2000006c 	.word	0x2000006c
 8001414:	2000008c 	.word	0x2000008c
 8001418:	200000ac 	.word	0x200000ac
 800141c:	200000cc 	.word	0x200000cc
 8001420:	200000ec 	.word	0x200000ec
 8001424:	2000010c 	.word	0x2000010c
 8001428:	2000012c 	.word	0x2000012c
 800142c:	2000014c 	.word	0x2000014c
 8001430:	2000016c 	.word	0x2000016c
 8001434:	2000018c 	.word	0x2000018c
 8001438:	200001cc 	.word	0x200001cc
 800143c:	200001ac 	.word	0x200001ac

08001440 <isDrawable>:
/* To check if moving to left or right
or rotation of falling block is feasible.
i.e to check whether there is enough space around it.
*/
int isDrawable(int newrow,int newcol,int blockversion)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
int i,tempversion,flag=1;;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
tempversion=fallingBlockVersion;
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <isDrawable+0xf0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	617b      	str	r3, [r7, #20]
fallingBlockVersion=blockversion;
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <isDrawable+0xf0>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6013      	str	r3, [r2, #0]
blockarray=getFallingBlockArray();
 800145c:	f7ff ff4a 	bl	80012f4 <getFallingBlockArray>
 8001460:	4603      	mov	r3, r0
 8001462:	4a34      	ldr	r2, [pc, #208]	; (8001534 <isDrawable+0xf4>)
 8001464:	6013      	str	r3, [r2, #0]
for(i=0;i<8;i+=2)
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	e051      	b.n	8001510 <isDrawable+0xd0>
    {
//check if block goes out of the matrix (up or down)

if(newrow+blockarray[i]>HEIGHT_1||newrow+blockarray[i]<0)
 800146c:	4b31      	ldr	r3, [pc, #196]	; (8001534 <isDrawable+0xf4>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	2b1d      	cmp	r3, #29
 800147e:	dc09      	bgt.n	8001494 <isDrawable+0x54>
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <isDrawable+0xf4>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	da02      	bge.n	800149a <isDrawable+0x5a>
 {
 flag=0;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
 break;
 8001498:	e03d      	b.n	8001516 <isDrawable+0xd6>
 }
//check if block goes out of the matrix (left or right)

if(newcol+blockarray[i+1]>12||newcol+blockarray[i+1]<0)
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <isDrawable+0xf4>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4413      	add	r3, r2
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	dc0a      	bgt.n	80014c6 <isDrawable+0x86>
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <isDrawable+0xf4>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3301      	adds	r3, #1
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4413      	add	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da02      	bge.n	80014cc <isDrawable+0x8c>
 {
 flag=0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 break;
 80014ca:	e024      	b.n	8001516 <isDrawable+0xd6>
 }
//check if there is any obstacle on the proposed position

if(board[(newrow+blockarray[i])][(newcol+blockarray[i+1])]==2)
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <isDrawable+0xf4>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	441a      	add	r2, r3
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <isDrawable+0xf4>)
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	3301      	adds	r3, #1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4419      	add	r1, r3
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <isDrawable+0xf8>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d102      	bne.n	800150a <isDrawable+0xca>
 {
 flag=0;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
 break;
 8001508:	e005      	b.n	8001516 <isDrawable+0xd6>
for(i=0;i<8;i+=2)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3302      	adds	r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b07      	cmp	r3, #7
 8001514:	ddaa      	ble.n	800146c <isDrawable+0x2c>
 }
    }
fallingBlockVersion=tempversion;
 8001516:	4a06      	ldr	r2, [pc, #24]	; (8001530 <isDrawable+0xf0>)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	6013      	str	r3, [r2, #0]
blockarray=getFallingBlockArray();
 800151c:	f7ff feea 	bl	80012f4 <getFallingBlockArray>
 8001520:	4603      	mov	r3, r0
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <isDrawable+0xf4>)
 8001524:	6013      	str	r3, [r2, #0]
return flag;
 8001526:	69bb      	ldr	r3, [r7, #24]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000a04 	.word	0x20000a04
 8001534:	200009fc 	.word	0x200009fc
 8001538:	200003e4 	.word	0x200003e4

0800153c <clearOldBlockVersion>:
To clear the old position of falling block
after it moves to a new position (row/column change)
or after it is rotated
*/
void clearOldBlockVersion()
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b087      	sub	sp, #28
 8001540:	af02      	add	r7, sp, #8
int i,r,c;
for(i=0;i<8;i+=2)
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e043      	b.n	80015d0 <clearOldBlockVersion+0x94>
 {
 r=fallingBlockRow+blockarray[i];
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <clearOldBlockVersion+0xa4>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <clearOldBlockVersion+0xa8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4413      	add	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
 c=fallingBlockCol+blockarray[i+1];
 800155c:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <clearOldBlockVersion+0xa4>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <clearOldBlockVersion+0xac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	607b      	str	r3, [r7, #4]
 board[r][c]=0;
 8001572:	491e      	ldr	r1, [pc, #120]	; (80015ec <clearOldBlockVersion+0xb0>)
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	2200      	movs	r2, #0
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

// setfillstyle(EMPTY_FILL,BLACK);
 //setcolor(BLACK);
 //      bar(2+c*13,2+r*13,2+c*13+13,2+r*13+13);
 FillRectangle(2+c*SIZE,2+r*SIZE,2+c*SIZE+SIZE-1,2+r*SIZE+SIZE-1,VGA_BLACK);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	b29b      	uxth	r3, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	b218      	sxth	r0, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b219      	sxth	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3302      	adds	r3, #2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3302      	adds	r3, #2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3b01      	subs	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	2400      	movs	r4, #0
 80015c4:	9400      	str	r4, [sp, #0]
 80015c6:	f000 fede 	bl	8002386 <FillRectangle>
for(i=0;i<8;i+=2)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3302      	adds	r3, #2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b07      	cmp	r3, #7
 80015d4:	ddb8      	ble.n	8001548 <clearOldBlockVersion+0xc>
 }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	200009fc 	.word	0x200009fc
 80015e4:	20000a08 	.word	0x20000a08
 80015e8:	20000a0c 	.word	0x20000a0c
 80015ec:	200003e4 	.word	0x200003e4

080015f0 <drawNewBlockVersion>:
or after it is rotated

*/

void drawNewBlockVersion()
{
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af02      	add	r7, sp, #8
int i,r,c;
for(i=0;i<8;i+=2)
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e049      	b.n	8001690 <drawNewBlockVersion+0xa0>
 {
 r=fallingBlockRow+blockarray[i];
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <drawNewBlockVersion+0xb0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <drawNewBlockVersion+0xb4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4413      	add	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
 c=fallingBlockCol+blockarray[i+1];
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <drawNewBlockVersion+0xb0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <drawNewBlockVersion+0xb8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	607b      	str	r3, [r7, #4]
 board[r][c]=1;
 8001626:	4921      	ldr	r1, [pc, #132]	; (80016ac <drawNewBlockVersion+0xbc>)
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	2201      	movs	r2, #1
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
// setfillstyle(XHATCH_FILL,CYAN);
 //setcolor(GREEN);
 //bar(2+c*13,2+r*13,2+c*13+13,2+r*13+13);
 FillRectangle(2+c*SIZE,2+r*SIZE,2+c*SIZE+SIZE-1,2+r*SIZE+SIZE-1,Tcolor[fallingblockNum]);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3301      	adds	r3, #1
 8001642:	b29b      	uxth	r3, r3
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	b218      	sxth	r0, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3301      	adds	r3, #1
 800164e:	b29b      	uxth	r3, r3
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	b219      	sxth	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3302      	adds	r3, #2
 800165a:	b29b      	uxth	r3, r3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3302      	adds	r3, #2
 800166a:	b29b      	uxth	r3, r3
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21c      	sxth	r4, r3
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <drawNewBlockVersion+0xc0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4d0e      	ldr	r5, [pc, #56]	; (80016b4 <drawNewBlockVersion+0xc4>)
 800167c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4623      	mov	r3, r4
 8001686:	f000 fe7e 	bl	8002386 <FillRectangle>
for(i=0;i<8;i+=2)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3302      	adds	r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b07      	cmp	r3, #7
 8001694:	ddb2      	ble.n	80015fc <drawNewBlockVersion+0xc>
 }
}
 8001696:	bf00      	nop
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	200009fc 	.word	0x200009fc
 80016a4:	20000a08 	.word	0x20000a08
 80016a8:	20000a0c 	.word	0x20000a0c
 80016ac:	200003e4 	.word	0x200003e4
 80016b0:	20000a00 	.word	0x20000a00
 80016b4:	200001ec 	.word	0x200001ec

080016b8 <isGameOver>:

*/


int isGameOver()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
if(isDrawable(0,5,fallingBlockVersion)==0)
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <isGameOver+0x34>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	2105      	movs	r1, #5
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff febb 	bl	8001440 <isDrawable>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <isGameOver+0x1c>
    return 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e009      	b.n	80016e8 <isGameOver+0x30>
drawNewBlockVersion();
 80016d4:	f7ff ff8c 	bl	80015f0 <drawNewBlockVersion>
if(isAtBottom())
 80016d8:	f000 f80a 	bl	80016f0 <isAtBottom>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <isGameOver+0x2e>
    return 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <isGameOver+0x30>
return 0;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000a04 	.word	0x20000a04

080016f0 <isAtBottom>:
/*
To check if falling block reached the bottom
*/
int isAtBottom()
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
int i,max=0,ti,tj;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
for(i=0;i<8;i+=2)
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e012      	b.n	8001726 <isAtBottom+0x36>
    if(*(blockarray+i)>max)
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <isAtBottom+0xb4>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	da06      	bge.n	8001720 <isAtBottom+0x30>
 max=*(blockarray+i);
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <isAtBottom+0xb4>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60bb      	str	r3, [r7, #8]
for(i=0;i<8;i+=2)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3302      	adds	r3, #2
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b07      	cmp	r3, #7
 800172a:	dde9      	ble.n	8001700 <isAtBottom+0x10>
if(fallingBlockRow+max>=HEIGHT_1)
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <isAtBottom+0xb8>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	4413      	add	r3, r2
 8001734:	2b1c      	cmp	r3, #28
 8001736:	dd01      	ble.n	800173c <isAtBottom+0x4c>
 return 1;
 8001738:	2301      	movs	r3, #1
 800173a:	e02e      	b.n	800179a <isAtBottom+0xaa>
for(i=0;i<8;i+=2)
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e027      	b.n	8001792 <isAtBottom+0xa2>
    {
    ti=*(blockarray+i)+fallingBlockRow;
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <isAtBottom+0xb4>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <isAtBottom+0xb8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4413      	add	r3, r2
 8001754:	607b      	str	r3, [r7, #4]
    tj=*(blockarray+i+1)+fallingBlockCol;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <isAtBottom+0xb4>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3301      	adds	r3, #1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <isAtBottom+0xbc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4413      	add	r3, r2
 800176a:	603b      	str	r3, [r7, #0]
    if(board[ti+1][tj]==2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	490f      	ldr	r1, [pc, #60]	; (80017b0 <isAtBottom+0xc0>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d101      	bne.n	800178c <isAtBottom+0x9c>
       return 1;
 8001788:	2301      	movs	r3, #1
 800178a:	e006      	b.n	800179a <isAtBottom+0xaa>
for(i=0;i<8;i+=2)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3302      	adds	r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b07      	cmp	r3, #7
 8001796:	ddd4      	ble.n	8001742 <isAtBottom+0x52>
    }
return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	200009fc 	.word	0x200009fc
 80017a8:	20000a08 	.word	0x20000a08
 80017ac:	20000a0c 	.word	0x20000a0c
 80017b0:	200003e4 	.word	0x200003e4

080017b4 <showScore>:
/*
Draw score on screen
*/
void showScore()
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b08d      	sub	sp, #52	; 0x34
 80017b8:	af02      	add	r7, sp, #8
int left,top;
left=VGA_WIDTH-40;
 80017ba:	233c      	movs	r3, #60	; 0x3c
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
top=VGA_HEIGHT/2;
 80017be:	2324      	movs	r3, #36	; 0x24
 80017c0:	623b      	str	r3, [r7, #32]
FillRectangle(left,top,left+40,top+30,VGA_BLACK);
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	b218      	sxth	r0, r3
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	b219      	sxth	r1, r3
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3328      	adds	r3, #40	; 0x28
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	331e      	adds	r3, #30
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b21b      	sxth	r3, r3
 80017de:	2400      	movs	r4, #0
 80017e0:	9400      	str	r4, [sp, #0]
 80017e2:	f000 fdd0 	bl	8002386 <FillRectangle>
char msg[32];
//char msg[32]="SCORE";
//SetCursor(left+5,top+3);
//WriteString(msg,Font_7x10,VGA_YELLOW);
sprintf(msg,"%d",myscore);
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <showScore+0x70>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	463b      	mov	r3, r7
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <showScore+0x74>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fb16 	bl	8004e20 <siprintf>
SetCursor(left+1,top+17);
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	b29b      	uxth	r3, r3
 8001802:	3311      	adds	r3, #17
 8001804:	b29b      	uxth	r3, r3
 8001806:	b21b      	sxth	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f000 fcb4 	bl	8002178 <SetCursor>
WriteString(msg,Font_7x10,VGA_YELLOW);
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <showScore+0x78>)
 8001812:	4638      	mov	r0, r7
 8001814:	23fc      	movs	r3, #252	; 0xfc
 8001816:	ca06      	ldmia	r2, {r1, r2}
 8001818:	f000 fc88 	bl	800212c <WriteString>
}
 800181c:	bf00      	nop
 800181e:	372c      	adds	r7, #44	; 0x2c
 8001820:	46bd      	mov	sp, r7
 8001822:	bd90      	pop	{r4, r7, pc}
 8001824:	20000a14 	.word	0x20000a14
 8001828:	08006200 	.word	0x08006200
 800182c:	20000208 	.word	0x20000208

08001830 <CollapseFullRow>:
Also settles rows over the cleared row down.

*/

void CollapseFullRow()
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af02      	add	r7, sp, #8
int i,j,k,sum,copyskipover=0,r;
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
for(i=HEIGHT_1;i>=0;)
 800183a:	231d      	movs	r3, #29
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e09f      	b.n	8001980 <CollapseFullRow+0x150>
    {
    sum=0;//full flag
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
    for(j=0;j<13;j++)
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e010      	b.n	800186c <CollapseFullRow+0x3c>
 sum+=board[i][j];
 800184a:	4973      	ldr	r1, [pc, #460]	; (8001a18 <CollapseFullRow+0x1e8>)
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4413      	add	r3, r2
 800185c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	60bb      	str	r3, [r7, #8]
    for(j=0;j<13;j++)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3301      	adds	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	ddeb      	ble.n	800184a <CollapseFullRow+0x1a>
    if(sum==2*13)//row full
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b1a      	cmp	r3, #26
 8001876:	d109      	bne.n	800188c <CollapseFullRow+0x5c>
 {
 myscore+=scoreInc;
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <CollapseFullRow+0x1ec>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <CollapseFullRow+0x1f0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4413      	add	r3, r2
 8001882:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <CollapseFullRow+0x1ec>)
 8001884:	6013      	str	r3, [r2, #0]
 copyskipover++;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 }
    if(sum==0)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d07b      	beq.n	800198a <CollapseFullRow+0x15a>
 break;
    i--;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3b01      	subs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
    if(copyskipover>0)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd70      	ble.n	8001980 <CollapseFullRow+0x150>
 {
 for(j=0;j<13;j++)
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e06a      	b.n	800197a <CollapseFullRow+0x14a>
     {
     r=i+copyskipover;
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	603b      	str	r3, [r7, #0]
     board[r][j]=board[i][j];
 80018ac:	495a      	ldr	r1, [pc, #360]	; (8001a18 <CollapseFullRow+0x1e8>)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4413      	add	r3, r2
 80018be:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80018c2:	4855      	ldr	r0, [pc, #340]	; (8001a18 <CollapseFullRow+0x1e8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
     if(board[i][j]==0)
 80018d8:	494f      	ldr	r1, [pc, #316]	; (8001a18 <CollapseFullRow+0x1e8>)
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4413      	add	r3, r2
 80018ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d120      	bne.n	8001934 <CollapseFullRow+0x104>
  {
//  setfillstyle(EMPTY_FILL,BLACK);//empty yo hatch
//  setcolor(BLACK);
  FillRectangle(2+j*SIZE,2+r*SIZE,2+j*SIZE+SIZE-1,2+r*SIZE+SIZE-1,VGA_BLACK);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b218      	sxth	r0, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b29b      	uxth	r3, r3
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	b29b      	uxth	r3, r3
 8001908:	b219      	sxth	r1, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	3302      	adds	r3, #2
 800190e:	b29b      	uxth	r3, r3
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	b21a      	sxth	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3302      	adds	r3, #2
 800191e:	b29b      	uxth	r3, r3
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29b      	uxth	r3, r3
 8001928:	b21b      	sxth	r3, r3
 800192a:	2400      	movs	r4, #0
 800192c:	9400      	str	r4, [sp, #0]
 800192e:	f000 fd2a 	bl	8002386 <FillRectangle>
 8001932:	e01f      	b.n	8001974 <CollapseFullRow+0x144>
     else
  {
//  setfillstyle(XHATCH_FILL,CYAN);
//  setcolor(GREEN);
//  bar(2+j*13,2+r*13,2+j*13+13,2+r*13+13);
  FillRectangle(2+j*SIZE,2+r*SIZE,2+j*SIZE+SIZE-1,2+r*SIZE+SIZE-1,VGA_CYAN);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	3301      	adds	r3, #1
 8001938:	b29b      	uxth	r3, r3
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	b29b      	uxth	r3, r3
 800193e:	b218      	sxth	r0, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	b219      	sxth	r1, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	3302      	adds	r3, #2
 8001950:	b29b      	uxth	r3, r3
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29b      	uxth	r3, r3
 800195a:	b21a      	sxth	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3302      	adds	r3, #2
 8001960:	b29b      	uxth	r3, r3
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	241f      	movs	r4, #31
 800196e:	9400      	str	r4, [sp, #0]
 8001970:	f000 fd09 	bl	8002386 <FillRectangle>
 for(j=0;j<13;j++)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	3301      	adds	r3, #1
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b0c      	cmp	r3, #12
 800197e:	dd91      	ble.n	80018a4 <CollapseFullRow+0x74>
for(i=HEIGHT_1;i>=0;)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	f6bf af5c 	bge.w	8001840 <CollapseFullRow+0x10>
 8001988:	e000      	b.n	800198c <CollapseFullRow+0x15c>
 break;
 800198a:	bf00      	nop
  }
     }
 }
    }
for(k=0;k<copyskipover;k++)
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e037      	b.n	8001a02 <CollapseFullRow+0x1d2>
    {
    r=i+k;
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	603b      	str	r3, [r7, #0]
    for(j=0;j<13;j++)
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	e02a      	b.n	80019f6 <CollapseFullRow+0x1c6>
 {
 board[r][j]=0;
 80019a0:	491d      	ldr	r1, [pc, #116]	; (8001a18 <CollapseFullRow+0x1e8>)
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
// setfillstyle(XHATCH_FILL,BLACK);
// setcolor(BLACK);
 FillRectangle(2+j*SIZE,2+r*SIZE,2+j*SIZE+SIZE,2+r*SIZE+SIZE,VGA_BLACK);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	3301      	adds	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b218      	sxth	r0, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b219      	sxth	r1, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	3302      	adds	r3, #2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b21a      	sxth	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3302      	adds	r3, #2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	2400      	movs	r4, #0
 80019ea:	9400      	str	r4, [sp, #0]
 80019ec:	f000 fccb 	bl	8002386 <FillRectangle>
    for(j=0;j<13;j++)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3301      	adds	r3, #1
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	ddd1      	ble.n	80019a0 <CollapseFullRow+0x170>
for(k=0;k<copyskipover;k++)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dbc3      	blt.n	8001992 <CollapseFullRow+0x162>
 }
    }
showScore();
 8001a0a:	f7ff fed3 	bl	80017b4 <showScore>
}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200003e4 	.word	0x200003e4
 8001a1c:	20000a14 	.word	0x20000a14
 8001a20:	20000204 	.word	0x20000204

08001a24 <tetris>:

//function to display game over and end game
void GameOver();

void tetris()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af02      	add	r7, sp, #8
int scorespeedctrl=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
//char arrowpre,ch,timehalving=0;
char ch,timehalving=0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	76fb      	strb	r3, [r7, #27]
int i,j,k=1,spawn=1,tversion;
 8001a32:	2301      	movs	r3, #1
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	2301      	movs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
motiondelay=startdelay;
 8001a3a:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <tetris+0x254>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a8f      	ldr	r2, [pc, #572]	; (8001c7c <tetris+0x258>)
 8001a40:	6013      	str	r3, [r2, #0]
//char scorestr[16];
//scorestr=(char*)malloc(sizeof(char)*10);
for(i=0;i<HEIGHT;i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e017      	b.n	8001a78 <tetris+0x54>
    for(j=0;j<13;j++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	e00e      	b.n	8001a6c <tetris+0x48>
 board[i][j]=0;
 8001a4e:	498c      	ldr	r1, [pc, #560]	; (8001c80 <tetris+0x25c>)
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(j=0;j<13;j++)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	dded      	ble.n	8001a4e <tetris+0x2a>
for(i=0;i<HEIGHT;i++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b1d      	cmp	r3, #29
 8001a7c:	dde4      	ble.n	8001a48 <tetris+0x24>
When any of arrow key is pressed, two characters
are sent to buffer. The first one may be different
on different compilers and systems.
The second one is of value 72 for up arrow.
*/
ClearScreen(VGA_BLACK);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f96e 	bl	8001d60 <ClearScreen>
FillRectangle(0,0,13*SIZE+6,HEIGHT*SIZE+6,VGA_BLACK);
 8001a84:	2300      	movs	r3, #0
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2342      	movs	r3, #66	; 0x42
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 fc79 	bl	8002386 <FillRectangle>
DrawRectangle(0,0,13*SIZE+6,HEIGHT*SIZE+6,VGA_BLUE);
 8001a94:	2303      	movs	r3, #3
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2342      	movs	r3, #66	; 0x42
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 fc2a 	bl	80022f8 <DrawRectangle>
//srand(time(NULL));
srand(0);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f003 f94f 	bl	8004d48 <srand>
showScore();
 8001aaa:	f7ff fe83 	bl	80017b4 <showScore>

while(ch!=10&&ch!=11&&k!=12){
 8001aae:	e12d      	b.n	8001d0c <tetris+0x2e8>
    if(getch(&ch)&&(spawn==0)){
 8001ab0:	1cfb      	adds	r3, r7, #3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fb7c 	bl	80001b0 <getch>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8095 	beq.w	8001bea <tetris+0x1c6>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 8091 	bne.w	8001bea <tetris+0x1c6>
    	if(ch==2)//if up arrow key pressed
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d140      	bne.n	8001b50 <tetris+0x12c>
    	{
    		if(fallingblockNum==0||fallingblockNum==1)
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <tetris+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <tetris+0xba>
 8001ad6:	4b6b      	ldr	r3, [pc, #428]	; (8001c84 <tetris+0x260>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10b      	bne.n	8001af6 <tetris+0xd2>
    			tversion=(fallingBlockVersion+1)%4;
 8001ade:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <tetris+0x264>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	425a      	negs	r2, r3
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	bf58      	it	pl
 8001af0:	4253      	negpl	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	e010      	b.n	8001b18 <tetris+0xf4>
    		else if(fallingblockNum==4||fallingblockNum==3)
 8001af6:	4b63      	ldr	r3, [pc, #396]	; (8001c84 <tetris+0x260>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d003      	beq.n	8001b06 <tetris+0xe2>
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <tetris+0x260>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d108      	bne.n	8001b18 <tetris+0xf4>
    			tversion=(fallingBlockVersion+1)%2;
 8001b06:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <tetris+0x264>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	bfb8      	it	lt
 8001b14:	425b      	neglt	r3, r3
 8001b16:	60bb      	str	r3, [r7, #8]

    		if(fallingblockNum!=2&&isDrawable(fallingBlockRow,fallingBlockCol,tversion))
 8001b18:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <tetris+0x260>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d064      	beq.n	8001bea <tetris+0x1c6>
 8001b20:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <tetris+0x268>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <tetris+0x26c>)
 8001b26:	6811      	ldr	r1, [r2, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fc88 	bl	8001440 <isDrawable>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d059      	beq.n	8001bea <tetris+0x1c6>
    		{
    			clearOldBlockVersion();
 8001b36:	f7ff fd01 	bl	800153c <clearOldBlockVersion>
    			fallingBlockVersion=tversion;
 8001b3a:	4a53      	ldr	r2, [pc, #332]	; (8001c88 <tetris+0x264>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	6013      	str	r3, [r2, #0]
    			blockarray=getFallingBlockArray();
 8001b40:	f7ff fbd8 	bl	80012f4 <getFallingBlockArray>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a53      	ldr	r2, [pc, #332]	; (8001c94 <tetris+0x270>)
 8001b48:	6013      	str	r3, [r2, #0]
    			drawNewBlockVersion();
 8001b4a:	f7ff fd51 	bl	80015f0 <drawNewBlockVersion>
 8001b4e:	e04c      	b.n	8001bea <tetris+0x1c6>
    		}
    	}else if(ch==4)//if left arrow key is pressed
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d116      	bne.n	8001b84 <tetris+0x160>
    	{
    		if(isDrawable(fallingBlockRow,fallingBlockCol-1,fallingBlockVersion))
 8001b56:	4b4d      	ldr	r3, [pc, #308]	; (8001c8c <tetris+0x268>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <tetris+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	4a49      	ldr	r2, [pc, #292]	; (8001c88 <tetris+0x264>)
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff fc6b 	bl	8001440 <isDrawable>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03c      	beq.n	8001bea <tetris+0x1c6>
    		{
    			clearOldBlockVersion();
 8001b70:	f7ff fce4 	bl	800153c <clearOldBlockVersion>
    			fallingBlockCol--;
 8001b74:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <tetris+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <tetris+0x26c>)
 8001b7c:	6013      	str	r3, [r2, #0]
    			drawNewBlockVersion();
 8001b7e:	f7ff fd37 	bl	80015f0 <drawNewBlockVersion>
 8001b82:	e032      	b.n	8001bea <tetris+0x1c6>
    		}
    	}else if(ch==6)//if right arrow key is pressed
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d116      	bne.n	8001bb8 <tetris+0x194>
        {
    		if(isDrawable(fallingBlockRow,fallingBlockCol+1,fallingBlockVersion))
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <tetris+0x268>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <tetris+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a3c      	ldr	r2, [pc, #240]	; (8001c88 <tetris+0x264>)
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff fc51 	bl	8001440 <isDrawable>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d022      	beq.n	8001bea <tetris+0x1c6>
    		{
    			clearOldBlockVersion();
 8001ba4:	f7ff fcca 	bl	800153c <clearOldBlockVersion>
    			fallingBlockCol++;
 8001ba8:	4b39      	ldr	r3, [pc, #228]	; (8001c90 <tetris+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <tetris+0x26c>)
 8001bb0:	6013      	str	r3, [r2, #0]
    			drawNewBlockVersion();
 8001bb2:	f7ff fd1d 	bl	80015f0 <drawNewBlockVersion>
 8001bb6:	e018      	b.n	8001bea <tetris+0x1c6>
    		}
        }else if(ch==8)//if down arrow key is pressed
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d115      	bne.n	8001bea <tetris+0x1c6>
        {
        	if(isDrawable(fallingBlockRow+1,fallingBlockCol,fallingBlockVersion))
 8001bbe:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <tetris+0x268>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a32      	ldr	r2, [pc, #200]	; (8001c90 <tetris+0x26c>)
 8001bc6:	6811      	ldr	r1, [r2, #0]
 8001bc8:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <tetris+0x264>)
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fc37 	bl	8001440 <isDrawable>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <tetris+0x1c6>
        	{
        		clearOldBlockVersion();
 8001bd8:	f7ff fcb0 	bl	800153c <clearOldBlockVersion>
        		fallingBlockRow++;
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <tetris+0x268>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <tetris+0x268>)
 8001be4:	6013      	str	r3, [r2, #0]
        		drawNewBlockVersion();
 8001be6:	f7ff fd03 	bl	80015f0 <drawNewBlockVersion>
        	}
        }
    }
    if(isAtBottom()&&spawn==0){
 8001bea:	f7ff fd81 	bl	80016f0 <isAtBottom>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d02c      	beq.n	8001c4e <tetris+0x22a>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d129      	bne.n	8001c4e <tetris+0x22a>
    	for(i=0;i<8;i+=2){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e01f      	b.n	8001c40 <tetris+0x21c>
    		board[fallingBlockRow+blockarray[i]][fallingBlockCol+blockarray[i+1]]=2;
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <tetris+0x270>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <tetris+0x268>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	441a      	add	r2, r3
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <tetris+0x270>)
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <tetris+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4419      	add	r1, r3
 8001c26:	4816      	ldr	r0, [pc, #88]	; (8001c80 <tetris+0x25c>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	2202      	movs	r2, #2
 8001c36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    	for(i=0;i<8;i+=2){
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	dddc      	ble.n	8001c00 <tetris+0x1dc>
    	}
    	spawn=1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
    	CollapseFullRow();
 8001c4a:	f7ff fdf1 	bl	8001830 <CollapseFullRow>
    }
    if(spawn){
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d021      	beq.n	8001c98 <tetris+0x274>
    	NextBlock();
 8001c54:	f7ff fb00 	bl	8001258 <NextBlock>
    	blockarray=getFallingBlockArray();
 8001c58:	f7ff fb4c 	bl	80012f4 <getFallingBlockArray>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <tetris+0x270>)
 8001c60:	6013      	str	r3, [r2, #0]
    	spawn=0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
    	if(isGameOver())
 8001c66:	f7ff fd27 	bl	80016b8 <isGameOver>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02c      	beq.n	8001cca <tetris+0x2a6>
    	{
    		GameOver();
 8001c70:	f000 f864 	bl	8001d3c <GameOver>
 8001c74:	e054      	b.n	8001d20 <tetris+0x2fc>
 8001c76:	bf00      	nop
 8001c78:	20000200 	.word	0x20000200
 8001c7c:	20000a10 	.word	0x20000a10
 8001c80:	200003e4 	.word	0x200003e4
 8001c84:	20000a00 	.word	0x20000a00
 8001c88:	20000a04 	.word	0x20000a04
 8001c8c:	20000a08 	.word	0x20000a08
 8001c90:	20000a0c 	.word	0x20000a0c
 8001c94:	200009fc 	.word	0x200009fc
    		return;
    	}
    }else{
    	timehalving=(timehalving+1)%3;
 8001c98:	7efb      	ldrb	r3, [r7, #27]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <tetris+0x304>)
 8001c9e:	fb83 3102 	smull	r3, r1, r3, r2
 8001ca2:	17d3      	asrs	r3, r2, #31
 8001ca4:	1ac9      	subs	r1, r1, r3
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	440b      	add	r3, r1
 8001cac:	1ad1      	subs	r1, r2, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	76fb      	strb	r3, [r7, #27]
    	if(timehalving==2){
 8001cb2:	7efb      	ldrb	r3, [r7, #27]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d108      	bne.n	8001cca <tetris+0x2a6>
    		clearOldBlockVersion();
 8001cb8:	f7ff fc40 	bl	800153c <clearOldBlockVersion>
    		fallingBlockRow++;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <tetris+0x308>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <tetris+0x308>)
 8001cc4:	6013      	str	r3, [r2, #0]
    		drawNewBlockVersion();
 8001cc6:	f7ff fc93 	bl	80015f0 <drawNewBlockVersion>
    	}
    }
    scorespeedctrl=(scorespeedctrl+1)%280;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <tetris+0x30c>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	441a      	add	r2, r3
 8001cd6:	1211      	asrs	r1, r2, #8
 8001cd8:	17da      	asrs	r2, r3, #31
 8001cda:	1a8a      	subs	r2, r1, r2
 8001cdc:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ce0:	fb01 f202 	mul.w	r2, r1, r2
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	61fb      	str	r3, [r7, #28]
    if(scorespeedctrl==0){
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <tetris+0x2de>
    	motiondelay-=8;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <tetris+0x310>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3b08      	subs	r3, #8
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <tetris+0x310>)
 8001cf6:	6013      	str	r3, [r2, #0]
    	scoreInc++;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <tetris+0x314>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <tetris+0x314>)
 8001d00:	6013      	str	r3, [r2, #0]
    }
    myDelay(motiondelay);
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <tetris+0x310>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fa46 	bl	8000198 <myDelay>
while(ch!=10&&ch!=11&&k!=12){
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d006      	beq.n	8001d20 <tetris+0x2fc>
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	2b0b      	cmp	r3, #11
 8001d16:	d003      	beq.n	8001d20 <tetris+0x2fc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	f47f aec8 	bne.w	8001ab0 <tetris+0x8c>
    }
}
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	55555556 	.word	0x55555556
 8001d2c:	20000a08 	.word	0x20000a08
 8001d30:	ea0ea0eb 	.word	0xea0ea0eb
 8001d34:	20000a10 	.word	0x20000a10
 8001d38:	20000204 	.word	0x20000204

08001d3c <GameOver>:

void GameOver()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	SetCursor(5,17);
 8001d40:	2111      	movs	r1, #17
 8001d42:	2005      	movs	r0, #5
 8001d44:	f000 fa18 	bl	8002178 <SetCursor>
	WriteString("GAME OVER",Font_7x10,VGA_YELLOW);
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <GameOver+0x1c>)
 8001d4a:	23fc      	movs	r3, #252	; 0xfc
 8001d4c:	ca06      	ldmia	r2, {r1, r2}
 8001d4e:	4803      	ldr	r0, [pc, #12]	; (8001d5c <GameOver+0x20>)
 8001d50:	f000 f9ec 	bl	800212c <WriteString>
//setcolor(YELLOW);
//settextjustify(CENTER_TEXT, CENTER_TEXT);
//settextstyle(style, HORIZ_DIR, size);
//outtextxy(getmaxx()/2-10,getmaxy()/2,"Game Over.\n");

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000208 	.word	0x20000208
 8001d5c:	08006204 	.word	0x08006204

08001d60 <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	e015      	b.n	8001d9c <ClearScreen+0x3c>
		for(i=0;i<VGA_LBUFFER;i++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e00c      	b.n	8001d90 <ClearScreen+0x30>
			VGA_buffer[j][i]= color;
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <ClearScreen+0x50>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2164      	movs	r1, #100	; 0x64
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	441a      	add	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4413      	add	r3, r2
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b63      	cmp	r3, #99	; 0x63
 8001d94:	ddef      	ble.n	8001d76 <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b4a      	cmp	r3, #74	; 0x4a
 8001da0:	dde6      	ble.n	8001d70 <ClearScreen+0x10>
	}
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20001218 	.word	0x20001218

08001db4 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	80bb      	strh	r3, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db18      	blt.n	8001e00 <DrawPixel+0x4c>
 8001dce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db14      	blt.n	8001e00 <DrawPixel+0x4c>
 8001dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dda:	2b63      	cmp	r3, #99	; 0x63
 8001ddc:	dc10      	bgt.n	8001e00 <DrawPixel+0x4c>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 8001dde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001de2:	2b48      	cmp	r3, #72	; 0x48
 8001de4:	dc0c      	bgt.n	8001e00 <DrawPixel+0x4c>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 8001de6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dee:	4907      	ldr	r1, [pc, #28]	; (8001e0c <DrawPixel+0x58>)
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	fb00 f202 	mul.w	r2, r0, r2
 8001df6:	440a      	add	r2, r1
 8001df8:	4413      	add	r3, r2
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e000      	b.n	8001e02 <DrawPixel+0x4e>
		return;
 8001e00:	bf00      	nop
}
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20001218 	.word	0x20001218

08001e10 <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4604      	mov	r4, r0
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	4603      	mov	r3, r0
 8001e24:	80bb      	strh	r3, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001e2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	da05      	bge.n	8001e46 <DrawLine+0x36>
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b21b      	sxth	r3, r3
 8001e44:	e004      	b.n	8001e50 <DrawLine+0x40>
 8001e46:	88fa      	ldrh	r2, [r7, #6]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001e52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	da05      	bge.n	8001e6a <DrawLine+0x5a>
 8001e5e:	883a      	ldrh	r2, [r7, #0]
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	e004      	b.n	8001e74 <DrawLine+0x64>
 8001e6a:	88ba      	ldrh	r2, [r7, #4]
 8001e6c:	883b      	ldrh	r3, [r7, #0]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001e76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	da01      	bge.n	8001e86 <DrawLine+0x76>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e001      	b.n	8001e8a <DrawLine+0x7a>
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001e8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	da01      	bge.n	8001e9c <DrawLine+0x8c>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e001      	b.n	8001ea0 <DrawLine+0x90>
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001ea2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ea6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dd06      	ble.n	8001ebc <DrawLine+0xac>
 8001eae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001eb2:	0fda      	lsrs	r2, r3, #31
 8001eb4:	4413      	add	r3, r2
 8001eb6:	105b      	asrs	r3, r3, #1
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	e006      	b.n	8001eca <DrawLine+0xba>
 8001ebc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ec0:	0fda      	lsrs	r2, r3, #31
 8001ec2:	4413      	add	r3, r2
 8001ec4:	105b      	asrs	r3, r3, #1
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d130      	bne.n	8001f36 <DrawLine+0x126>
		if (y1 < y0) {
 8001ed4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001ed8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	da05      	bge.n	8001eec <DrawLine+0xdc>
			tmp = y1;
 8001ee0:	883b      	ldrh	r3, [r7, #0]
 8001ee2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ee4:	88bb      	ldrh	r3, [r7, #4]
 8001ee6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001eec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	da05      	bge.n	8001f04 <DrawLine+0xf4>
			tmp = x1;
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001f00:	893b      	ldrh	r3, [r7, #8]
 8001f02:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	82bb      	strh	r3, [r7, #20]
 8001f08:	e00e      	b.n	8001f28 <DrawLine+0x118>
			DrawPixel(x0, i, c);
 8001f0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f0e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff4c 	bl	8001db4 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001f1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	82bb      	strh	r3, [r7, #20]
 8001f28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	ddea      	ble.n	8001f0a <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8001f34:	e06e      	b.n	8002014 <DrawLine+0x204>
	}

	if (dy == 0) {
 8001f36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d130      	bne.n	8001fa0 <DrawLine+0x190>
		if (y1 < y0) {
 8001f3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001f42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	da05      	bge.n	8001f56 <DrawLine+0x146>
			tmp = y1;
 8001f4a:	883b      	ldrh	r3, [r7, #0]
 8001f4c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001f52:	893b      	ldrh	r3, [r7, #8]
 8001f54:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001f56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	da05      	bge.n	8001f6e <DrawLine+0x15e>
			tmp = x1;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001f6a:	893b      	ldrh	r3, [r7, #8]
 8001f6c:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	82bb      	strh	r3, [r7, #20]
 8001f72:	e00e      	b.n	8001f92 <DrawLine+0x182>
			DrawPixel(i, y0, c);
 8001f74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001f78:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff17 	bl	8001db4 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	82bb      	strh	r3, [r7, #20]
 8001f92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	ddea      	ble.n	8001f74 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 8001f9e:	e039      	b.n	8002014 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 8001fa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001fa4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff01 	bl	8001db4 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001fb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d105      	bne.n	8001fca <DrawLine+0x1ba>
 8001fbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001fc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d023      	beq.n	8002012 <DrawLine+0x202>
			break;
		}
		e2 = err;
 8001fca:	8afb      	ldrh	r3, [r7, #22]
 8001fcc:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001fce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fd6:	425b      	negs	r3, r3
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dd09      	ble.n	8001ff0 <DrawLine+0x1e0>
			err -= dy;
 8001fdc:	8afa      	ldrh	r2, [r7, #22]
 8001fde:	8a3b      	ldrh	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001fe6:	88fa      	ldrh	r2, [r7, #6]
 8001fe8:	89fb      	ldrh	r3, [r7, #14]
 8001fea:	4413      	add	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001ff0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ff4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dad1      	bge.n	8001fa0 <DrawLine+0x190>
			err += dx;
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	89bb      	ldrh	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 8002010:	e7c6      	b.n	8001fa0 <DrawLine+0x190>
			break;
 8002012:	bf00      	nop
		}
	}
}
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
	...

0800201c <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	4604      	mov	r4, r0
 8002024:	1d38      	adds	r0, r7, #4
 8002026:	e880 0006 	stmia.w	r0, {r1, r2}
 800202a:	461a      	mov	r2, r3
 800202c:	4623      	mov	r3, r4
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	4613      	mov	r3, r2
 8002032:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b1f      	cmp	r3, #31
 8002038:	d902      	bls.n	8002040 <WriteChar+0x24>
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b7e      	cmp	r3, #126	; 0x7e
 800203e:	d901      	bls.n	8002044 <WriteChar+0x28>
        return 0;
 8002040:	2300      	movs	r3, #0
 8002042:	e06d      	b.n	8002120 <WriteChar+0x104>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8002044:	4b38      	ldr	r3, [pc, #224]	; (8002128 <WriteChar+0x10c>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	793b      	ldrb	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	dc06      	bgt.n	8002060 <WriteChar+0x44>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <WriteChar+0x10c>)
 8002054:	885b      	ldrh	r3, [r3, #2]
 8002056:	461a      	mov	r2, r3
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 800205c:	2b49      	cmp	r3, #73	; 0x49
 800205e:	dd01      	ble.n	8002064 <WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002060:	2300      	movs	r3, #0
 8002062:	e05d      	b.n	8002120 <WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	e04c      	b.n	8002104 <WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	3b20      	subs	r3, #32
 8002070:	7979      	ldrb	r1, [r7, #5]
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4619      	mov	r1, r3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	440b      	add	r3, r1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e034      	b.n	80020f4 <WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <WriteChar+0xa4>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <WriteChar+0x10c>)
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b218      	sxth	r0, r3
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <WriteChar+0x10c>)
 80020aa:	885a      	ldrh	r2, [r3, #2]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	7bba      	ldrb	r2, [r7, #14]
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7ff fe7b 	bl	8001db4 <DrawPixel>
 80020be:	e016      	b.n	80020ee <WriteChar+0xd2>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <WriteChar+0x10c>)
 80020c2:	881a      	ldrh	r2, [r3, #0]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b218      	sxth	r0, r3
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <WriteChar+0x10c>)
 80020d0:	885a      	ldrh	r2, [r3, #2]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b219      	sxth	r1, r3
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	f7ff fe63 	bl	8001db4 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	793b      	ldrb	r3, [r7, #4]
 80020f6:	461a      	mov	r2, r3
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d3c5      	bcc.n	800208a <WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	797b      	ldrb	r3, [r7, #5]
 8002106:	461a      	mov	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4293      	cmp	r3, r2
 800210c:	d3ad      	bcc.n	800206a <WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <WriteChar+0x10c>)
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	793b      	ldrb	r3, [r7, #4]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4413      	add	r3, r2
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b03      	ldr	r3, [pc, #12]	; (8002128 <WriteChar+0x10c>)
 800211c:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3724      	adds	r7, #36	; 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd90      	pop	{r4, r7, pc}
 8002128:	20002f64 	.word	0x20002f64

0800212c <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	1d38      	adds	r0, r7, #4
 8002136:	e880 0006 	stmia.w	r0, {r1, r2}
 800213a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800213c:	e012      	b.n	8002164 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	7818      	ldrb	r0, [r3, #0]
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	1d3a      	adds	r2, r7, #4
 8002146:	ca06      	ldmia	r2, {r1, r2}
 8002148:	f7ff ff68 	bl	800201c <WriteChar>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d002      	beq.n	800215e <WriteString+0x32>
            // Char could not be written
            return *str;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	e008      	b.n	8002170 <WriteString+0x44>
        }

        // Next char
        str++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e8      	bne.n	800213e <WriteString+0x12>
    }

    // Everything ok
    return *str;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	781b      	ldrb	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	80fb      	strh	r3, [r7, #6]
 8002184:	4613      	mov	r3, r2
 8002186:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 8002188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db03      	blt.n	8002198 <SetCursor+0x20>
 8002190:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002194:	2b63      	cmp	r3, #99	; 0x63
 8002196:	dd03      	ble.n	80021a0 <SetCursor+0x28>
	    VGA.CurrentX = 0;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <SetCursor+0x58>)
 800219a:	2200      	movs	r2, #0
 800219c:	801a      	strh	r2, [r3, #0]
 800219e:	e002      	b.n	80021a6 <SetCursor+0x2e>
	else
		VGA.CurrentX = x;
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <SetCursor+0x58>)
 80021a4:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 80021a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	db03      	blt.n	80021b6 <SetCursor+0x3e>
 80021ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021b2:	2b48      	cmp	r3, #72	; 0x48
 80021b4:	dd03      	ble.n	80021be <SetCursor+0x46>
	    VGA.CurrentY = 0;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <SetCursor+0x58>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	805a      	strh	r2, [r3, #2]
 80021bc:	e003      	b.n	80021c6 <SetCursor+0x4e>
	else
        VGA.CurrentY = y;
 80021be:	88ba      	ldrh	r2, [r7, #4]
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <SetCursor+0x58>)
 80021c2:	805a      	strh	r2, [r3, #2]
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20002f64 	.word	0x20002f64

080021d4 <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4604      	mov	r4, r0
 80021dc:	4608      	mov	r0, r1
 80021de:	4611      	mov	r1, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	4623      	mov	r3, r4
 80021e4:	80fb      	strh	r3, [r7, #6]
 80021e6:	4603      	mov	r3, r0
 80021e8:	80bb      	strh	r3, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
 80021ee:	4613      	mov	r3, r2
 80021f0:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 80021f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021f6:	425b      	negs	r3, r3
 80021f8:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 80021fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002202:	f1c3 0301 	rsb	r3, r3, #1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 800220a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220e:	2b63      	cmp	r3, #99	; 0x63
 8002210:	dc6e      	bgt.n	80022f0 <DrawCircle+0x11c>
 8002212:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002216:	2b48      	cmp	r3, #72	; 0x48
 8002218:	dc6a      	bgt.n	80022f0 <DrawCircle+0x11c>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	b29b      	uxth	r3, r3
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	b29b      	uxth	r3, r3
 8002224:	b218      	sxth	r0, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	b29a      	uxth	r2, r3
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	b21b      	sxth	r3, r3
 8002232:	787a      	ldrb	r2, [r7, #1]
 8002234:	4619      	mov	r1, r3
 8002236:	f7ff fdbd 	bl	8001db4 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	b29a      	uxth	r2, r3
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	4413      	add	r3, r2
 8002242:	b29b      	uxth	r3, r3
 8002244:	b218      	sxth	r0, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b29a      	uxth	r2, r3
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	b21b      	sxth	r3, r3
 8002252:	787a      	ldrb	r2, [r7, #1]
 8002254:	4619      	mov	r1, r3
 8002256:	f7ff fdad 	bl	8001db4 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	b29a      	uxth	r2, r3
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	4413      	add	r3, r2
 8002262:	b29b      	uxth	r3, r3
 8002264:	b218      	sxth	r0, r3
 8002266:	88ba      	ldrh	r2, [r7, #4]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	b29b      	uxth	r3, r3
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	b29b      	uxth	r3, r3
 8002270:	b21b      	sxth	r3, r3
 8002272:	787a      	ldrb	r2, [r7, #1]
 8002274:	4619      	mov	r1, r3
 8002276:	f7ff fd9d 	bl	8001db4 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	b29b      	uxth	r3, r3
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	b218      	sxth	r0, r3
 8002286:	88ba      	ldrh	r2, [r7, #4]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	b29b      	uxth	r3, r3
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29b      	uxth	r3, r3
 8002290:	b21b      	sxth	r3, r3
 8002292:	787a      	ldrb	r2, [r7, #1]
 8002294:	4619      	mov	r1, r3
 8002296:	f7ff fd8d 	bl	8001db4 <DrawPixel>
        e2 = err;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dc13      	bgt.n	80022ce <DrawCircle+0xfa>
            y++;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	3301      	adds	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	3301      	adds	r3, #1
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	425b      	negs	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d105      	bne.n	80022ce <DrawCircle+0xfa>
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dc01      	bgt.n	80022ce <DrawCircle+0xfa>
              e2 = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dd08      	ble.n	80022e8 <DrawCircle+0x114>
          x++;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	3301      	adds	r3, #1
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	dd95      	ble.n	800221a <DrawCircle+0x46>

    return;
 80022ee:	e000      	b.n	80022f2 <DrawCircle+0x11e>
    return;
 80022f0:	bf00      	nop
}
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}

080022f8 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	4604      	mov	r4, r0
 8002300:	4608      	mov	r0, r1
 8002302:	4611      	mov	r1, r2
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	80fb      	strh	r3, [r7, #6]
 800230a:	4603      	mov	r3, r0
 800230c:	80bb      	strh	r3, [r7, #4]
 800230e:	460b      	mov	r3, r1
 8002310:	807b      	strh	r3, [r7, #2]
 8002312:	4613      	mov	r3, r2
 8002314:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 8002316:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800231a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800231e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002322:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002326:	7e3b      	ldrb	r3, [r7, #24]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4623      	mov	r3, r4
 800232c:	f7ff fd70 	bl	8001e10 <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 8002330:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002334:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002338:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800233c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002340:	7e3b      	ldrb	r3, [r7, #24]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4623      	mov	r3, r4
 8002346:	f7ff fd63 	bl	8001e10 <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 800234a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800234e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002352:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002356:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800235a:	7e3b      	ldrb	r3, [r7, #24]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4623      	mov	r3, r4
 8002360:	f7ff fd56 	bl	8001e10 <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 8002364:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002368:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800236c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002370:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002374:	7e3b      	ldrb	r3, [r7, #24]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4623      	mov	r3, r4
 800237a:	f7ff fd49 	bl	8001e10 <DrawLine>
  return;
 800237e:	bf00      	nop
}
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bd90      	pop	{r4, r7, pc}

08002386 <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002386:	b590      	push	{r4, r7, lr}
 8002388:	b087      	sub	sp, #28
 800238a:	af02      	add	r7, sp, #8
 800238c:	4604      	mov	r4, r0
 800238e:	4608      	mov	r0, r1
 8002390:	4611      	mov	r1, r2
 8002392:	461a      	mov	r2, r3
 8002394:	4623      	mov	r3, r4
 8002396:	80fb      	strh	r3, [r7, #6]
 8002398:	4603      	mov	r3, r0
 800239a:	80bb      	strh	r3, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 80023a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a8:	2b63      	cmp	r3, #99	; 0x63
 80023aa:	dc2a      	bgt.n	8002402 <FillRectangle+0x7c>
 80023ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023b0:	2b48      	cmp	r3, #72	; 0x48
 80023b2:	dc26      	bgt.n	8002402 <FillRectangle+0x7c>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 80023b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023b8:	2b63      	cmp	r3, #99	; 0x63
 80023ba:	dd01      	ble.n	80023c0 <FillRectangle+0x3a>
 80023bc:	2363      	movs	r3, #99	; 0x63
 80023be:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 80023c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023c4:	2b48      	cmp	r3, #72	; 0x48
 80023c6:	dd01      	ble.n	80023cc <FillRectangle+0x46>
 80023c8:	2348      	movs	r3, #72	; 0x48
 80023ca:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 80023cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	e010      	b.n	80023f6 <FillRectangle+0x70>
    	DrawLine(x1,yy,x2,yy,color);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	b219      	sxth	r1, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	b21c      	sxth	r4, r3
 80023dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80023e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	4623      	mov	r3, r4
 80023ec:	f7ff fd10 	bl	8001e10 <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dde9      	ble.n	80023d4 <FillRectangle+0x4e>
 8002400:	e000      	b.n	8002404 <FillRectangle+0x7e>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002402:	bf00      	nop
    }
}
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}

0800240a <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b089      	sub	sp, #36	; 0x24
 800240e:	af02      	add	r7, sp, #8
 8002410:	4604      	mov	r4, r0
 8002412:	4608      	mov	r0, r1
 8002414:	4611      	mov	r1, r2
 8002416:	461a      	mov	r2, r3
 8002418:	4623      	mov	r3, r4
 800241a:	80fb      	strh	r3, [r7, #6]
 800241c:	4603      	mov	r3, r0
 800241e:	80bb      	strh	r3, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	f1c3 0301 	rsb	r3, r3, #1
 800242e:	b29b      	uxth	r3, r3
 8002430:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	461a      	mov	r2, r3
 800243a:	03d2      	lsls	r2, r2, #15
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	b29b      	uxth	r3, r3
 8002442:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 800244c:	88ba      	ldrh	r2, [r7, #4]
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	4413      	add	r3, r2
 8002452:	b29b      	uxth	r3, r3
 8002454:	b219      	sxth	r1, r3
 8002456:	787a      	ldrb	r2, [r7, #1]
 8002458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fca9 	bl	8001db4 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 8002462:	88ba      	ldrh	r2, [r7, #4]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	b29b      	uxth	r3, r3
 800246a:	b219      	sxth	r1, r3
 800246c:	787a      	ldrb	r2, [r7, #1]
 800246e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fc9e 	bl	8001db4 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	4413      	add	r3, r2
 800247e:	b29b      	uxth	r3, r3
 8002480:	b21b      	sxth	r3, r3
 8002482:	787a      	ldrb	r2, [r7, #1]
 8002484:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc93 	bl	8001db4 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b29b      	uxth	r3, r3
 8002496:	b21b      	sxth	r3, r3
 8002498:	787a      	ldrb	r2, [r7, #1]
 800249a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fc88 	bl	8001db4 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b218      	sxth	r0, r3
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	4413      	add	r3, r2
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80024bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4623      	mov	r3, r4
 80024c6:	f7ff fca3 	bl	8001e10 <DrawLine>

    while (x < y) {
 80024ca:	e089      	b.n	80025e0 <FillCircle+0x1d6>
        if (f >= 0) {
 80024cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0e      	blt.n	80024f2 <FillCircle+0xe8>
            y--;
 80024d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29b      	uxth	r3, r3
 80024de:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80024e0:	8a7b      	ldrh	r3, [r7, #18]
 80024e2:	3302      	adds	r3, #2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80024e8:	8afa      	ldrh	r2, [r7, #22]
 80024ea:	8a7b      	ldrh	r3, [r7, #18]
 80024ec:	4413      	add	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80024f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80024fe:	8abb      	ldrh	r3, [r7, #20]
 8002500:	3302      	adds	r3, #2
 8002502:	b29b      	uxth	r3, r3
 8002504:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002506:	8afa      	ldrh	r2, [r7, #22]
 8002508:	8abb      	ldrh	r3, [r7, #20]
 800250a:	4413      	add	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	8a3b      	ldrh	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	b29b      	uxth	r3, r3
 8002518:	b218      	sxth	r0, r3
 800251a:	88ba      	ldrh	r2, [r7, #4]
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	4413      	add	r3, r2
 8002520:	b29b      	uxth	r3, r3
 8002522:	b219      	sxth	r1, r3
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	8a3b      	ldrh	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	b21c      	sxth	r4, r3
 800252e:	88ba      	ldrh	r2, [r7, #4]
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	4413      	add	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	4622      	mov	r2, r4
 8002540:	f7ff fc66 	bl	8001e10 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	8a3b      	ldrh	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	b218      	sxth	r0, r3
 800254e:	88ba      	ldrh	r2, [r7, #4]
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	b219      	sxth	r1, r3
 8002558:	88fa      	ldrh	r2, [r7, #6]
 800255a:	8a3b      	ldrh	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	b29b      	uxth	r3, r3
 8002560:	b21c      	sxth	r4, r3
 8002562:	88ba      	ldrh	r2, [r7, #4]
 8002564:	89fb      	ldrh	r3, [r7, #14]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b29b      	uxth	r3, r3
 800256a:	b21a      	sxth	r2, r3
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	4622      	mov	r2, r4
 8002574:	f7ff fc4c 	bl	8001e10 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	4413      	add	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	b218      	sxth	r0, r3
 8002582:	88ba      	ldrh	r2, [r7, #4]
 8002584:	8a3b      	ldrh	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	b219      	sxth	r1, r3
 800258c:	88fa      	ldrh	r2, [r7, #6]
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	b29b      	uxth	r3, r3
 8002594:	b21c      	sxth	r4, r3
 8002596:	88ba      	ldrh	r2, [r7, #4]
 8002598:	8a3b      	ldrh	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	b29b      	uxth	r3, r3
 800259e:	b21a      	sxth	r2, r3
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	4622      	mov	r2, r4
 80025a8:	f7ff fc32 	bl	8001e10 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	89fb      	ldrh	r3, [r7, #14]
 80025b0:	4413      	add	r3, r2
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b218      	sxth	r0, r3
 80025b6:	88ba      	ldrh	r2, [r7, #4]
 80025b8:	8a3b      	ldrh	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b219      	sxth	r1, r3
 80025c0:	88fa      	ldrh	r2, [r7, #6]
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b21c      	sxth	r4, r3
 80025ca:	88ba      	ldrh	r2, [r7, #4]
 80025cc:	8a3b      	ldrh	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	b21a      	sxth	r2, r3
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	4622      	mov	r2, r4
 80025dc:	f7ff fc18 	bl	8001e10 <DrawLine>
    while (x < y) {
 80025e0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80025e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f6ff af6f 	blt.w	80024cc <FillCircle+0xc2>
    }
}
 80025ee:	bf00      	nop
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	4608      	mov	r0, r1
 8002602:	4611      	mov	r1, r2
 8002604:	461a      	mov	r2, r3
 8002606:	4603      	mov	r3, r0
 8002608:	817b      	strh	r3, [r7, #10]
 800260a:	460b      	mov	r3, r1
 800260c:	813b      	strh	r3, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 8002612:	2300      	movs	r3, #0
 8002614:	82fb      	strh	r3, [r7, #22]
 8002616:	e02e      	b.n	8002676 <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 8002618:	2300      	movs	r3, #0
 800261a:	82bb      	strh	r3, [r7, #20]
 800261c:	e01f      	b.n	800265e <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 800261e:	8aba      	ldrh	r2, [r7, #20]
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	4413      	add	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	b218      	sxth	r0, r3
 8002628:	8afa      	ldrh	r2, [r7, #22]
 800262a:	8c3b      	ldrh	r3, [r7, #32]
 800262c:	4413      	add	r3, r2
 800262e:	b29b      	uxth	r3, r3
 8002630:	b219      	sxth	r1, r3
 8002632:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002636:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800263a:	fb03 f202 	mul.w	r2, r3, r2
 800263e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002642:	4413      	add	r3, r2
 8002644:	461a      	mov	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	f7ff fbb1 	bl	8001db4 <DrawPixel>
    	for(i=0;i<x;i++){
 8002652:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002656:	b29b      	uxth	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	b29b      	uxth	r3, r3
 800265c:	82bb      	strh	r3, [r7, #20]
 800265e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002666:	429a      	cmp	r2, r3
 8002668:	dbd9      	blt.n	800261e <ShowImage+0x26>
    for(j=0;j<y;j++){
 800266a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800266e:	b29b      	uxth	r3, r3
 8002670:	3301      	adds	r3, #1
 8002672:	b29b      	uxth	r3, r3
 8002674:	82fb      	strh	r3, [r7, #22]
 8002676:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800267a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800267e:	429a      	cmp	r2, r3
 8002680:	dbca      	blt.n	8002618 <ShowImage+0x20>
    	}
    }
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800268e:	490d      	ldr	r1, [pc, #52]	; (80026c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002694:	e002      	b.n	800269c <LoopCopyDataInit>

08002696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269a:	3304      	adds	r3, #4

0800269c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800269c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a0:	d3f9      	bcc.n	8002696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a8:	e001      	b.n	80026ae <LoopFillZerobss>

080026aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ac:	3204      	adds	r2, #4

080026ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b0:	d3fb      	bcc.n	80026aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026b2:	f7fe fdcb 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f002 fb0d 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ba:	f7fd ff0b 	bl	80004d4 <main>
  bx lr
 80026be:	4770      	bx	lr
  ldr r0, =_sdata
 80026c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c4:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 80026c8:	0800be20 	.word	0x0800be20
  ldr r2, =_sbss
 80026cc:	2000027c 	.word	0x2000027c
  ldr r4, =_ebss
 80026d0:	20002f7c 	.word	0x20002f7c

080026d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC1_2_IRQHandler>
	...

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_Init+0x28>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a07      	ldr	r2, [pc, #28]	; (8002700 <HAL_Init+0x28>)
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 f947 	bl	800297c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ee:	200f      	movs	r0, #15
 80026f0:	f000 f808 	bl	8002704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f4:	f7fe fbb4 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000

08002704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x54>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_InitTick+0x58>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800271a:	fbb3 f3f1 	udiv	r3, r3, r1
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f95f 	bl	80029e6 <HAL_SYSTICK_Config>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00e      	b.n	8002750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d80a      	bhi.n	800274e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002738:	2200      	movs	r2, #0
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f000 f927 	bl	8002992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002744:	4a06      	ldr	r2, [pc, #24]	; (8002760 <HAL_InitTick+0x5c>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	e000      	b.n	8002750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000048 	.word	0x20000048
 800275c:	20000214 	.word	0x20000214
 8002760:	20000210 	.word	0x20000210

08002764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_IncTick+0x1c>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_IncTick+0x20>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a03      	ldr	r2, [pc, #12]	; (8002784 <HAL_IncTick+0x20>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	20000214 	.word	0x20000214
 8002784:	20002f68 	.word	0x20002f68

08002788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <HAL_GetTick+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20002f68 	.word	0x20002f68

0800279c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff fff0 	bl	8002788 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_Delay+0x44>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffe0 	bl	8002788 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000214 	.word	0x20000214

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4906      	ldr	r1, [pc, #24]	; (800287c <__NVIC_EnableIRQ+0x34>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ff90 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff2d 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029a4:	f7ff ff42 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	6978      	ldr	r0, [r7, #20]
 80029b0:	f7ff ff90 	bl	80028d4 <NVIC_EncodePriority>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff5f 	bl	8002880 <__NVIC_SetPriority>
}
 80029c2:	bf00      	nop
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff35 	bl	8002848 <__NVIC_EnableIRQ>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffa2 	bl	8002938 <SysTick_Config>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e043      	b.n	8002a9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_DMA_Init+0xa8>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <HAL_DMA_Init+0xac>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	009a      	lsls	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_DMA_Init+0xb0>)
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	bffdfff8 	.word	0xbffdfff8
 8002aac:	cccccccd 	.word	0xcccccccd
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_DMA_Start_IT+0x20>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e04a      	b.n	8002b6a <HAL_DMA_Start_IT+0xb6>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d13a      	bne.n	8002b5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa30 	bl	8002f70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 020e 	orr.w	r2, r2, #14
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e00f      	b.n	8002b4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0204 	bic.w	r2, r2, #4
 8002b38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 020a 	orr.w	r2, r2, #10
 8002b48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e005      	b.n	8002b68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
 8002b66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d008      	beq.n	8002b9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2204      	movs	r2, #4
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e020      	b.n	8002bdc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020e 	bic.w	r2, r2, #14
 8002ba8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d005      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2204      	movs	r2, #4
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e051      	b.n	8002cae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020e 	bic.w	r2, r2, #14
 8002c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_DMA_Abort_IT+0xd0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d029      	beq.n	8002c88 <HAL_DMA_Abort_IT+0xa0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <HAL_DMA_Abort_IT+0xd4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d022      	beq.n	8002c84 <HAL_DMA_Abort_IT+0x9c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_DMA_Abort_IT+0xd8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d01a      	beq.n	8002c7e <HAL_DMA_Abort_IT+0x96>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_DMA_Abort_IT+0xdc>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d012      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x90>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_DMA_Abort_IT+0xe0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00a      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x8a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_DMA_Abort_IT+0xe4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d102      	bne.n	8002c6c <HAL_DMA_Abort_IT+0x84>
 8002c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c6a:	e00e      	b.n	8002c8a <HAL_DMA_Abort_IT+0xa2>
 8002c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c70:	e00b      	b.n	8002c8a <HAL_DMA_Abort_IT+0xa2>
 8002c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c76:	e008      	b.n	8002c8a <HAL_DMA_Abort_IT+0xa2>
 8002c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7c:	e005      	b.n	8002c8a <HAL_DMA_Abort_IT+0xa2>
 8002c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c82:	e002      	b.n	8002c8a <HAL_DMA_Abort_IT+0xa2>
 8002c84:	2310      	movs	r3, #16
 8002c86:	e000      	b.n	8002c8a <HAL_DMA_Abort_IT+0xa2>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_DMA_Abort_IT+0xe8>)
 8002c8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
    } 
  }
  return status;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40020008 	.word	0x40020008
 8002cbc:	4002001c 	.word	0x4002001c
 8002cc0:	40020030 	.word	0x40020030
 8002cc4:	40020044 	.word	0x40020044
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	4002006c 	.word	0x4002006c
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04f      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xc8>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d04a      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0204 	bic.w	r2, r2, #4
 8002d22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a66      	ldr	r2, [pc, #408]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d029      	beq.n	8002d82 <HAL_DMA_IRQHandler+0xae>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <HAL_DMA_IRQHandler+0xaa>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_DMA_IRQHandler+0x1f8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01a      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xa4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a62      	ldr	r2, [pc, #392]	; (8002ed0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d012      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x9e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <HAL_DMA_IRQHandler+0x200>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x98>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a5f      	ldr	r2, [pc, #380]	; (8002ed8 <HAL_DMA_IRQHandler+0x204>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d102      	bne.n	8002d66 <HAL_DMA_IRQHandler+0x92>
 8002d60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d64:	e00e      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d6a:	e00b      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d70:	e008      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d76:	e005      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7c:	e002      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d7e:	2340      	movs	r3, #64	; 0x40
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_IRQHandler+0xb0>
 8002d82:	2304      	movs	r3, #4
 8002d84:	4a55      	ldr	r2, [pc, #340]	; (8002edc <HAL_DMA_IRQHandler+0x208>)
 8002d86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8094 	beq.w	8002eba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	e08e      	b.n	8002eba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2202      	movs	r2, #2
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d056      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x186>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d051      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 020a 	bic.w	r2, r2, #10
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <HAL_DMA_IRQHandler+0x1f0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d029      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x166>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a37      	ldr	r2, [pc, #220]	; (8002ec8 <HAL_DMA_IRQHandler+0x1f4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x162>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <HAL_DMA_IRQHandler+0x1f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01a      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x15c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <HAL_DMA_IRQHandler+0x1fc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d012      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x156>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a32      	ldr	r2, [pc, #200]	; (8002ed4 <HAL_DMA_IRQHandler+0x200>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00a      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x150>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a31      	ldr	r2, [pc, #196]	; (8002ed8 <HAL_DMA_IRQHandler+0x204>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d102      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x14a>
 8002e18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e1c:	e00e      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	e00b      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e28:	e008      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2e:	e005      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e34:	e002      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e36:	2320      	movs	r3, #32
 8002e38:	e000      	b.n	8002e3c <HAL_DMA_IRQHandler+0x168>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_DMA_IRQHandler+0x208>)
 8002e3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d034      	beq.n	8002eba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e58:	e02f      	b.n	8002eba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2208      	movs	r2, #8
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d028      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x1e8>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020e 	bic.w	r2, r2, #14
 8002e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
    }
  }
  return;
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
}
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40020008 	.word	0x40020008
 8002ec8:	4002001c 	.word	0x4002001c
 8002ecc:	40020030 	.word	0x40020030
 8002ed0:	40020044 	.word	0x40020044
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	4002006c 	.word	0x4002006c
 8002edc:	40020000 	.word	0x40020000

08002ee0 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_DMA_RegisterCallback+0x20>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e031      	b.n	8002f64 <HAL_DMA_RegisterCallback+0x84>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d121      	bne.n	8002f56 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d81b      	bhi.n	8002f50 <HAL_DMA_RegisterCallback+0x70>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <HAL_DMA_RegisterCallback+0x40>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f39 	.word	0x08002f39
 8002f28:	08002f41 	.word	0x08002f41
 8002f2c:	08002f49 	.word	0x08002f49
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f36:	e010      	b.n	8002f5a <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8002f3e:	e00c      	b.n	8002f5a <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8002f46:	e008      	b.n	8002f5a <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8002f4e:	e004      	b.n	8002f5a <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8002f54:	e001      	b.n	8002f5a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	2101      	movs	r1, #1
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d108      	bne.n	8002fb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fae:	e007      	b.n	8002fc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
	...

08002fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b08b      	sub	sp, #44	; 0x2c
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fde:	e169      	b.n	80032b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 8158 	bne.w	80032ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a9a      	ldr	r2, [pc, #616]	; (800326c <HAL_GPIO_Init+0x2a0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d05e      	beq.n	80030c6 <HAL_GPIO_Init+0xfa>
 8003008:	4a98      	ldr	r2, [pc, #608]	; (800326c <HAL_GPIO_Init+0x2a0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d875      	bhi.n	80030fa <HAL_GPIO_Init+0x12e>
 800300e:	4a98      	ldr	r2, [pc, #608]	; (8003270 <HAL_GPIO_Init+0x2a4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d058      	beq.n	80030c6 <HAL_GPIO_Init+0xfa>
 8003014:	4a96      	ldr	r2, [pc, #600]	; (8003270 <HAL_GPIO_Init+0x2a4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d86f      	bhi.n	80030fa <HAL_GPIO_Init+0x12e>
 800301a:	4a96      	ldr	r2, [pc, #600]	; (8003274 <HAL_GPIO_Init+0x2a8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d052      	beq.n	80030c6 <HAL_GPIO_Init+0xfa>
 8003020:	4a94      	ldr	r2, [pc, #592]	; (8003274 <HAL_GPIO_Init+0x2a8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d869      	bhi.n	80030fa <HAL_GPIO_Init+0x12e>
 8003026:	4a94      	ldr	r2, [pc, #592]	; (8003278 <HAL_GPIO_Init+0x2ac>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d04c      	beq.n	80030c6 <HAL_GPIO_Init+0xfa>
 800302c:	4a92      	ldr	r2, [pc, #584]	; (8003278 <HAL_GPIO_Init+0x2ac>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d863      	bhi.n	80030fa <HAL_GPIO_Init+0x12e>
 8003032:	4a92      	ldr	r2, [pc, #584]	; (800327c <HAL_GPIO_Init+0x2b0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d046      	beq.n	80030c6 <HAL_GPIO_Init+0xfa>
 8003038:	4a90      	ldr	r2, [pc, #576]	; (800327c <HAL_GPIO_Init+0x2b0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d85d      	bhi.n	80030fa <HAL_GPIO_Init+0x12e>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d82a      	bhi.n	8003098 <HAL_GPIO_Init+0xcc>
 8003042:	2b12      	cmp	r3, #18
 8003044:	d859      	bhi.n	80030fa <HAL_GPIO_Init+0x12e>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <HAL_GPIO_Init+0x80>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	080030c7 	.word	0x080030c7
 8003050:	080030a1 	.word	0x080030a1
 8003054:	080030b3 	.word	0x080030b3
 8003058:	080030f5 	.word	0x080030f5
 800305c:	080030fb 	.word	0x080030fb
 8003060:	080030fb 	.word	0x080030fb
 8003064:	080030fb 	.word	0x080030fb
 8003068:	080030fb 	.word	0x080030fb
 800306c:	080030fb 	.word	0x080030fb
 8003070:	080030fb 	.word	0x080030fb
 8003074:	080030fb 	.word	0x080030fb
 8003078:	080030fb 	.word	0x080030fb
 800307c:	080030fb 	.word	0x080030fb
 8003080:	080030fb 	.word	0x080030fb
 8003084:	080030fb 	.word	0x080030fb
 8003088:	080030fb 	.word	0x080030fb
 800308c:	080030fb 	.word	0x080030fb
 8003090:	080030a9 	.word	0x080030a9
 8003094:	080030bd 	.word	0x080030bd
 8003098:	4a79      	ldr	r2, [pc, #484]	; (8003280 <HAL_GPIO_Init+0x2b4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309e:	e02c      	b.n	80030fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	623b      	str	r3, [r7, #32]
          break;
 80030a6:	e029      	b.n	80030fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	3304      	adds	r3, #4
 80030ae:	623b      	str	r3, [r7, #32]
          break;
 80030b0:	e024      	b.n	80030fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	3308      	adds	r3, #8
 80030b8:	623b      	str	r3, [r7, #32]
          break;
 80030ba:	e01f      	b.n	80030fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	330c      	adds	r3, #12
 80030c2:	623b      	str	r3, [r7, #32]
          break;
 80030c4:	e01a      	b.n	80030fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ce:	2304      	movs	r3, #4
 80030d0:	623b      	str	r3, [r7, #32]
          break;
 80030d2:	e013      	b.n	80030fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030dc:	2308      	movs	r3, #8
 80030de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	611a      	str	r2, [r3, #16]
          break;
 80030e6:	e009      	b.n	80030fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e8:	2308      	movs	r3, #8
 80030ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	615a      	str	r2, [r3, #20]
          break;
 80030f2:	e003      	b.n	80030fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f4:	2300      	movs	r3, #0
 80030f6:	623b      	str	r3, [r7, #32]
          break;
 80030f8:	e000      	b.n	80030fc <HAL_GPIO_Init+0x130>
          break;
 80030fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2bff      	cmp	r3, #255	; 0xff
 8003100:	d801      	bhi.n	8003106 <HAL_GPIO_Init+0x13a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	e001      	b.n	800310a <HAL_GPIO_Init+0x13e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2bff      	cmp	r3, #255	; 0xff
 8003110:	d802      	bhi.n	8003118 <HAL_GPIO_Init+0x14c>
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	e002      	b.n	800311e <HAL_GPIO_Init+0x152>
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	3b08      	subs	r3, #8
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	210f      	movs	r1, #15
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	401a      	ands	r2, r3
 8003130:	6a39      	ldr	r1, [r7, #32]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80b1 	beq.w	80032ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_GPIO_Init+0x2b8>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4a4c      	ldr	r2, [pc, #304]	; (8003284 <HAL_GPIO_Init+0x2b8>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6193      	str	r3, [r2, #24]
 8003158:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_GPIO_Init+0x2b8>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003164:	4a48      	ldr	r2, [pc, #288]	; (8003288 <HAL_GPIO_Init+0x2bc>)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003170:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	220f      	movs	r2, #15
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a40      	ldr	r2, [pc, #256]	; (800328c <HAL_GPIO_Init+0x2c0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <HAL_GPIO_Init+0x1ec>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3f      	ldr	r2, [pc, #252]	; (8003290 <HAL_GPIO_Init+0x2c4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00d      	beq.n	80031b4 <HAL_GPIO_Init+0x1e8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3e      	ldr	r2, [pc, #248]	; (8003294 <HAL_GPIO_Init+0x2c8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x1e4>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3d      	ldr	r2, [pc, #244]	; (8003298 <HAL_GPIO_Init+0x2cc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_GPIO_Init+0x1e0>
 80031a8:	2303      	movs	r3, #3
 80031aa:	e006      	b.n	80031ba <HAL_GPIO_Init+0x1ee>
 80031ac:	2304      	movs	r3, #4
 80031ae:	e004      	b.n	80031ba <HAL_GPIO_Init+0x1ee>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e002      	b.n	80031ba <HAL_GPIO_Init+0x1ee>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_GPIO_Init+0x1ee>
 80031b8:	2300      	movs	r3, #0
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	f002 0203 	and.w	r2, r2, #3
 80031c0:	0092      	lsls	r2, r2, #2
 80031c2:	4093      	lsls	r3, r2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ca:	492f      	ldr	r1, [pc, #188]	; (8003288 <HAL_GPIO_Init+0x2bc>)
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_GPIO_Init+0x2d0>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	492c      	ldr	r1, [pc, #176]	; (800329c <HAL_GPIO_Init+0x2d0>)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031f2:	4b2a      	ldr	r3, [pc, #168]	; (800329c <HAL_GPIO_Init+0x2d0>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	4928      	ldr	r1, [pc, #160]	; (800329c <HAL_GPIO_Init+0x2d0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800320c:	4b23      	ldr	r3, [pc, #140]	; (800329c <HAL_GPIO_Init+0x2d0>)
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4922      	ldr	r1, [pc, #136]	; (800329c <HAL_GPIO_Init+0x2d0>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800321a:	4b20      	ldr	r3, [pc, #128]	; (800329c <HAL_GPIO_Init+0x2d0>)
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	43db      	mvns	r3, r3
 8003222:	491e      	ldr	r1, [pc, #120]	; (800329c <HAL_GPIO_Init+0x2d0>)
 8003224:	4013      	ands	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_GPIO_Init+0x2d0>)
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	4918      	ldr	r1, [pc, #96]	; (800329c <HAL_GPIO_Init+0x2d0>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_GPIO_Init+0x2d0>)
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	43db      	mvns	r3, r3
 800324a:	4914      	ldr	r1, [pc, #80]	; (800329c <HAL_GPIO_Init+0x2d0>)
 800324c:	4013      	ands	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d021      	beq.n	80032a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_GPIO_Init+0x2d0>)
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_GPIO_Init+0x2d0>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	60cb      	str	r3, [r1, #12]
 8003268:	e021      	b.n	80032ae <HAL_GPIO_Init+0x2e2>
 800326a:	bf00      	nop
 800326c:	10320000 	.word	0x10320000
 8003270:	10310000 	.word	0x10310000
 8003274:	10220000 	.word	0x10220000
 8003278:	10210000 	.word	0x10210000
 800327c:	10120000 	.word	0x10120000
 8003280:	10110000 	.word	0x10110000
 8003284:	40021000 	.word	0x40021000
 8003288:	40010000 	.word	0x40010000
 800328c:	40010800 	.word	0x40010800
 8003290:	40010c00 	.word	0x40010c00
 8003294:	40011000 	.word	0x40011000
 8003298:	40011400 	.word	0x40011400
 800329c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_GPIO_Init+0x304>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	43db      	mvns	r3, r3
 80032a8:	4909      	ldr	r1, [pc, #36]	; (80032d0 <HAL_GPIO_Init+0x304>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f47f ae8e 	bne.w	8002fe0 <HAL_GPIO_Init+0x14>
  }
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	372c      	adds	r7, #44	; 0x2c
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	40010400 	.word	0x40010400

080032d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e001      	b.n	80032f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]
 800330e:	4613      	mov	r3, r2
 8003310:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003312:	787b      	ldrb	r3, [r7, #1]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003318:	887a      	ldrh	r2, [r7, #2]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800331e:	e003      	b.n	8003328 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	041a      	lsls	r2, r3, #16
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	611a      	str	r2, [r3, #16]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr

08003332 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	041a      	lsls	r2, r3, #16
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	43d9      	mvns	r1, r3
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	400b      	ands	r3, r1
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	611a      	str	r2, [r3, #16]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e272      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8087 	beq.w	8003492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b04      	cmp	r3, #4
 800338e:	d00c      	beq.n	80033aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003390:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
 8003398:	2b08      	cmp	r3, #8
 800339a:	d112      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5e>
 800339c:	4b8c      	ldr	r3, [pc, #560]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d10b      	bne.n	80033c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033aa:	4b89      	ldr	r3, [pc, #548]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d06c      	beq.n	8003490 <HAL_RCC_OscConfig+0x12c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d168      	bne.n	8003490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e24c      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x76>
 80033cc:	4b80      	ldr	r3, [pc, #512]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7f      	ldr	r2, [pc, #508]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e02e      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b78      	ldr	r3, [pc, #480]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a77      	ldr	r2, [pc, #476]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0xbc>
 8003406:	4b72      	ldr	r3, [pc, #456]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b6f      	ldr	r3, [pc, #444]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xd4>
 8003420:	4b6b      	ldr	r3, [pc, #428]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7ff f9a2 	bl	8002788 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003448:	f7ff f99e 	bl	8002788 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e200      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xe4>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7ff f98e 	bl	8002788 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003470:	f7ff f98a 	bl	8002788 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1ec      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b53      	ldr	r3, [pc, #332]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x10c>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800349e:	4b4c      	ldr	r3, [pc, #304]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034aa:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x18c>
 80034b6:	4b46      	ldr	r3, [pc, #280]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x176>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1c0      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4939      	ldr	r1, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCC_OscConfig+0x270>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7ff f943 	bl	8002788 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003506:	f7ff f93f 	bl	8002788 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1a1      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4927      	ldr	r1, [pc, #156]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCC_OscConfig+0x270>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7ff f922 	bl	8002788 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003548:	f7ff f91e 	bl	8002788 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e180      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d03a      	beq.n	80035e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d019      	beq.n	80035ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7ff f902 	bl	8002788 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7ff f8fe 	bl	8002788 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e160      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_RCC_OscConfig+0x26c>)
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f000 faa6 	bl	8003af8 <RCC_Delay>
 80035ac:	e01c      	b.n	80035e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7ff f8e8 	bl	8002788 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ba:	e00f      	b.n	80035dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7ff f8e4 	bl	8002788 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d908      	bls.n	80035dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e146      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
 80035ce:	bf00      	nop
 80035d0:	40021000 	.word	0x40021000
 80035d4:	42420000 	.word	0x42420000
 80035d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b92      	ldr	r3, [pc, #584]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e9      	bne.n	80035bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a6 	beq.w	8003742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10d      	bne.n	8003622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b82      	ldr	r3, [pc, #520]	; (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b7f      	ldr	r3, [pc, #508]	; (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7e      	ldr	r2, [pc, #504]	; (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7ff f8a5 	bl	8002788 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7ff f8a1 	bl	8002788 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e103      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b75      	ldr	r3, [pc, #468]	; (800382c <HAL_RCC_OscConfig+0x4c8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x312>
 8003668:	4b6f      	ldr	r3, [pc, #444]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	4a6e      	ldr	r2, [pc, #440]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6213      	str	r3, [r2, #32]
 8003674:	e02d      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x334>
 800367e:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a69      	ldr	r2, [pc, #420]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	4b67      	ldr	r3, [pc, #412]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a66      	ldr	r2, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	e01c      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x356>
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a60      	ldr	r2, [pc, #384]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a5d      	ldr	r2, [pc, #372]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]
 80036b8:	e00b      	b.n	80036d2 <HAL_RCC_OscConfig+0x36e>
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a5a      	ldr	r2, [pc, #360]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6213      	str	r3, [r2, #32]
 80036c6:	4b58      	ldr	r3, [pc, #352]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d015      	beq.n	8003706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036da:	f7ff f855 	bl	8002788 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7ff f851 	bl	8002788 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0b1      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ee      	beq.n	80036e2 <HAL_RCC_OscConfig+0x37e>
 8003704:	e014      	b.n	8003730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7ff f83f 	bl	8002788 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7ff f83b 	bl	8002788 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e09b      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	4b40      	ldr	r3, [pc, #256]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b3c      	ldr	r3, [pc, #240]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8087 	beq.w	800385a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	4b36      	ldr	r3, [pc, #216]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d061      	beq.n	800381c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d146      	bne.n	80037ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b33      	ldr	r3, [pc, #204]	; (8003830 <HAL_RCC_OscConfig+0x4cc>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7ff f80f 	bl	8002788 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7ff f80b 	bl	8002788 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e06d      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	4b29      	ldr	r3, [pc, #164]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4921      	ldr	r1, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a19      	ldr	r1, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	430b      	orrs	r3, r1
 80037ba:	491b      	ldr	r1, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe ffdf 	bl	8002788 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe ffdb 	bl	8002788 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e03d      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x46a>
 80037ec:	e035      	b.n	800385a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_RCC_OscConfig+0x4cc>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe ffc8 	bl	8002788 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe ffc4 	bl	8002788 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e026      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x498>
 800381a:	e01e      	b.n	800385a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e019      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_OscConfig+0x500>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	429a      	cmp	r2, r3
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000

08003868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d0      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d910      	bls.n	80038ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 0207 	bic.w	r2, r3, #7
 8003892:	4965      	ldr	r1, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d040      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e073      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4936      	ldr	r1, [pc, #216]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fe ff16 	bl	8002788 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe ff12 	bl	8002788 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e053      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d210      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0207 	bic.w	r2, r3, #7
 800399e:	4922      	ldr	r1, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	490a      	ldr	r1, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	5ccb      	ldrb	r3, [r1, r3]
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1cc>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fe74 	bl	8002704 <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	0800b554 	.word	0x0800b554
 8003a34:	20000048 	.word	0x20000048
 8003a38:	20000210 	.word	0x20000210

08003a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b490      	push	{r4, r7}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a42:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a44:	1d3c      	adds	r4, r7, #4
 8003a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a4c:	f240 2301 	movw	r3, #513	; 0x201
 8003a50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x40>
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x46>
 8003a7a:	e02b      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a7c:	4b1c      	ldr	r3, [pc, #112]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a7e:	623b      	str	r3, [r7, #32]
      break;
 8003a80:	e02b      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	0c9b      	lsrs	r3, r3, #18
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3328      	adds	r3, #40	; 0x28
 8003a8c:	443b      	add	r3, r7
 8003a8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d012      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	0c5b      	lsrs	r3, r3, #17
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	3328      	adds	r3, #40	; 0x28
 8003aaa:	443b      	add	r3, r7
 8003aac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ab0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab6:	fb03 f202 	mul.w	r2, r3, r2
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac2:	e004      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4a0b      	ldr	r2, [pc, #44]	; (8003af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	623b      	str	r3, [r7, #32]
      break;
 8003ad2:	e002      	b.n	8003ada <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ad6:	623b      	str	r3, [r7, #32]
      break;
 8003ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ada:	6a3b      	ldr	r3, [r7, #32]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3728      	adds	r7, #40	; 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc90      	pop	{r4, r7}
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	08006210 	.word	0x08006210
 8003aec:	40021000 	.word	0x40021000
 8003af0:	007a1200 	.word	0x007a1200
 8003af4:	003d0900 	.word	0x003d0900

08003af8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <RCC_Delay+0x34>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <RCC_Delay+0x38>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0a5b      	lsrs	r3, r3, #9
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b14:	bf00      	nop
  }
  while (Delay --);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1e5a      	subs	r2, r3, #1
 8003b1a:	60fa      	str	r2, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f9      	bne.n	8003b14 <RCC_Delay+0x1c>
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000048 	.word	0x20000048
 8003b30:	10624dd3 	.word	0x10624dd3

08003b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e041      	b.n	8003bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd f9b2 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f000 fcb4 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d001      	beq.n	8003bec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e032      	b.n	8003c52 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_TIM_Base_Start+0x88>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00e      	beq.n	8003c1c <HAL_TIM_Base_Start+0x48>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d009      	beq.n	8003c1c <HAL_TIM_Base_Start+0x48>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <HAL_TIM_Base_Start+0x8c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <HAL_TIM_Base_Start+0x48>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a13      	ldr	r2, [pc, #76]	; (8003c64 <HAL_TIM_Base_Start+0x90>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d010      	beq.n	8003c50 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0201 	orr.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	e007      	b.n	8003c50 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800

08003c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e03a      	b.n	8003cf6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <HAL_TIM_Base_Start_IT+0x98>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00e      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x58>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003caa:	d009      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x58>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x58>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d111      	bne.n	8003ce4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d010      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	e007      	b.n	8003cf4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800

08003d0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e041      	b.n	8003da2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f839 	bl	8003daa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f000 fbc8 	bl	80044e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <HAL_TIM_PWM_Start+0x24>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e022      	b.n	8003e26 <HAL_TIM_PWM_Start+0x6a>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d109      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x3e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	bf14      	ite	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	2300      	moveq	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	e015      	b.n	8003e26 <HAL_TIM_PWM_Start+0x6a>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d109      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x58>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e008      	b.n	8003e26 <HAL_TIM_PWM_Start+0x6a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e05e      	b.n	8003eec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x82>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_PWM_Start+0xaa>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0x92>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	e00b      	b.n	8003e66 <HAL_TIM_PWM_Start+0xaa>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xa2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	e003      	b.n	8003e66 <HAL_TIM_PWM_Start+0xaa>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fe44 	bl	8004afc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_TIM_PWM_Start+0x138>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <HAL_TIM_PWM_Start+0x138>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00e      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0xfa>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d009      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0xfa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIM_PWM_Start+0x13c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d004      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0xfa>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a12      	ldr	r2, [pc, #72]	; (8003efc <HAL_TIM_PWM_Start+0x140>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d111      	bne.n	8003eda <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d010      	beq.n	8003eea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	e007      	b.n	8003eea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0201 	orr.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800

08003f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d122      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d11b      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0202 	mvn.w	r2, #2
 8003f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fab1 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 faa4 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fab3 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0204 	mvn.w	r2, #4
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2202      	movs	r2, #2
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa87 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa7a 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fa89 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d122      	bne.n	8004004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0208 	mvn.w	r2, #8
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2204      	movs	r2, #4
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa5d 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa50 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa5f 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b10      	cmp	r3, #16
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b10      	cmp	r3, #16
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0210 	mvn.w	r2, #16
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2208      	movs	r2, #8
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa33 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa26 	bl	8004498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fa35 	bl	80044bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0201 	mvn.w	r2, #1
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc f908 	bl	8000294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408e:	2b80      	cmp	r3, #128	; 0x80
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fe02 	bl	8004cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9f9 	bl	80044ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0220 	mvn.w	r2, #32
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fdcd 	bl	8004ca2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004126:	2302      	movs	r3, #2
 8004128:	e0ac      	b.n	8004284 <HAL_TIM_PWM_ConfigChannel+0x174>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b0c      	cmp	r3, #12
 8004136:	f200 809f 	bhi.w	8004278 <HAL_TIM_PWM_ConfigChannel+0x168>
 800413a:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004175 	.word	0x08004175
 8004144:	08004279 	.word	0x08004279
 8004148:	08004279 	.word	0x08004279
 800414c:	08004279 	.word	0x08004279
 8004150:	080041b5 	.word	0x080041b5
 8004154:	08004279 	.word	0x08004279
 8004158:	08004279 	.word	0x08004279
 800415c:	08004279 	.word	0x08004279
 8004160:	080041f7 	.word	0x080041f7
 8004164:	08004279 	.word	0x08004279
 8004168:	08004279 	.word	0x08004279
 800416c:	08004279 	.word	0x08004279
 8004170:	08004237 	.word	0x08004237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fa12 	bl	80045a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0208 	orr.w	r2, r2, #8
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0204 	bic.w	r2, r2, #4
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	619a      	str	r2, [r3, #24]
      break;
 80041b2:	e062      	b.n	800427a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fa58 	bl	8004670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6999      	ldr	r1, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	021a      	lsls	r2, r3, #8
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	619a      	str	r2, [r3, #24]
      break;
 80041f4:	e041      	b.n	800427a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 faa1 	bl	8004744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0208 	orr.w	r2, r2, #8
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0204 	bic.w	r2, r2, #4
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	61da      	str	r2, [r3, #28]
      break;
 8004234:	e021      	b.n	800427a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 faeb 	bl	8004818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	021a      	lsls	r2, r3, #8
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	61da      	str	r2, [r3, #28]
      break;
 8004276:	e000      	b.n	800427a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_ConfigClockSource+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e0b3      	b.n	800440c <HAL_TIM_ConfigClockSource+0x180>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042dc:	d03e      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xd0>
 80042de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e2:	f200 8087 	bhi.w	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 80042e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ea:	f000 8085 	beq.w	80043f8 <HAL_TIM_ConfigClockSource+0x16c>
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d87f      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 80042f4:	2b70      	cmp	r3, #112	; 0x70
 80042f6:	d01a      	beq.n	800432e <HAL_TIM_ConfigClockSource+0xa2>
 80042f8:	2b70      	cmp	r3, #112	; 0x70
 80042fa:	d87b      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 80042fc:	2b60      	cmp	r3, #96	; 0x60
 80042fe:	d050      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0x116>
 8004300:	2b60      	cmp	r3, #96	; 0x60
 8004302:	d877      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 8004304:	2b50      	cmp	r3, #80	; 0x50
 8004306:	d03c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0xf6>
 8004308:	2b50      	cmp	r3, #80	; 0x50
 800430a:	d873      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 800430c:	2b40      	cmp	r3, #64	; 0x40
 800430e:	d058      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x136>
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d86f      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 8004314:	2b30      	cmp	r3, #48	; 0x30
 8004316:	d064      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x156>
 8004318:	2b30      	cmp	r3, #48	; 0x30
 800431a:	d86b      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 800431c:	2b20      	cmp	r3, #32
 800431e:	d060      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x156>
 8004320:	2b20      	cmp	r3, #32
 8004322:	d867      	bhi.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05c      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x156>
 8004328:	2b10      	cmp	r3, #16
 800432a:	d05a      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800432c:	e062      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f000 fbbe 	bl	8004abe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004350:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	609a      	str	r2, [r3, #8]
      break;
 800435a:	e04e      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f000 fba7 	bl	8004abe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437e:	609a      	str	r2, [r3, #8]
      break;
 8004380:	e03b      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	461a      	mov	r2, r3
 8004390:	f000 fb1e 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2150      	movs	r1, #80	; 0x50
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fb75 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80043a0:	e02b      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6859      	ldr	r1, [r3, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f000 fb3c 	bl	8004a2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2160      	movs	r1, #96	; 0x60
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fb65 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80043c0:	e01b      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f000 fafe 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2140      	movs	r1, #64	; 0x40
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fb55 	bl	8004a8a <TIM_ITRx_SetConfig>
      break;
 80043e0:	e00b      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f000 fb4c 	bl	8004a8a <TIM_ITRx_SetConfig>
        break;
 80043f2:	e002      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80043f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e031      	b.n	8004490 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa38 	bl	80048b4 <TIM_SlaveTimer_SetConfig>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e018      	b.n	8004490 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800447c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a29      	ldr	r2, [pc, #164]	; (8004598 <TIM_Base_SetConfig+0xb8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a26      	ldr	r2, [pc, #152]	; (800459c <TIM_Base_SetConfig+0xbc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x30>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <TIM_Base_SetConfig+0xc0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a1c      	ldr	r2, [pc, #112]	; (8004598 <TIM_Base_SetConfig+0xb8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <TIM_Base_SetConfig+0xbc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x62>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <TIM_Base_SetConfig+0xc0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a07      	ldr	r2, [pc, #28]	; (8004598 <TIM_Base_SetConfig+0xb8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d103      	bne.n	8004588 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	615a      	str	r2, [r3, #20]
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800

080045a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0201 	bic.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0303 	bic.w	r3, r3, #3
 80045da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 0302 	bic.w	r3, r3, #2
 80045ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <TIM_OC1_SetConfig+0xc8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d10c      	bne.n	800461a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f023 0308 	bic.w	r3, r3, #8
 8004606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 0304 	bic.w	r3, r3, #4
 8004618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a13      	ldr	r2, [pc, #76]	; (800466c <TIM_OC1_SetConfig+0xc8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d111      	bne.n	8004646 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00

08004670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0210 	bic.w	r2, r3, #16
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0320 	bic.w	r3, r3, #32
 80046ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <TIM_OC2_SetConfig+0xd0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10d      	bne.n	80046ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a14      	ldr	r2, [pc, #80]	; (8004740 <TIM_OC2_SetConfig+0xd0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d113      	bne.n	800471c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00

08004744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <TIM_OC3_SetConfig+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10d      	bne.n	80047be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	021b      	lsls	r3, r3, #8
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a14      	ldr	r2, [pc, #80]	; (8004814 <TIM_OC3_SetConfig+0xd0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d113      	bne.n	80047ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	621a      	str	r2, [r3, #32]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40012c00 	.word	0x40012c00

08004818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	031b      	lsls	r3, r3, #12
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <TIM_OC4_SetConfig+0x98>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d109      	bne.n	800488c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	019b      	lsls	r3, r3, #6
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40012c00 	.word	0x40012c00

080048b4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b70      	cmp	r3, #112	; 0x70
 80048f8:	d01a      	beq.n	8004930 <TIM_SlaveTimer_SetConfig+0x7c>
 80048fa:	2b70      	cmp	r3, #112	; 0x70
 80048fc:	d860      	bhi.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
 80048fe:	2b60      	cmp	r3, #96	; 0x60
 8004900:	d054      	beq.n	80049ac <TIM_SlaveTimer_SetConfig+0xf8>
 8004902:	2b60      	cmp	r3, #96	; 0x60
 8004904:	d85c      	bhi.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8004906:	2b50      	cmp	r3, #80	; 0x50
 8004908:	d046      	beq.n	8004998 <TIM_SlaveTimer_SetConfig+0xe4>
 800490a:	2b50      	cmp	r3, #80	; 0x50
 800490c:	d858      	bhi.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d019      	beq.n	8004946 <TIM_SlaveTimer_SetConfig+0x92>
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d854      	bhi.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d054      	beq.n	80049c4 <TIM_SlaveTimer_SetConfig+0x110>
 800491a:	2b30      	cmp	r3, #48	; 0x30
 800491c:	d850      	bhi.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
 800491e:	2b20      	cmp	r3, #32
 8004920:	d050      	beq.n	80049c4 <TIM_SlaveTimer_SetConfig+0x110>
 8004922:	2b20      	cmp	r3, #32
 8004924:	d84c      	bhi.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d04c      	beq.n	80049c4 <TIM_SlaveTimer_SetConfig+0x110>
 800492a:	2b10      	cmp	r3, #16
 800492c:	d04a      	beq.n	80049c4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800492e:	e047      	b.n	80049c0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f000 f8bd 	bl	8004abe <TIM_ETR_SetConfig>
      break;
 8004944:	e03f      	b.n	80049c6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d101      	bne.n	8004952 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e03a      	b.n	80049c8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004978:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	621a      	str	r2, [r3, #32]
      break;
 8004996:	e016      	b.n	80049c6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6899      	ldr	r1, [r3, #8]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	461a      	mov	r2, r3
 80049a6:	f000 f813 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      break;
 80049aa:	e00c      	b.n	80049c6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6899      	ldr	r1, [r3, #8]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f000 f837 	bl	8004a2c <TIM_TI2_ConfigInputStage>
      break;
 80049be:	e002      	b.n	80049c6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80049c4:	bf00      	nop
  }
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 030a 	bic.w	r3, r3, #10
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 0210 	bic.w	r2, r3, #16
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	031b      	lsls	r3, r3, #12
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f043 0307 	orr.w	r3, r3, #7
 8004aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	021a      	lsls	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	609a      	str	r2, [r3, #8]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr

08004afc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	401a      	ands	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1a      	ldr	r2, [r3, #32]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	fa01 f303 	lsl.w	r3, r1, r3
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e046      	b.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d009      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800

08004c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e03d      	b.n	8004c98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr
	...

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	; (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000218 	.word	0x20000218

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	4d0c      	ldr	r5, [pc, #48]	; (8004d0c <__libc_init_array+0x38>)
 8004cda:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cdc:	1b64      	subs	r4, r4, r5
 8004cde:	10a4      	asrs	r4, r4, #2
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	f001 fa6a 	bl	80061bc <_init>
 8004ce8:	2600      	movs	r6, #0
 8004cea:	4d0a      	ldr	r5, [pc, #40]	; (8004d14 <__libc_init_array+0x40>)
 8004cec:	4c0a      	ldr	r4, [pc, #40]	; (8004d18 <__libc_init_array+0x44>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	0800be18 	.word	0x0800be18
 8004d10:	0800be18 	.word	0x0800be18
 8004d14:	0800be18 	.word	0x0800be18
 8004d18:	0800be1c 	.word	0x0800be1c

08004d1c <memcpy>:
 8004d1c:	440a      	add	r2, r1
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d24:	d100      	bne.n	8004d28 <memcpy+0xc>
 8004d26:	4770      	bx	lr
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d2e:	4291      	cmp	r1, r2
 8004d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d34:	d1f9      	bne.n	8004d2a <memcpy+0xe>
 8004d36:	bd10      	pop	{r4, pc}

08004d38 <memset>:
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4402      	add	r2, r0
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	f803 1b01 	strb.w	r1, [r3], #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <srand>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <srand+0x44>)
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	681d      	ldr	r5, [r3, #0]
 8004d50:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d52:	b9b3      	cbnz	r3, 8004d82 <srand+0x3a>
 8004d54:	2018      	movs	r0, #24
 8004d56:	f000 f8b3 	bl	8004ec0 <malloc>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	63a8      	str	r0, [r5, #56]	; 0x38
 8004d5e:	b920      	cbnz	r0, 8004d6a <srand+0x22>
 8004d60:	2142      	movs	r1, #66	; 0x42
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <srand+0x48>)
 8004d64:	480b      	ldr	r0, [pc, #44]	; (8004d94 <srand+0x4c>)
 8004d66:	f000 f87b 	bl	8004e60 <__assert_func>
 8004d6a:	490b      	ldr	r1, [pc, #44]	; (8004d98 <srand+0x50>)
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <srand+0x54>)
 8004d6e:	e9c0 1300 	strd	r1, r3, [r0]
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <srand+0x58>)
 8004d74:	2100      	movs	r1, #0
 8004d76:	6083      	str	r3, [r0, #8]
 8004d78:	230b      	movs	r3, #11
 8004d7a:	8183      	strh	r3, [r0, #12]
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004d82:	2200      	movs	r2, #0
 8004d84:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d86:	611c      	str	r4, [r3, #16]
 8004d88:	615a      	str	r2, [r3, #20]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	20000218 	.word	0x20000218
 8004d90:	0800bcd4 	.word	0x0800bcd4
 8004d94:	0800bceb 	.word	0x0800bceb
 8004d98:	abcd330e 	.word	0xabcd330e
 8004d9c:	e66d1234 	.word	0xe66d1234
 8004da0:	0005deec 	.word	0x0005deec

08004da4 <rand>:
 8004da4:	4b16      	ldr	r3, [pc, #88]	; (8004e00 <rand+0x5c>)
 8004da6:	b510      	push	{r4, lr}
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dac:	b9b3      	cbnz	r3, 8004ddc <rand+0x38>
 8004dae:	2018      	movs	r0, #24
 8004db0:	f000 f886 	bl	8004ec0 <malloc>
 8004db4:	4602      	mov	r2, r0
 8004db6:	63a0      	str	r0, [r4, #56]	; 0x38
 8004db8:	b920      	cbnz	r0, 8004dc4 <rand+0x20>
 8004dba:	214e      	movs	r1, #78	; 0x4e
 8004dbc:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <rand+0x60>)
 8004dbe:	4812      	ldr	r0, [pc, #72]	; (8004e08 <rand+0x64>)
 8004dc0:	f000 f84e 	bl	8004e60 <__assert_func>
 8004dc4:	4911      	ldr	r1, [pc, #68]	; (8004e0c <rand+0x68>)
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <rand+0x6c>)
 8004dc8:	e9c0 1300 	strd	r1, r3, [r0]
 8004dcc:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <rand+0x70>)
 8004dce:	2100      	movs	r1, #0
 8004dd0:	6083      	str	r3, [r0, #8]
 8004dd2:	230b      	movs	r3, #11
 8004dd4:	8183      	strh	r3, [r0, #12]
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ddc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004dde:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <rand+0x74>)
 8004de0:	6920      	ldr	r0, [r4, #16]
 8004de2:	6963      	ldr	r3, [r4, #20]
 8004de4:	4342      	muls	r2, r0
 8004de6:	490d      	ldr	r1, [pc, #52]	; (8004e1c <rand+0x78>)
 8004de8:	fb01 2203 	mla	r2, r1, r3, r2
 8004dec:	fba0 0101 	umull	r0, r1, r0, r1
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	eb42 0001 	adc.w	r0, r2, r1
 8004df6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004dfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004dfe:	bd10      	pop	{r4, pc}
 8004e00:	20000218 	.word	0x20000218
 8004e04:	0800bcd4 	.word	0x0800bcd4
 8004e08:	0800bceb 	.word	0x0800bceb
 8004e0c:	abcd330e 	.word	0xabcd330e
 8004e10:	e66d1234 	.word	0xe66d1234
 8004e14:	0005deec 	.word	0x0005deec
 8004e18:	5851f42d 	.word	0x5851f42d
 8004e1c:	4c957f2d 	.word	0x4c957f2d

08004e20 <siprintf>:
 8004e20:	b40e      	push	{r1, r2, r3}
 8004e22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e26:	b500      	push	{lr}
 8004e28:	b09c      	sub	sp, #112	; 0x70
 8004e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e2c:	9002      	str	r0, [sp, #8]
 8004e2e:	9006      	str	r0, [sp, #24]
 8004e30:	9107      	str	r1, [sp, #28]
 8004e32:	9104      	str	r1, [sp, #16]
 8004e34:	4808      	ldr	r0, [pc, #32]	; (8004e58 <siprintf+0x38>)
 8004e36:	4909      	ldr	r1, [pc, #36]	; (8004e5c <siprintf+0x3c>)
 8004e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e3c:	9105      	str	r1, [sp, #20]
 8004e3e:	6800      	ldr	r0, [r0, #0]
 8004e40:	a902      	add	r1, sp, #8
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	f000 f97c 	bl	8005140 <_svfiprintf_r>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	9b02      	ldr	r3, [sp, #8]
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	b01c      	add	sp, #112	; 0x70
 8004e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e54:	b003      	add	sp, #12
 8004e56:	4770      	bx	lr
 8004e58:	20000218 	.word	0x20000218
 8004e5c:	ffff0208 	.word	0xffff0208

08004e60 <__assert_func>:
 8004e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e62:	4614      	mov	r4, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <__assert_func+0x2c>)
 8004e68:	4605      	mov	r5, r0
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68d8      	ldr	r0, [r3, #12]
 8004e6e:	b14c      	cbz	r4, 8004e84 <__assert_func+0x24>
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <__assert_func+0x30>)
 8004e72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e76:	9100      	str	r1, [sp, #0]
 8004e78:	462b      	mov	r3, r5
 8004e7a:	4906      	ldr	r1, [pc, #24]	; (8004e94 <__assert_func+0x34>)
 8004e7c:	f000 f80e 	bl	8004e9c <fiprintf>
 8004e80:	f000 fe1c 	bl	8005abc <abort>
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <__assert_func+0x38>)
 8004e86:	461c      	mov	r4, r3
 8004e88:	e7f3      	b.n	8004e72 <__assert_func+0x12>
 8004e8a:	bf00      	nop
 8004e8c:	20000218 	.word	0x20000218
 8004e90:	0800bd46 	.word	0x0800bd46
 8004e94:	0800bd53 	.word	0x0800bd53
 8004e98:	0800bd81 	.word	0x0800bd81

08004e9c <fiprintf>:
 8004e9c:	b40e      	push	{r1, r2, r3}
 8004e9e:	b503      	push	{r0, r1, lr}
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	ab03      	add	r3, sp, #12
 8004ea4:	4805      	ldr	r0, [pc, #20]	; (8004ebc <fiprintf+0x20>)
 8004ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	9301      	str	r3, [sp, #4]
 8004eae:	f000 fa6f 	bl	8005390 <_vfiprintf_r>
 8004eb2:	b002      	add	sp, #8
 8004eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb8:	b003      	add	sp, #12
 8004eba:	4770      	bx	lr
 8004ebc:	20000218 	.word	0x20000218

08004ec0 <malloc>:
 8004ec0:	4b02      	ldr	r3, [pc, #8]	; (8004ecc <malloc+0xc>)
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f000 b86b 	b.w	8004fa0 <_malloc_r>
 8004eca:	bf00      	nop
 8004ecc:	20000218 	.word	0x20000218

08004ed0 <_free_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d040      	beq.n	8004f5a <_free_r+0x8a>
 8004ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004edc:	1f0c      	subs	r4, r1, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bfb8      	it	lt
 8004ee2:	18e4      	addlt	r4, r4, r3
 8004ee4:	f001 f836 	bl	8005f54 <__malloc_lock>
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <_free_r+0x8c>)
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	b933      	cbnz	r3, 8004efc <_free_r+0x2c>
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ef8:	f001 b832 	b.w	8005f60 <__malloc_unlock>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d908      	bls.n	8004f12 <_free_r+0x42>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	1821      	adds	r1, r4, r0
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf01      	itttt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	1809      	addeq	r1, r1, r0
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	e7ed      	b.n	8004eee <_free_r+0x1e>
 8004f12:	461a      	mov	r2, r3
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b10b      	cbz	r3, 8004f1c <_free_r+0x4c>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d9fa      	bls.n	8004f12 <_free_r+0x42>
 8004f1c:	6811      	ldr	r1, [r2, #0]
 8004f1e:	1850      	adds	r0, r2, r1
 8004f20:	42a0      	cmp	r0, r4
 8004f22:	d10b      	bne.n	8004f3c <_free_r+0x6c>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	4401      	add	r1, r0
 8004f28:	1850      	adds	r0, r2, r1
 8004f2a:	4283      	cmp	r3, r0
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	d1e0      	bne.n	8004ef2 <_free_r+0x22>
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4401      	add	r1, r0
 8004f36:	6011      	str	r1, [r2, #0]
 8004f38:	6053      	str	r3, [r2, #4]
 8004f3a:	e7da      	b.n	8004ef2 <_free_r+0x22>
 8004f3c:	d902      	bls.n	8004f44 <_free_r+0x74>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	e7d6      	b.n	8004ef2 <_free_r+0x22>
 8004f44:	6820      	ldr	r0, [r4, #0]
 8004f46:	1821      	adds	r1, r4, r0
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf01      	itttt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	1809      	addeq	r1, r1, r0
 8004f52:	6021      	streq	r1, [r4, #0]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	6054      	str	r4, [r2, #4]
 8004f58:	e7cb      	b.n	8004ef2 <_free_r+0x22>
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20002f6c 	.word	0x20002f6c

08004f60 <sbrk_aligned>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4e0e      	ldr	r6, [pc, #56]	; (8004f9c <sbrk_aligned+0x3c>)
 8004f64:	460c      	mov	r4, r1
 8004f66:	6831      	ldr	r1, [r6, #0]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	b911      	cbnz	r1, 8004f72 <sbrk_aligned+0x12>
 8004f6c:	f000 fcd6 	bl	800591c <_sbrk_r>
 8004f70:	6030      	str	r0, [r6, #0]
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 fcd1 	bl	800591c <_sbrk_r>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d00a      	beq.n	8004f94 <sbrk_aligned+0x34>
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d007      	beq.n	8004f98 <sbrk_aligned+0x38>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fcc6 	bl	800591c <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d101      	bne.n	8004f98 <sbrk_aligned+0x38>
 8004f94:	f04f 34ff 	mov.w	r4, #4294967295
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	20002f70 	.word	0x20002f70

08004fa0 <_malloc_r>:
 8004fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa4:	1ccd      	adds	r5, r1, #3
 8004fa6:	f025 0503 	bic.w	r5, r5, #3
 8004faa:	3508      	adds	r5, #8
 8004fac:	2d0c      	cmp	r5, #12
 8004fae:	bf38      	it	cc
 8004fb0:	250c      	movcc	r5, #12
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	db01      	blt.n	8004fbc <_malloc_r+0x1c>
 8004fb8:	42a9      	cmp	r1, r5
 8004fba:	d905      	bls.n	8004fc8 <_malloc_r+0x28>
 8004fbc:	230c      	movs	r3, #12
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc8:	4e2e      	ldr	r6, [pc, #184]	; (8005084 <_malloc_r+0xe4>)
 8004fca:	f000 ffc3 	bl	8005f54 <__malloc_lock>
 8004fce:	6833      	ldr	r3, [r6, #0]
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	bb34      	cbnz	r4, 8005022 <_malloc_r+0x82>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ffc2 	bl	8004f60 <sbrk_aligned>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	4604      	mov	r4, r0
 8004fe0:	d14d      	bne.n	800507e <_malloc_r+0xde>
 8004fe2:	6834      	ldr	r4, [r6, #0]
 8004fe4:	4626      	mov	r6, r4
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d140      	bne.n	800506c <_malloc_r+0xcc>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	4631      	mov	r1, r6
 8004fee:	4638      	mov	r0, r7
 8004ff0:	eb04 0803 	add.w	r8, r4, r3
 8004ff4:	f000 fc92 	bl	800591c <_sbrk_r>
 8004ff8:	4580      	cmp	r8, r0
 8004ffa:	d13a      	bne.n	8005072 <_malloc_r+0xd2>
 8004ffc:	6821      	ldr	r1, [r4, #0]
 8004ffe:	3503      	adds	r5, #3
 8005000:	1a6d      	subs	r5, r5, r1
 8005002:	f025 0503 	bic.w	r5, r5, #3
 8005006:	3508      	adds	r5, #8
 8005008:	2d0c      	cmp	r5, #12
 800500a:	bf38      	it	cc
 800500c:	250c      	movcc	r5, #12
 800500e:	4638      	mov	r0, r7
 8005010:	4629      	mov	r1, r5
 8005012:	f7ff ffa5 	bl	8004f60 <sbrk_aligned>
 8005016:	3001      	adds	r0, #1
 8005018:	d02b      	beq.n	8005072 <_malloc_r+0xd2>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	442b      	add	r3, r5
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	e00e      	b.n	8005040 <_malloc_r+0xa0>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	1b52      	subs	r2, r2, r5
 8005026:	d41e      	bmi.n	8005066 <_malloc_r+0xc6>
 8005028:	2a0b      	cmp	r2, #11
 800502a:	d916      	bls.n	800505a <_malloc_r+0xba>
 800502c:	1961      	adds	r1, r4, r5
 800502e:	42a3      	cmp	r3, r4
 8005030:	6025      	str	r5, [r4, #0]
 8005032:	bf18      	it	ne
 8005034:	6059      	strne	r1, [r3, #4]
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	bf08      	it	eq
 800503a:	6031      	streq	r1, [r6, #0]
 800503c:	5162      	str	r2, [r4, r5]
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	4638      	mov	r0, r7
 8005042:	f104 060b 	add.w	r6, r4, #11
 8005046:	f000 ff8b 	bl	8005f60 <__malloc_unlock>
 800504a:	f026 0607 	bic.w	r6, r6, #7
 800504e:	1d23      	adds	r3, r4, #4
 8005050:	1af2      	subs	r2, r6, r3
 8005052:	d0b6      	beq.n	8004fc2 <_malloc_r+0x22>
 8005054:	1b9b      	subs	r3, r3, r6
 8005056:	50a3      	str	r3, [r4, r2]
 8005058:	e7b3      	b.n	8004fc2 <_malloc_r+0x22>
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	bf0c      	ite	eq
 8005060:	6032      	streq	r2, [r6, #0]
 8005062:	605a      	strne	r2, [r3, #4]
 8005064:	e7ec      	b.n	8005040 <_malloc_r+0xa0>
 8005066:	4623      	mov	r3, r4
 8005068:	6864      	ldr	r4, [r4, #4]
 800506a:	e7b2      	b.n	8004fd2 <_malloc_r+0x32>
 800506c:	4634      	mov	r4, r6
 800506e:	6876      	ldr	r6, [r6, #4]
 8005070:	e7b9      	b.n	8004fe6 <_malloc_r+0x46>
 8005072:	230c      	movs	r3, #12
 8005074:	4638      	mov	r0, r7
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	f000 ff72 	bl	8005f60 <__malloc_unlock>
 800507c:	e7a1      	b.n	8004fc2 <_malloc_r+0x22>
 800507e:	6025      	str	r5, [r4, #0]
 8005080:	e7de      	b.n	8005040 <_malloc_r+0xa0>
 8005082:	bf00      	nop
 8005084:	20002f6c 	.word	0x20002f6c

08005088 <__ssputs_r>:
 8005088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	688e      	ldr	r6, [r1, #8]
 800508e:	4682      	mov	sl, r0
 8005090:	429e      	cmp	r6, r3
 8005092:	460c      	mov	r4, r1
 8005094:	4690      	mov	r8, r2
 8005096:	461f      	mov	r7, r3
 8005098:	d838      	bhi.n	800510c <__ssputs_r+0x84>
 800509a:	898a      	ldrh	r2, [r1, #12]
 800509c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050a0:	d032      	beq.n	8005108 <__ssputs_r+0x80>
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	6909      	ldr	r1, [r1, #16]
 80050a6:	3301      	adds	r3, #1
 80050a8:	eba5 0901 	sub.w	r9, r5, r1
 80050ac:	6965      	ldr	r5, [r4, #20]
 80050ae:	444b      	add	r3, r9
 80050b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050b8:	106d      	asrs	r5, r5, #1
 80050ba:	429d      	cmp	r5, r3
 80050bc:	bf38      	it	cc
 80050be:	461d      	movcc	r5, r3
 80050c0:	0553      	lsls	r3, r2, #21
 80050c2:	d531      	bpl.n	8005128 <__ssputs_r+0xa0>
 80050c4:	4629      	mov	r1, r5
 80050c6:	f7ff ff6b 	bl	8004fa0 <_malloc_r>
 80050ca:	4606      	mov	r6, r0
 80050cc:	b950      	cbnz	r0, 80050e4 <__ssputs_r+0x5c>
 80050ce:	230c      	movs	r3, #12
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	f8ca 3000 	str.w	r3, [sl]
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	464a      	mov	r2, r9
 80050e6:	6921      	ldr	r1, [r4, #16]
 80050e8:	f7ff fe18 	bl	8004d1c <memcpy>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	6126      	str	r6, [r4, #16]
 80050fa:	444e      	add	r6, r9
 80050fc:	6026      	str	r6, [r4, #0]
 80050fe:	463e      	mov	r6, r7
 8005100:	6165      	str	r5, [r4, #20]
 8005102:	eba5 0509 	sub.w	r5, r5, r9
 8005106:	60a5      	str	r5, [r4, #8]
 8005108:	42be      	cmp	r6, r7
 800510a:	d900      	bls.n	800510e <__ssputs_r+0x86>
 800510c:	463e      	mov	r6, r7
 800510e:	4632      	mov	r2, r6
 8005110:	4641      	mov	r1, r8
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	f000 ff04 	bl	8005f20 <memmove>
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	2000      	movs	r0, #0
 800511c:	1b9b      	subs	r3, r3, r6
 800511e:	60a3      	str	r3, [r4, #8]
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	4433      	add	r3, r6
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	e7db      	b.n	80050e0 <__ssputs_r+0x58>
 8005128:	462a      	mov	r2, r5
 800512a:	f000 ff1f 	bl	8005f6c <_realloc_r>
 800512e:	4606      	mov	r6, r0
 8005130:	2800      	cmp	r0, #0
 8005132:	d1e1      	bne.n	80050f8 <__ssputs_r+0x70>
 8005134:	4650      	mov	r0, sl
 8005136:	6921      	ldr	r1, [r4, #16]
 8005138:	f7ff feca 	bl	8004ed0 <_free_r>
 800513c:	e7c7      	b.n	80050ce <__ssputs_r+0x46>
	...

08005140 <_svfiprintf_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4698      	mov	r8, r3
 8005146:	898b      	ldrh	r3, [r1, #12]
 8005148:	4607      	mov	r7, r0
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	460d      	mov	r5, r1
 800514e:	4614      	mov	r4, r2
 8005150:	b09d      	sub	sp, #116	; 0x74
 8005152:	d50e      	bpl.n	8005172 <_svfiprintf_r+0x32>
 8005154:	690b      	ldr	r3, [r1, #16]
 8005156:	b963      	cbnz	r3, 8005172 <_svfiprintf_r+0x32>
 8005158:	2140      	movs	r1, #64	; 0x40
 800515a:	f7ff ff21 	bl	8004fa0 <_malloc_r>
 800515e:	6028      	str	r0, [r5, #0]
 8005160:	6128      	str	r0, [r5, #16]
 8005162:	b920      	cbnz	r0, 800516e <_svfiprintf_r+0x2e>
 8005164:	230c      	movs	r3, #12
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e0d1      	b.n	8005312 <_svfiprintf_r+0x1d2>
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	616b      	str	r3, [r5, #20]
 8005172:	2300      	movs	r3, #0
 8005174:	9309      	str	r3, [sp, #36]	; 0x24
 8005176:	2320      	movs	r3, #32
 8005178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800517c:	2330      	movs	r3, #48	; 0x30
 800517e:	f04f 0901 	mov.w	r9, #1
 8005182:	f8cd 800c 	str.w	r8, [sp, #12]
 8005186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800532c <_svfiprintf_r+0x1ec>
 800518a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800518e:	4623      	mov	r3, r4
 8005190:	469a      	mov	sl, r3
 8005192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005196:	b10a      	cbz	r2, 800519c <_svfiprintf_r+0x5c>
 8005198:	2a25      	cmp	r2, #37	; 0x25
 800519a:	d1f9      	bne.n	8005190 <_svfiprintf_r+0x50>
 800519c:	ebba 0b04 	subs.w	fp, sl, r4
 80051a0:	d00b      	beq.n	80051ba <_svfiprintf_r+0x7a>
 80051a2:	465b      	mov	r3, fp
 80051a4:	4622      	mov	r2, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff ff6d 	bl	8005088 <__ssputs_r>
 80051ae:	3001      	adds	r0, #1
 80051b0:	f000 80aa 	beq.w	8005308 <_svfiprintf_r+0x1c8>
 80051b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b6:	445a      	add	r2, fp
 80051b8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ba:	f89a 3000 	ldrb.w	r3, [sl]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a2 	beq.w	8005308 <_svfiprintf_r+0x1c8>
 80051c4:	2300      	movs	r3, #0
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ce:	f10a 0a01 	add.w	sl, sl, #1
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	9307      	str	r3, [sp, #28]
 80051d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051da:	931a      	str	r3, [sp, #104]	; 0x68
 80051dc:	4654      	mov	r4, sl
 80051de:	2205      	movs	r2, #5
 80051e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e4:	4851      	ldr	r0, [pc, #324]	; (800532c <_svfiprintf_r+0x1ec>)
 80051e6:	f000 fe8d 	bl	8005f04 <memchr>
 80051ea:	9a04      	ldr	r2, [sp, #16]
 80051ec:	b9d8      	cbnz	r0, 8005226 <_svfiprintf_r+0xe6>
 80051ee:	06d0      	lsls	r0, r2, #27
 80051f0:	bf44      	itt	mi
 80051f2:	2320      	movmi	r3, #32
 80051f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f8:	0711      	lsls	r1, r2, #28
 80051fa:	bf44      	itt	mi
 80051fc:	232b      	movmi	r3, #43	; 0x2b
 80051fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005202:	f89a 3000 	ldrb.w	r3, [sl]
 8005206:	2b2a      	cmp	r3, #42	; 0x2a
 8005208:	d015      	beq.n	8005236 <_svfiprintf_r+0xf6>
 800520a:	4654      	mov	r4, sl
 800520c:	2000      	movs	r0, #0
 800520e:	f04f 0c0a 	mov.w	ip, #10
 8005212:	9a07      	ldr	r2, [sp, #28]
 8005214:	4621      	mov	r1, r4
 8005216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800521a:	3b30      	subs	r3, #48	; 0x30
 800521c:	2b09      	cmp	r3, #9
 800521e:	d94e      	bls.n	80052be <_svfiprintf_r+0x17e>
 8005220:	b1b0      	cbz	r0, 8005250 <_svfiprintf_r+0x110>
 8005222:	9207      	str	r2, [sp, #28]
 8005224:	e014      	b.n	8005250 <_svfiprintf_r+0x110>
 8005226:	eba0 0308 	sub.w	r3, r0, r8
 800522a:	fa09 f303 	lsl.w	r3, r9, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	46a2      	mov	sl, r4
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	e7d2      	b.n	80051dc <_svfiprintf_r+0x9c>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	1d19      	adds	r1, r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	9103      	str	r1, [sp, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfbb      	ittet	lt
 8005242:	425b      	neglt	r3, r3
 8005244:	f042 0202 	orrlt.w	r2, r2, #2
 8005248:	9307      	strge	r3, [sp, #28]
 800524a:	9307      	strlt	r3, [sp, #28]
 800524c:	bfb8      	it	lt
 800524e:	9204      	strlt	r2, [sp, #16]
 8005250:	7823      	ldrb	r3, [r4, #0]
 8005252:	2b2e      	cmp	r3, #46	; 0x2e
 8005254:	d10c      	bne.n	8005270 <_svfiprintf_r+0x130>
 8005256:	7863      	ldrb	r3, [r4, #1]
 8005258:	2b2a      	cmp	r3, #42	; 0x2a
 800525a:	d135      	bne.n	80052c8 <_svfiprintf_r+0x188>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3402      	adds	r4, #2
 8005260:	1d1a      	adds	r2, r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	9203      	str	r2, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfb8      	it	lt
 800526a:	f04f 33ff 	movlt.w	r3, #4294967295
 800526e:	9305      	str	r3, [sp, #20]
 8005270:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005330 <_svfiprintf_r+0x1f0>
 8005274:	2203      	movs	r2, #3
 8005276:	4650      	mov	r0, sl
 8005278:	7821      	ldrb	r1, [r4, #0]
 800527a:	f000 fe43 	bl	8005f04 <memchr>
 800527e:	b140      	cbz	r0, 8005292 <_svfiprintf_r+0x152>
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	eba0 000a 	sub.w	r0, r0, sl
 8005286:	fa03 f000 	lsl.w	r0, r3, r0
 800528a:	9b04      	ldr	r3, [sp, #16]
 800528c:	3401      	adds	r4, #1
 800528e:	4303      	orrs	r3, r0
 8005290:	9304      	str	r3, [sp, #16]
 8005292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005296:	2206      	movs	r2, #6
 8005298:	4826      	ldr	r0, [pc, #152]	; (8005334 <_svfiprintf_r+0x1f4>)
 800529a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800529e:	f000 fe31 	bl	8005f04 <memchr>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d038      	beq.n	8005318 <_svfiprintf_r+0x1d8>
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <_svfiprintf_r+0x1f8>)
 80052a8:	bb1b      	cbnz	r3, 80052f2 <_svfiprintf_r+0x1b2>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	3307      	adds	r3, #7
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	3308      	adds	r3, #8
 80052b4:	9303      	str	r3, [sp, #12]
 80052b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b8:	4433      	add	r3, r6
 80052ba:	9309      	str	r3, [sp, #36]	; 0x24
 80052bc:	e767      	b.n	800518e <_svfiprintf_r+0x4e>
 80052be:	460c      	mov	r4, r1
 80052c0:	2001      	movs	r0, #1
 80052c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c6:	e7a5      	b.n	8005214 <_svfiprintf_r+0xd4>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f04f 0c0a 	mov.w	ip, #10
 80052ce:	4619      	mov	r1, r3
 80052d0:	3401      	adds	r4, #1
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	4620      	mov	r0, r4
 80052d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052da:	3a30      	subs	r2, #48	; 0x30
 80052dc:	2a09      	cmp	r2, #9
 80052de:	d903      	bls.n	80052e8 <_svfiprintf_r+0x1a8>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0c5      	beq.n	8005270 <_svfiprintf_r+0x130>
 80052e4:	9105      	str	r1, [sp, #20]
 80052e6:	e7c3      	b.n	8005270 <_svfiprintf_r+0x130>
 80052e8:	4604      	mov	r4, r0
 80052ea:	2301      	movs	r3, #1
 80052ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f0:	e7f0      	b.n	80052d4 <_svfiprintf_r+0x194>
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462a      	mov	r2, r5
 80052f8:	4638      	mov	r0, r7
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <_svfiprintf_r+0x1fc>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	f3af 8000 	nop.w
 8005302:	1c42      	adds	r2, r0, #1
 8005304:	4606      	mov	r6, r0
 8005306:	d1d6      	bne.n	80052b6 <_svfiprintf_r+0x176>
 8005308:	89ab      	ldrh	r3, [r5, #12]
 800530a:	065b      	lsls	r3, r3, #25
 800530c:	f53f af2c 	bmi.w	8005168 <_svfiprintf_r+0x28>
 8005310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005312:	b01d      	add	sp, #116	; 0x74
 8005314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	462a      	mov	r2, r5
 800531e:	4638      	mov	r0, r7
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <_svfiprintf_r+0x1fc>)
 8005322:	a904      	add	r1, sp, #16
 8005324:	f000 f9d4 	bl	80056d0 <_printf_i>
 8005328:	e7eb      	b.n	8005302 <_svfiprintf_r+0x1c2>
 800532a:	bf00      	nop
 800532c:	0800bd82 	.word	0x0800bd82
 8005330:	0800bd88 	.word	0x0800bd88
 8005334:	0800bd8c 	.word	0x0800bd8c
 8005338:	00000000 	.word	0x00000000
 800533c:	08005089 	.word	0x08005089

08005340 <__sfputc_r>:
 8005340:	6893      	ldr	r3, [r2, #8]
 8005342:	b410      	push	{r4}
 8005344:	3b01      	subs	r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	6093      	str	r3, [r2, #8]
 800534a:	da07      	bge.n	800535c <__sfputc_r+0x1c>
 800534c:	6994      	ldr	r4, [r2, #24]
 800534e:	42a3      	cmp	r3, r4
 8005350:	db01      	blt.n	8005356 <__sfputc_r+0x16>
 8005352:	290a      	cmp	r1, #10
 8005354:	d102      	bne.n	800535c <__sfputc_r+0x1c>
 8005356:	bc10      	pop	{r4}
 8005358:	f000 baf0 	b.w	800593c <__swbuf_r>
 800535c:	6813      	ldr	r3, [r2, #0]
 800535e:	1c58      	adds	r0, r3, #1
 8005360:	6010      	str	r0, [r2, #0]
 8005362:	7019      	strb	r1, [r3, #0]
 8005364:	4608      	mov	r0, r1
 8005366:	bc10      	pop	{r4}
 8005368:	4770      	bx	lr

0800536a <__sfputs_r>:
 800536a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536c:	4606      	mov	r6, r0
 800536e:	460f      	mov	r7, r1
 8005370:	4614      	mov	r4, r2
 8005372:	18d5      	adds	r5, r2, r3
 8005374:	42ac      	cmp	r4, r5
 8005376:	d101      	bne.n	800537c <__sfputs_r+0x12>
 8005378:	2000      	movs	r0, #0
 800537a:	e007      	b.n	800538c <__sfputs_r+0x22>
 800537c:	463a      	mov	r2, r7
 800537e:	4630      	mov	r0, r6
 8005380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005384:	f7ff ffdc 	bl	8005340 <__sfputc_r>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d1f3      	bne.n	8005374 <__sfputs_r+0xa>
 800538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005390 <_vfiprintf_r>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	460d      	mov	r5, r1
 8005396:	4614      	mov	r4, r2
 8005398:	4698      	mov	r8, r3
 800539a:	4606      	mov	r6, r0
 800539c:	b09d      	sub	sp, #116	; 0x74
 800539e:	b118      	cbz	r0, 80053a8 <_vfiprintf_r+0x18>
 80053a0:	6983      	ldr	r3, [r0, #24]
 80053a2:	b90b      	cbnz	r3, 80053a8 <_vfiprintf_r+0x18>
 80053a4:	f000 fca8 	bl	8005cf8 <__sinit>
 80053a8:	4b89      	ldr	r3, [pc, #548]	; (80055d0 <_vfiprintf_r+0x240>)
 80053aa:	429d      	cmp	r5, r3
 80053ac:	d11b      	bne.n	80053e6 <_vfiprintf_r+0x56>
 80053ae:	6875      	ldr	r5, [r6, #4]
 80053b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	d405      	bmi.n	80053c2 <_vfiprintf_r+0x32>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	059a      	lsls	r2, r3, #22
 80053ba:	d402      	bmi.n	80053c2 <_vfiprintf_r+0x32>
 80053bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053be:	f000 fd39 	bl	8005e34 <__retarget_lock_acquire_recursive>
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	d501      	bpl.n	80053cc <_vfiprintf_r+0x3c>
 80053c8:	692b      	ldr	r3, [r5, #16]
 80053ca:	b9eb      	cbnz	r3, 8005408 <_vfiprintf_r+0x78>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4630      	mov	r0, r6
 80053d0:	f000 fb06 	bl	80059e0 <__swsetup_r>
 80053d4:	b1c0      	cbz	r0, 8005408 <_vfiprintf_r+0x78>
 80053d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053d8:	07dc      	lsls	r4, r3, #31
 80053da:	d50e      	bpl.n	80053fa <_vfiprintf_r+0x6a>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	b01d      	add	sp, #116	; 0x74
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	4b7b      	ldr	r3, [pc, #492]	; (80055d4 <_vfiprintf_r+0x244>)
 80053e8:	429d      	cmp	r5, r3
 80053ea:	d101      	bne.n	80053f0 <_vfiprintf_r+0x60>
 80053ec:	68b5      	ldr	r5, [r6, #8]
 80053ee:	e7df      	b.n	80053b0 <_vfiprintf_r+0x20>
 80053f0:	4b79      	ldr	r3, [pc, #484]	; (80055d8 <_vfiprintf_r+0x248>)
 80053f2:	429d      	cmp	r5, r3
 80053f4:	bf08      	it	eq
 80053f6:	68f5      	ldreq	r5, [r6, #12]
 80053f8:	e7da      	b.n	80053b0 <_vfiprintf_r+0x20>
 80053fa:	89ab      	ldrh	r3, [r5, #12]
 80053fc:	0598      	lsls	r0, r3, #22
 80053fe:	d4ed      	bmi.n	80053dc <_vfiprintf_r+0x4c>
 8005400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005402:	f000 fd18 	bl	8005e36 <__retarget_lock_release_recursive>
 8005406:	e7e9      	b.n	80053dc <_vfiprintf_r+0x4c>
 8005408:	2300      	movs	r3, #0
 800540a:	9309      	str	r3, [sp, #36]	; 0x24
 800540c:	2320      	movs	r3, #32
 800540e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005412:	2330      	movs	r3, #48	; 0x30
 8005414:	f04f 0901 	mov.w	r9, #1
 8005418:	f8cd 800c 	str.w	r8, [sp, #12]
 800541c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80055dc <_vfiprintf_r+0x24c>
 8005420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005424:	4623      	mov	r3, r4
 8005426:	469a      	mov	sl, r3
 8005428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800542c:	b10a      	cbz	r2, 8005432 <_vfiprintf_r+0xa2>
 800542e:	2a25      	cmp	r2, #37	; 0x25
 8005430:	d1f9      	bne.n	8005426 <_vfiprintf_r+0x96>
 8005432:	ebba 0b04 	subs.w	fp, sl, r4
 8005436:	d00b      	beq.n	8005450 <_vfiprintf_r+0xc0>
 8005438:	465b      	mov	r3, fp
 800543a:	4622      	mov	r2, r4
 800543c:	4629      	mov	r1, r5
 800543e:	4630      	mov	r0, r6
 8005440:	f7ff ff93 	bl	800536a <__sfputs_r>
 8005444:	3001      	adds	r0, #1
 8005446:	f000 80aa 	beq.w	800559e <_vfiprintf_r+0x20e>
 800544a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800544c:	445a      	add	r2, fp
 800544e:	9209      	str	r2, [sp, #36]	; 0x24
 8005450:	f89a 3000 	ldrb.w	r3, [sl]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80a2 	beq.w	800559e <_vfiprintf_r+0x20e>
 800545a:	2300      	movs	r3, #0
 800545c:	f04f 32ff 	mov.w	r2, #4294967295
 8005460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005464:	f10a 0a01 	add.w	sl, sl, #1
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	9307      	str	r3, [sp, #28]
 800546c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005470:	931a      	str	r3, [sp, #104]	; 0x68
 8005472:	4654      	mov	r4, sl
 8005474:	2205      	movs	r2, #5
 8005476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800547a:	4858      	ldr	r0, [pc, #352]	; (80055dc <_vfiprintf_r+0x24c>)
 800547c:	f000 fd42 	bl	8005f04 <memchr>
 8005480:	9a04      	ldr	r2, [sp, #16]
 8005482:	b9d8      	cbnz	r0, 80054bc <_vfiprintf_r+0x12c>
 8005484:	06d1      	lsls	r1, r2, #27
 8005486:	bf44      	itt	mi
 8005488:	2320      	movmi	r3, #32
 800548a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548e:	0713      	lsls	r3, r2, #28
 8005490:	bf44      	itt	mi
 8005492:	232b      	movmi	r3, #43	; 0x2b
 8005494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005498:	f89a 3000 	ldrb.w	r3, [sl]
 800549c:	2b2a      	cmp	r3, #42	; 0x2a
 800549e:	d015      	beq.n	80054cc <_vfiprintf_r+0x13c>
 80054a0:	4654      	mov	r4, sl
 80054a2:	2000      	movs	r0, #0
 80054a4:	f04f 0c0a 	mov.w	ip, #10
 80054a8:	9a07      	ldr	r2, [sp, #28]
 80054aa:	4621      	mov	r1, r4
 80054ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054b0:	3b30      	subs	r3, #48	; 0x30
 80054b2:	2b09      	cmp	r3, #9
 80054b4:	d94e      	bls.n	8005554 <_vfiprintf_r+0x1c4>
 80054b6:	b1b0      	cbz	r0, 80054e6 <_vfiprintf_r+0x156>
 80054b8:	9207      	str	r2, [sp, #28]
 80054ba:	e014      	b.n	80054e6 <_vfiprintf_r+0x156>
 80054bc:	eba0 0308 	sub.w	r3, r0, r8
 80054c0:	fa09 f303 	lsl.w	r3, r9, r3
 80054c4:	4313      	orrs	r3, r2
 80054c6:	46a2      	mov	sl, r4
 80054c8:	9304      	str	r3, [sp, #16]
 80054ca:	e7d2      	b.n	8005472 <_vfiprintf_r+0xe2>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	1d19      	adds	r1, r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	9103      	str	r1, [sp, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bfbb      	ittet	lt
 80054d8:	425b      	neglt	r3, r3
 80054da:	f042 0202 	orrlt.w	r2, r2, #2
 80054de:	9307      	strge	r3, [sp, #28]
 80054e0:	9307      	strlt	r3, [sp, #28]
 80054e2:	bfb8      	it	lt
 80054e4:	9204      	strlt	r2, [sp, #16]
 80054e6:	7823      	ldrb	r3, [r4, #0]
 80054e8:	2b2e      	cmp	r3, #46	; 0x2e
 80054ea:	d10c      	bne.n	8005506 <_vfiprintf_r+0x176>
 80054ec:	7863      	ldrb	r3, [r4, #1]
 80054ee:	2b2a      	cmp	r3, #42	; 0x2a
 80054f0:	d135      	bne.n	800555e <_vfiprintf_r+0x1ce>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	3402      	adds	r4, #2
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	9203      	str	r2, [sp, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bfb8      	it	lt
 8005500:	f04f 33ff 	movlt.w	r3, #4294967295
 8005504:	9305      	str	r3, [sp, #20]
 8005506:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80055e0 <_vfiprintf_r+0x250>
 800550a:	2203      	movs	r2, #3
 800550c:	4650      	mov	r0, sl
 800550e:	7821      	ldrb	r1, [r4, #0]
 8005510:	f000 fcf8 	bl	8005f04 <memchr>
 8005514:	b140      	cbz	r0, 8005528 <_vfiprintf_r+0x198>
 8005516:	2340      	movs	r3, #64	; 0x40
 8005518:	eba0 000a 	sub.w	r0, r0, sl
 800551c:	fa03 f000 	lsl.w	r0, r3, r0
 8005520:	9b04      	ldr	r3, [sp, #16]
 8005522:	3401      	adds	r4, #1
 8005524:	4303      	orrs	r3, r0
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552c:	2206      	movs	r2, #6
 800552e:	482d      	ldr	r0, [pc, #180]	; (80055e4 <_vfiprintf_r+0x254>)
 8005530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005534:	f000 fce6 	bl	8005f04 <memchr>
 8005538:	2800      	cmp	r0, #0
 800553a:	d03f      	beq.n	80055bc <_vfiprintf_r+0x22c>
 800553c:	4b2a      	ldr	r3, [pc, #168]	; (80055e8 <_vfiprintf_r+0x258>)
 800553e:	bb1b      	cbnz	r3, 8005588 <_vfiprintf_r+0x1f8>
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	3307      	adds	r3, #7
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	3308      	adds	r3, #8
 800554a:	9303      	str	r3, [sp, #12]
 800554c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554e:	443b      	add	r3, r7
 8005550:	9309      	str	r3, [sp, #36]	; 0x24
 8005552:	e767      	b.n	8005424 <_vfiprintf_r+0x94>
 8005554:	460c      	mov	r4, r1
 8005556:	2001      	movs	r0, #1
 8005558:	fb0c 3202 	mla	r2, ip, r2, r3
 800555c:	e7a5      	b.n	80054aa <_vfiprintf_r+0x11a>
 800555e:	2300      	movs	r3, #0
 8005560:	f04f 0c0a 	mov.w	ip, #10
 8005564:	4619      	mov	r1, r3
 8005566:	3401      	adds	r4, #1
 8005568:	9305      	str	r3, [sp, #20]
 800556a:	4620      	mov	r0, r4
 800556c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005570:	3a30      	subs	r2, #48	; 0x30
 8005572:	2a09      	cmp	r2, #9
 8005574:	d903      	bls.n	800557e <_vfiprintf_r+0x1ee>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0c5      	beq.n	8005506 <_vfiprintf_r+0x176>
 800557a:	9105      	str	r1, [sp, #20]
 800557c:	e7c3      	b.n	8005506 <_vfiprintf_r+0x176>
 800557e:	4604      	mov	r4, r0
 8005580:	2301      	movs	r3, #1
 8005582:	fb0c 2101 	mla	r1, ip, r1, r2
 8005586:	e7f0      	b.n	800556a <_vfiprintf_r+0x1da>
 8005588:	ab03      	add	r3, sp, #12
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	462a      	mov	r2, r5
 800558e:	4630      	mov	r0, r6
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <_vfiprintf_r+0x25c>)
 8005592:	a904      	add	r1, sp, #16
 8005594:	f3af 8000 	nop.w
 8005598:	4607      	mov	r7, r0
 800559a:	1c78      	adds	r0, r7, #1
 800559c:	d1d6      	bne.n	800554c <_vfiprintf_r+0x1bc>
 800559e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a0:	07d9      	lsls	r1, r3, #31
 80055a2:	d405      	bmi.n	80055b0 <_vfiprintf_r+0x220>
 80055a4:	89ab      	ldrh	r3, [r5, #12]
 80055a6:	059a      	lsls	r2, r3, #22
 80055a8:	d402      	bmi.n	80055b0 <_vfiprintf_r+0x220>
 80055aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ac:	f000 fc43 	bl	8005e36 <__retarget_lock_release_recursive>
 80055b0:	89ab      	ldrh	r3, [r5, #12]
 80055b2:	065b      	lsls	r3, r3, #25
 80055b4:	f53f af12 	bmi.w	80053dc <_vfiprintf_r+0x4c>
 80055b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ba:	e711      	b.n	80053e0 <_vfiprintf_r+0x50>
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4630      	mov	r0, r6
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <_vfiprintf_r+0x25c>)
 80055c6:	a904      	add	r1, sp, #16
 80055c8:	f000 f882 	bl	80056d0 <_printf_i>
 80055cc:	e7e4      	b.n	8005598 <_vfiprintf_r+0x208>
 80055ce:	bf00      	nop
 80055d0:	0800bdd8 	.word	0x0800bdd8
 80055d4:	0800bdf8 	.word	0x0800bdf8
 80055d8:	0800bdb8 	.word	0x0800bdb8
 80055dc:	0800bd82 	.word	0x0800bd82
 80055e0:	0800bd88 	.word	0x0800bd88
 80055e4:	0800bd8c 	.word	0x0800bd8c
 80055e8:	00000000 	.word	0x00000000
 80055ec:	0800536b 	.word	0x0800536b

080055f0 <_printf_common>:
 80055f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f4:	4616      	mov	r6, r2
 80055f6:	4699      	mov	r9, r3
 80055f8:	688a      	ldr	r2, [r1, #8]
 80055fa:	690b      	ldr	r3, [r1, #16]
 80055fc:	4607      	mov	r7, r0
 80055fe:	4293      	cmp	r3, r2
 8005600:	bfb8      	it	lt
 8005602:	4613      	movlt	r3, r2
 8005604:	6033      	str	r3, [r6, #0]
 8005606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800560a:	460c      	mov	r4, r1
 800560c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005610:	b10a      	cbz	r2, 8005616 <_printf_common+0x26>
 8005612:	3301      	adds	r3, #1
 8005614:	6033      	str	r3, [r6, #0]
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	0699      	lsls	r1, r3, #26
 800561a:	bf42      	ittt	mi
 800561c:	6833      	ldrmi	r3, [r6, #0]
 800561e:	3302      	addmi	r3, #2
 8005620:	6033      	strmi	r3, [r6, #0]
 8005622:	6825      	ldr	r5, [r4, #0]
 8005624:	f015 0506 	ands.w	r5, r5, #6
 8005628:	d106      	bne.n	8005638 <_printf_common+0x48>
 800562a:	f104 0a19 	add.w	sl, r4, #25
 800562e:	68e3      	ldr	r3, [r4, #12]
 8005630:	6832      	ldr	r2, [r6, #0]
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	42ab      	cmp	r3, r5
 8005636:	dc28      	bgt.n	800568a <_printf_common+0x9a>
 8005638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800563c:	1e13      	subs	r3, r2, #0
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	bf18      	it	ne
 8005642:	2301      	movne	r3, #1
 8005644:	0692      	lsls	r2, r2, #26
 8005646:	d42d      	bmi.n	80056a4 <_printf_common+0xb4>
 8005648:	4649      	mov	r1, r9
 800564a:	4638      	mov	r0, r7
 800564c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005650:	47c0      	blx	r8
 8005652:	3001      	adds	r0, #1
 8005654:	d020      	beq.n	8005698 <_printf_common+0xa8>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	68e5      	ldr	r5, [r4, #12]
 800565a:	f003 0306 	and.w	r3, r3, #6
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf18      	it	ne
 8005662:	2500      	movne	r5, #0
 8005664:	6832      	ldr	r2, [r6, #0]
 8005666:	f04f 0600 	mov.w	r6, #0
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	bf08      	it	eq
 800566e:	1aad      	subeq	r5, r5, r2
 8005670:	6922      	ldr	r2, [r4, #16]
 8005672:	bf08      	it	eq
 8005674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005678:	4293      	cmp	r3, r2
 800567a:	bfc4      	itt	gt
 800567c:	1a9b      	subgt	r3, r3, r2
 800567e:	18ed      	addgt	r5, r5, r3
 8005680:	341a      	adds	r4, #26
 8005682:	42b5      	cmp	r5, r6
 8005684:	d11a      	bne.n	80056bc <_printf_common+0xcc>
 8005686:	2000      	movs	r0, #0
 8005688:	e008      	b.n	800569c <_printf_common+0xac>
 800568a:	2301      	movs	r3, #1
 800568c:	4652      	mov	r2, sl
 800568e:	4649      	mov	r1, r9
 8005690:	4638      	mov	r0, r7
 8005692:	47c0      	blx	r8
 8005694:	3001      	adds	r0, #1
 8005696:	d103      	bne.n	80056a0 <_printf_common+0xb0>
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	3501      	adds	r5, #1
 80056a2:	e7c4      	b.n	800562e <_printf_common+0x3e>
 80056a4:	2030      	movs	r0, #48	; 0x30
 80056a6:	18e1      	adds	r1, r4, r3
 80056a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056b2:	4422      	add	r2, r4
 80056b4:	3302      	adds	r3, #2
 80056b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ba:	e7c5      	b.n	8005648 <_printf_common+0x58>
 80056bc:	2301      	movs	r3, #1
 80056be:	4622      	mov	r2, r4
 80056c0:	4649      	mov	r1, r9
 80056c2:	4638      	mov	r0, r7
 80056c4:	47c0      	blx	r8
 80056c6:	3001      	adds	r0, #1
 80056c8:	d0e6      	beq.n	8005698 <_printf_common+0xa8>
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7d9      	b.n	8005682 <_printf_common+0x92>
	...

080056d0 <_printf_i>:
 80056d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	7e0f      	ldrb	r7, [r1, #24]
 80056d6:	4691      	mov	r9, r2
 80056d8:	2f78      	cmp	r7, #120	; 0x78
 80056da:	4680      	mov	r8, r0
 80056dc:	460c      	mov	r4, r1
 80056de:	469a      	mov	sl, r3
 80056e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056e6:	d807      	bhi.n	80056f8 <_printf_i+0x28>
 80056e8:	2f62      	cmp	r7, #98	; 0x62
 80056ea:	d80a      	bhi.n	8005702 <_printf_i+0x32>
 80056ec:	2f00      	cmp	r7, #0
 80056ee:	f000 80d9 	beq.w	80058a4 <_printf_i+0x1d4>
 80056f2:	2f58      	cmp	r7, #88	; 0x58
 80056f4:	f000 80a4 	beq.w	8005840 <_printf_i+0x170>
 80056f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005700:	e03a      	b.n	8005778 <_printf_i+0xa8>
 8005702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005706:	2b15      	cmp	r3, #21
 8005708:	d8f6      	bhi.n	80056f8 <_printf_i+0x28>
 800570a:	a101      	add	r1, pc, #4	; (adr r1, 8005710 <_printf_i+0x40>)
 800570c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005710:	08005769 	.word	0x08005769
 8005714:	0800577d 	.word	0x0800577d
 8005718:	080056f9 	.word	0x080056f9
 800571c:	080056f9 	.word	0x080056f9
 8005720:	080056f9 	.word	0x080056f9
 8005724:	080056f9 	.word	0x080056f9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056f9 	.word	0x080056f9
 8005730:	080056f9 	.word	0x080056f9
 8005734:	080056f9 	.word	0x080056f9
 8005738:	080056f9 	.word	0x080056f9
 800573c:	0800588b 	.word	0x0800588b
 8005740:	080057ad 	.word	0x080057ad
 8005744:	0800586d 	.word	0x0800586d
 8005748:	080056f9 	.word	0x080056f9
 800574c:	080056f9 	.word	0x080056f9
 8005750:	080058ad 	.word	0x080058ad
 8005754:	080056f9 	.word	0x080056f9
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080056f9 	.word	0x080056f9
 8005760:	080056f9 	.word	0x080056f9
 8005764:	08005875 	.word	0x08005875
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	1d1a      	adds	r2, r3, #4
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	602a      	str	r2, [r5, #0]
 8005770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005778:	2301      	movs	r3, #1
 800577a:	e0a4      	b.n	80058c6 <_printf_i+0x1f6>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	6829      	ldr	r1, [r5, #0]
 8005780:	0606      	lsls	r6, r0, #24
 8005782:	f101 0304 	add.w	r3, r1, #4
 8005786:	d50a      	bpl.n	800579e <_printf_i+0xce>
 8005788:	680e      	ldr	r6, [r1, #0]
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	2e00      	cmp	r6, #0
 800578e:	da03      	bge.n	8005798 <_printf_i+0xc8>
 8005790:	232d      	movs	r3, #45	; 0x2d
 8005792:	4276      	negs	r6, r6
 8005794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005798:	230a      	movs	r3, #10
 800579a:	485e      	ldr	r0, [pc, #376]	; (8005914 <_printf_i+0x244>)
 800579c:	e019      	b.n	80057d2 <_printf_i+0x102>
 800579e:	680e      	ldr	r6, [r1, #0]
 80057a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	bf18      	it	ne
 80057a8:	b236      	sxthne	r6, r6
 80057aa:	e7ef      	b.n	800578c <_printf_i+0xbc>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	1d19      	adds	r1, r3, #4
 80057b2:	6029      	str	r1, [r5, #0]
 80057b4:	0601      	lsls	r1, r0, #24
 80057b6:	d501      	bpl.n	80057bc <_printf_i+0xec>
 80057b8:	681e      	ldr	r6, [r3, #0]
 80057ba:	e002      	b.n	80057c2 <_printf_i+0xf2>
 80057bc:	0646      	lsls	r6, r0, #25
 80057be:	d5fb      	bpl.n	80057b8 <_printf_i+0xe8>
 80057c0:	881e      	ldrh	r6, [r3, #0]
 80057c2:	2f6f      	cmp	r7, #111	; 0x6f
 80057c4:	bf0c      	ite	eq
 80057c6:	2308      	moveq	r3, #8
 80057c8:	230a      	movne	r3, #10
 80057ca:	4852      	ldr	r0, [pc, #328]	; (8005914 <_printf_i+0x244>)
 80057cc:	2100      	movs	r1, #0
 80057ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057d2:	6865      	ldr	r5, [r4, #4]
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	bfa8      	it	ge
 80057d8:	6821      	ldrge	r1, [r4, #0]
 80057da:	60a5      	str	r5, [r4, #8]
 80057dc:	bfa4      	itt	ge
 80057de:	f021 0104 	bicge.w	r1, r1, #4
 80057e2:	6021      	strge	r1, [r4, #0]
 80057e4:	b90e      	cbnz	r6, 80057ea <_printf_i+0x11a>
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	d04d      	beq.n	8005886 <_printf_i+0x1b6>
 80057ea:	4615      	mov	r5, r2
 80057ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80057f0:	fb03 6711 	mls	r7, r3, r1, r6
 80057f4:	5dc7      	ldrb	r7, [r0, r7]
 80057f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057fa:	4637      	mov	r7, r6
 80057fc:	42bb      	cmp	r3, r7
 80057fe:	460e      	mov	r6, r1
 8005800:	d9f4      	bls.n	80057ec <_printf_i+0x11c>
 8005802:	2b08      	cmp	r3, #8
 8005804:	d10b      	bne.n	800581e <_printf_i+0x14e>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	07de      	lsls	r6, r3, #31
 800580a:	d508      	bpl.n	800581e <_printf_i+0x14e>
 800580c:	6923      	ldr	r3, [r4, #16]
 800580e:	6861      	ldr	r1, [r4, #4]
 8005810:	4299      	cmp	r1, r3
 8005812:	bfde      	ittt	le
 8005814:	2330      	movle	r3, #48	; 0x30
 8005816:	f805 3c01 	strble.w	r3, [r5, #-1]
 800581a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800581e:	1b52      	subs	r2, r2, r5
 8005820:	6122      	str	r2, [r4, #16]
 8005822:	464b      	mov	r3, r9
 8005824:	4621      	mov	r1, r4
 8005826:	4640      	mov	r0, r8
 8005828:	f8cd a000 	str.w	sl, [sp]
 800582c:	aa03      	add	r2, sp, #12
 800582e:	f7ff fedf 	bl	80055f0 <_printf_common>
 8005832:	3001      	adds	r0, #1
 8005834:	d14c      	bne.n	80058d0 <_printf_i+0x200>
 8005836:	f04f 30ff 	mov.w	r0, #4294967295
 800583a:	b004      	add	sp, #16
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005840:	4834      	ldr	r0, [pc, #208]	; (8005914 <_printf_i+0x244>)
 8005842:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005846:	6829      	ldr	r1, [r5, #0]
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	f851 6b04 	ldr.w	r6, [r1], #4
 800584e:	6029      	str	r1, [r5, #0]
 8005850:	061d      	lsls	r5, r3, #24
 8005852:	d514      	bpl.n	800587e <_printf_i+0x1ae>
 8005854:	07df      	lsls	r7, r3, #31
 8005856:	bf44      	itt	mi
 8005858:	f043 0320 	orrmi.w	r3, r3, #32
 800585c:	6023      	strmi	r3, [r4, #0]
 800585e:	b91e      	cbnz	r6, 8005868 <_printf_i+0x198>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	f023 0320 	bic.w	r3, r3, #32
 8005866:	6023      	str	r3, [r4, #0]
 8005868:	2310      	movs	r3, #16
 800586a:	e7af      	b.n	80057cc <_printf_i+0xfc>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	f043 0320 	orr.w	r3, r3, #32
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	2378      	movs	r3, #120	; 0x78
 8005876:	4828      	ldr	r0, [pc, #160]	; (8005918 <_printf_i+0x248>)
 8005878:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800587c:	e7e3      	b.n	8005846 <_printf_i+0x176>
 800587e:	0659      	lsls	r1, r3, #25
 8005880:	bf48      	it	mi
 8005882:	b2b6      	uxthmi	r6, r6
 8005884:	e7e6      	b.n	8005854 <_printf_i+0x184>
 8005886:	4615      	mov	r5, r2
 8005888:	e7bb      	b.n	8005802 <_printf_i+0x132>
 800588a:	682b      	ldr	r3, [r5, #0]
 800588c:	6826      	ldr	r6, [r4, #0]
 800588e:	1d18      	adds	r0, r3, #4
 8005890:	6961      	ldr	r1, [r4, #20]
 8005892:	6028      	str	r0, [r5, #0]
 8005894:	0635      	lsls	r5, r6, #24
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	d501      	bpl.n	800589e <_printf_i+0x1ce>
 800589a:	6019      	str	r1, [r3, #0]
 800589c:	e002      	b.n	80058a4 <_printf_i+0x1d4>
 800589e:	0670      	lsls	r0, r6, #25
 80058a0:	d5fb      	bpl.n	800589a <_printf_i+0x1ca>
 80058a2:	8019      	strh	r1, [r3, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	4615      	mov	r5, r2
 80058a8:	6123      	str	r3, [r4, #16]
 80058aa:	e7ba      	b.n	8005822 <_printf_i+0x152>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	2100      	movs	r1, #0
 80058b0:	1d1a      	adds	r2, r3, #4
 80058b2:	602a      	str	r2, [r5, #0]
 80058b4:	681d      	ldr	r5, [r3, #0]
 80058b6:	6862      	ldr	r2, [r4, #4]
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fb23 	bl	8005f04 <memchr>
 80058be:	b108      	cbz	r0, 80058c4 <_printf_i+0x1f4>
 80058c0:	1b40      	subs	r0, r0, r5
 80058c2:	6060      	str	r0, [r4, #4]
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	2300      	movs	r3, #0
 80058ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ce:	e7a8      	b.n	8005822 <_printf_i+0x152>
 80058d0:	462a      	mov	r2, r5
 80058d2:	4649      	mov	r1, r9
 80058d4:	4640      	mov	r0, r8
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	47d0      	blx	sl
 80058da:	3001      	adds	r0, #1
 80058dc:	d0ab      	beq.n	8005836 <_printf_i+0x166>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	079b      	lsls	r3, r3, #30
 80058e2:	d413      	bmi.n	800590c <_printf_i+0x23c>
 80058e4:	68e0      	ldr	r0, [r4, #12]
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	4298      	cmp	r0, r3
 80058ea:	bfb8      	it	lt
 80058ec:	4618      	movlt	r0, r3
 80058ee:	e7a4      	b.n	800583a <_printf_i+0x16a>
 80058f0:	2301      	movs	r3, #1
 80058f2:	4632      	mov	r2, r6
 80058f4:	4649      	mov	r1, r9
 80058f6:	4640      	mov	r0, r8
 80058f8:	47d0      	blx	sl
 80058fa:	3001      	adds	r0, #1
 80058fc:	d09b      	beq.n	8005836 <_printf_i+0x166>
 80058fe:	3501      	adds	r5, #1
 8005900:	68e3      	ldr	r3, [r4, #12]
 8005902:	9903      	ldr	r1, [sp, #12]
 8005904:	1a5b      	subs	r3, r3, r1
 8005906:	42ab      	cmp	r3, r5
 8005908:	dcf2      	bgt.n	80058f0 <_printf_i+0x220>
 800590a:	e7eb      	b.n	80058e4 <_printf_i+0x214>
 800590c:	2500      	movs	r5, #0
 800590e:	f104 0619 	add.w	r6, r4, #25
 8005912:	e7f5      	b.n	8005900 <_printf_i+0x230>
 8005914:	0800bd93 	.word	0x0800bd93
 8005918:	0800bda4 	.word	0x0800bda4

0800591c <_sbrk_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	2300      	movs	r3, #0
 8005920:	4d05      	ldr	r5, [pc, #20]	; (8005938 <_sbrk_r+0x1c>)
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fb fc5a 	bl	80011e0 <_sbrk>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_sbrk_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_sbrk_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20002f78 	.word	0x20002f78

0800593c <__swbuf_r>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	460e      	mov	r6, r1
 8005940:	4614      	mov	r4, r2
 8005942:	4605      	mov	r5, r0
 8005944:	b118      	cbz	r0, 800594e <__swbuf_r+0x12>
 8005946:	6983      	ldr	r3, [r0, #24]
 8005948:	b90b      	cbnz	r3, 800594e <__swbuf_r+0x12>
 800594a:	f000 f9d5 	bl	8005cf8 <__sinit>
 800594e:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <__swbuf_r+0x98>)
 8005950:	429c      	cmp	r4, r3
 8005952:	d12b      	bne.n	80059ac <__swbuf_r+0x70>
 8005954:	686c      	ldr	r4, [r5, #4]
 8005956:	69a3      	ldr	r3, [r4, #24]
 8005958:	60a3      	str	r3, [r4, #8]
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	071a      	lsls	r2, r3, #28
 800595e:	d52f      	bpl.n	80059c0 <__swbuf_r+0x84>
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	b36b      	cbz	r3, 80059c0 <__swbuf_r+0x84>
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	6820      	ldr	r0, [r4, #0]
 8005968:	b2f6      	uxtb	r6, r6
 800596a:	1ac0      	subs	r0, r0, r3
 800596c:	6963      	ldr	r3, [r4, #20]
 800596e:	4637      	mov	r7, r6
 8005970:	4283      	cmp	r3, r0
 8005972:	dc04      	bgt.n	800597e <__swbuf_r+0x42>
 8005974:	4621      	mov	r1, r4
 8005976:	4628      	mov	r0, r5
 8005978:	f000 f92a 	bl	8005bd0 <_fflush_r>
 800597c:	bb30      	cbnz	r0, 80059cc <__swbuf_r+0x90>
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	3001      	adds	r0, #1
 8005982:	3b01      	subs	r3, #1
 8005984:	60a3      	str	r3, [r4, #8]
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	6022      	str	r2, [r4, #0]
 800598c:	701e      	strb	r6, [r3, #0]
 800598e:	6963      	ldr	r3, [r4, #20]
 8005990:	4283      	cmp	r3, r0
 8005992:	d004      	beq.n	800599e <__swbuf_r+0x62>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	07db      	lsls	r3, r3, #31
 8005998:	d506      	bpl.n	80059a8 <__swbuf_r+0x6c>
 800599a:	2e0a      	cmp	r6, #10
 800599c:	d104      	bne.n	80059a8 <__swbuf_r+0x6c>
 800599e:	4621      	mov	r1, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	f000 f915 	bl	8005bd0 <_fflush_r>
 80059a6:	b988      	cbnz	r0, 80059cc <__swbuf_r+0x90>
 80059a8:	4638      	mov	r0, r7
 80059aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <__swbuf_r+0x9c>)
 80059ae:	429c      	cmp	r4, r3
 80059b0:	d101      	bne.n	80059b6 <__swbuf_r+0x7a>
 80059b2:	68ac      	ldr	r4, [r5, #8]
 80059b4:	e7cf      	b.n	8005956 <__swbuf_r+0x1a>
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <__swbuf_r+0xa0>)
 80059b8:	429c      	cmp	r4, r3
 80059ba:	bf08      	it	eq
 80059bc:	68ec      	ldreq	r4, [r5, #12]
 80059be:	e7ca      	b.n	8005956 <__swbuf_r+0x1a>
 80059c0:	4621      	mov	r1, r4
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 f80c 	bl	80059e0 <__swsetup_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d0cb      	beq.n	8005964 <__swbuf_r+0x28>
 80059cc:	f04f 37ff 	mov.w	r7, #4294967295
 80059d0:	e7ea      	b.n	80059a8 <__swbuf_r+0x6c>
 80059d2:	bf00      	nop
 80059d4:	0800bdd8 	.word	0x0800bdd8
 80059d8:	0800bdf8 	.word	0x0800bdf8
 80059dc:	0800bdb8 	.word	0x0800bdb8

080059e0 <__swsetup_r>:
 80059e0:	4b32      	ldr	r3, [pc, #200]	; (8005aac <__swsetup_r+0xcc>)
 80059e2:	b570      	push	{r4, r5, r6, lr}
 80059e4:	681d      	ldr	r5, [r3, #0]
 80059e6:	4606      	mov	r6, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	b125      	cbz	r5, 80059f6 <__swsetup_r+0x16>
 80059ec:	69ab      	ldr	r3, [r5, #24]
 80059ee:	b913      	cbnz	r3, 80059f6 <__swsetup_r+0x16>
 80059f0:	4628      	mov	r0, r5
 80059f2:	f000 f981 	bl	8005cf8 <__sinit>
 80059f6:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <__swsetup_r+0xd0>)
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d10f      	bne.n	8005a1c <__swsetup_r+0x3c>
 80059fc:	686c      	ldr	r4, [r5, #4]
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a04:	0719      	lsls	r1, r3, #28
 8005a06:	d42c      	bmi.n	8005a62 <__swsetup_r+0x82>
 8005a08:	06dd      	lsls	r5, r3, #27
 8005a0a:	d411      	bmi.n	8005a30 <__swsetup_r+0x50>
 8005a0c:	2309      	movs	r3, #9
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	e03e      	b.n	8005a9a <__swsetup_r+0xba>
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <__swsetup_r+0xd4>)
 8005a1e:	429c      	cmp	r4, r3
 8005a20:	d101      	bne.n	8005a26 <__swsetup_r+0x46>
 8005a22:	68ac      	ldr	r4, [r5, #8]
 8005a24:	e7eb      	b.n	80059fe <__swsetup_r+0x1e>
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <__swsetup_r+0xd8>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	bf08      	it	eq
 8005a2c:	68ec      	ldreq	r4, [r5, #12]
 8005a2e:	e7e6      	b.n	80059fe <__swsetup_r+0x1e>
 8005a30:	0758      	lsls	r0, r3, #29
 8005a32:	d512      	bpl.n	8005a5a <__swsetup_r+0x7a>
 8005a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a36:	b141      	cbz	r1, 8005a4a <__swsetup_r+0x6a>
 8005a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d002      	beq.n	8005a46 <__swsetup_r+0x66>
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff fa45 	bl	8004ed0 <_free_r>
 8005a46:	2300      	movs	r3, #0
 8005a48:	6363      	str	r3, [r4, #52]	; 0x34
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	2300      	movs	r3, #0
 8005a54:	6063      	str	r3, [r4, #4]
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	f043 0308 	orr.w	r3, r3, #8
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	b94b      	cbnz	r3, 8005a7a <__swsetup_r+0x9a>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a70:	d003      	beq.n	8005a7a <__swsetup_r+0x9a>
 8005a72:	4621      	mov	r1, r4
 8005a74:	4630      	mov	r0, r6
 8005a76:	f000 fa05 	bl	8005e84 <__smakebuf_r>
 8005a7a:	89a0      	ldrh	r0, [r4, #12]
 8005a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a80:	f010 0301 	ands.w	r3, r0, #1
 8005a84:	d00a      	beq.n	8005a9c <__swsetup_r+0xbc>
 8005a86:	2300      	movs	r3, #0
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	6963      	ldr	r3, [r4, #20]
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	61a3      	str	r3, [r4, #24]
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	b943      	cbnz	r3, 8005aa6 <__swsetup_r+0xc6>
 8005a94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a98:	d1ba      	bne.n	8005a10 <__swsetup_r+0x30>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	0781      	lsls	r1, r0, #30
 8005a9e:	bf58      	it	pl
 8005aa0:	6963      	ldrpl	r3, [r4, #20]
 8005aa2:	60a3      	str	r3, [r4, #8]
 8005aa4:	e7f4      	b.n	8005a90 <__swsetup_r+0xb0>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e7f7      	b.n	8005a9a <__swsetup_r+0xba>
 8005aaa:	bf00      	nop
 8005aac:	20000218 	.word	0x20000218
 8005ab0:	0800bdd8 	.word	0x0800bdd8
 8005ab4:	0800bdf8 	.word	0x0800bdf8
 8005ab8:	0800bdb8 	.word	0x0800bdb8

08005abc <abort>:
 8005abc:	2006      	movs	r0, #6
 8005abe:	b508      	push	{r3, lr}
 8005ac0:	f000 faac 	bl	800601c <raise>
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	f7fb fb18 	bl	80010fa <_exit>
	...

08005acc <__sflush_r>:
 8005acc:	898a      	ldrh	r2, [r1, #12]
 8005ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	0710      	lsls	r0, r2, #28
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	d457      	bmi.n	8005b88 <__sflush_r+0xbc>
 8005ad8:	684b      	ldr	r3, [r1, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dc04      	bgt.n	8005ae8 <__sflush_r+0x1c>
 8005ade:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc01      	bgt.n	8005ae8 <__sflush_r+0x1c>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aea:	2e00      	cmp	r6, #0
 8005aec:	d0fa      	beq.n	8005ae4 <__sflush_r+0x18>
 8005aee:	2300      	movs	r3, #0
 8005af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005af4:	682f      	ldr	r7, [r5, #0]
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	d032      	beq.n	8005b60 <__sflush_r+0x94>
 8005afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	075a      	lsls	r2, r3, #29
 8005b00:	d505      	bpl.n	8005b0e <__sflush_r+0x42>
 8005b02:	6863      	ldr	r3, [r4, #4]
 8005b04:	1ac0      	subs	r0, r0, r3
 8005b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b08:	b10b      	cbz	r3, 8005b0e <__sflush_r+0x42>
 8005b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b0c:	1ac0      	subs	r0, r0, r3
 8005b0e:	2300      	movs	r3, #0
 8005b10:	4602      	mov	r2, r0
 8005b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b14:	4628      	mov	r0, r5
 8005b16:	6a21      	ldr	r1, [r4, #32]
 8005b18:	47b0      	blx	r6
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	d106      	bne.n	8005b2e <__sflush_r+0x62>
 8005b20:	6829      	ldr	r1, [r5, #0]
 8005b22:	291d      	cmp	r1, #29
 8005b24:	d82c      	bhi.n	8005b80 <__sflush_r+0xb4>
 8005b26:	4a29      	ldr	r2, [pc, #164]	; (8005bcc <__sflush_r+0x100>)
 8005b28:	40ca      	lsrs	r2, r1
 8005b2a:	07d6      	lsls	r6, r2, #31
 8005b2c:	d528      	bpl.n	8005b80 <__sflush_r+0xb4>
 8005b2e:	2200      	movs	r2, #0
 8005b30:	6062      	str	r2, [r4, #4]
 8005b32:	6922      	ldr	r2, [r4, #16]
 8005b34:	04d9      	lsls	r1, r3, #19
 8005b36:	6022      	str	r2, [r4, #0]
 8005b38:	d504      	bpl.n	8005b44 <__sflush_r+0x78>
 8005b3a:	1c42      	adds	r2, r0, #1
 8005b3c:	d101      	bne.n	8005b42 <__sflush_r+0x76>
 8005b3e:	682b      	ldr	r3, [r5, #0]
 8005b40:	b903      	cbnz	r3, 8005b44 <__sflush_r+0x78>
 8005b42:	6560      	str	r0, [r4, #84]	; 0x54
 8005b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b46:	602f      	str	r7, [r5, #0]
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	d0cb      	beq.n	8005ae4 <__sflush_r+0x18>
 8005b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b50:	4299      	cmp	r1, r3
 8005b52:	d002      	beq.n	8005b5a <__sflush_r+0x8e>
 8005b54:	4628      	mov	r0, r5
 8005b56:	f7ff f9bb 	bl	8004ed0 <_free_r>
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8005b5e:	e7c2      	b.n	8005ae6 <__sflush_r+0x1a>
 8005b60:	6a21      	ldr	r1, [r4, #32]
 8005b62:	2301      	movs	r3, #1
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b0      	blx	r6
 8005b68:	1c41      	adds	r1, r0, #1
 8005b6a:	d1c7      	bne.n	8005afc <__sflush_r+0x30>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0c4      	beq.n	8005afc <__sflush_r+0x30>
 8005b72:	2b1d      	cmp	r3, #29
 8005b74:	d001      	beq.n	8005b7a <__sflush_r+0xae>
 8005b76:	2b16      	cmp	r3, #22
 8005b78:	d101      	bne.n	8005b7e <__sflush_r+0xb2>
 8005b7a:	602f      	str	r7, [r5, #0]
 8005b7c:	e7b2      	b.n	8005ae4 <__sflush_r+0x18>
 8005b7e:	89a3      	ldrh	r3, [r4, #12]
 8005b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b84:	81a3      	strh	r3, [r4, #12]
 8005b86:	e7ae      	b.n	8005ae6 <__sflush_r+0x1a>
 8005b88:	690f      	ldr	r7, [r1, #16]
 8005b8a:	2f00      	cmp	r7, #0
 8005b8c:	d0aa      	beq.n	8005ae4 <__sflush_r+0x18>
 8005b8e:	0793      	lsls	r3, r2, #30
 8005b90:	bf18      	it	ne
 8005b92:	2300      	movne	r3, #0
 8005b94:	680e      	ldr	r6, [r1, #0]
 8005b96:	bf08      	it	eq
 8005b98:	694b      	ldreq	r3, [r1, #20]
 8005b9a:	1bf6      	subs	r6, r6, r7
 8005b9c:	600f      	str	r7, [r1, #0]
 8005b9e:	608b      	str	r3, [r1, #8]
 8005ba0:	2e00      	cmp	r6, #0
 8005ba2:	dd9f      	ble.n	8005ae4 <__sflush_r+0x18>
 8005ba4:	4633      	mov	r3, r6
 8005ba6:	463a      	mov	r2, r7
 8005ba8:	4628      	mov	r0, r5
 8005baa:	6a21      	ldr	r1, [r4, #32]
 8005bac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005bb0:	47e0      	blx	ip
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	dc06      	bgt.n	8005bc4 <__sflush_r+0xf8>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc0:	81a3      	strh	r3, [r4, #12]
 8005bc2:	e790      	b.n	8005ae6 <__sflush_r+0x1a>
 8005bc4:	4407      	add	r7, r0
 8005bc6:	1a36      	subs	r6, r6, r0
 8005bc8:	e7ea      	b.n	8005ba0 <__sflush_r+0xd4>
 8005bca:	bf00      	nop
 8005bcc:	20400001 	.word	0x20400001

08005bd0 <_fflush_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	b913      	cbnz	r3, 8005be0 <_fflush_r+0x10>
 8005bda:	2500      	movs	r5, #0
 8005bdc:	4628      	mov	r0, r5
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	b118      	cbz	r0, 8005bea <_fflush_r+0x1a>
 8005be2:	6983      	ldr	r3, [r0, #24]
 8005be4:	b90b      	cbnz	r3, 8005bea <_fflush_r+0x1a>
 8005be6:	f000 f887 	bl	8005cf8 <__sinit>
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <_fflush_r+0x6c>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	d11b      	bne.n	8005c28 <_fflush_r+0x58>
 8005bf0:	686c      	ldr	r4, [r5, #4]
 8005bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0ef      	beq.n	8005bda <_fflush_r+0xa>
 8005bfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bfc:	07d0      	lsls	r0, r2, #31
 8005bfe:	d404      	bmi.n	8005c0a <_fflush_r+0x3a>
 8005c00:	0599      	lsls	r1, r3, #22
 8005c02:	d402      	bmi.n	8005c0a <_fflush_r+0x3a>
 8005c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c06:	f000 f915 	bl	8005e34 <__retarget_lock_acquire_recursive>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	f7ff ff5d 	bl	8005acc <__sflush_r>
 8005c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c14:	4605      	mov	r5, r0
 8005c16:	07da      	lsls	r2, r3, #31
 8005c18:	d4e0      	bmi.n	8005bdc <_fflush_r+0xc>
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	059b      	lsls	r3, r3, #22
 8005c1e:	d4dd      	bmi.n	8005bdc <_fflush_r+0xc>
 8005c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c22:	f000 f908 	bl	8005e36 <__retarget_lock_release_recursive>
 8005c26:	e7d9      	b.n	8005bdc <_fflush_r+0xc>
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <_fflush_r+0x70>)
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	d101      	bne.n	8005c32 <_fflush_r+0x62>
 8005c2e:	68ac      	ldr	r4, [r5, #8]
 8005c30:	e7df      	b.n	8005bf2 <_fflush_r+0x22>
 8005c32:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <_fflush_r+0x74>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	bf08      	it	eq
 8005c38:	68ec      	ldreq	r4, [r5, #12]
 8005c3a:	e7da      	b.n	8005bf2 <_fflush_r+0x22>
 8005c3c:	0800bdd8 	.word	0x0800bdd8
 8005c40:	0800bdf8 	.word	0x0800bdf8
 8005c44:	0800bdb8 	.word	0x0800bdb8

08005c48 <std>:
 8005c48:	2300      	movs	r3, #0
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c56:	6083      	str	r3, [r0, #8]
 8005c58:	8181      	strh	r1, [r0, #12]
 8005c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c5c:	81c2      	strh	r2, [r0, #14]
 8005c5e:	6183      	str	r3, [r0, #24]
 8005c60:	4619      	mov	r1, r3
 8005c62:	2208      	movs	r2, #8
 8005c64:	305c      	adds	r0, #92	; 0x5c
 8005c66:	f7ff f867 	bl	8004d38 <memset>
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <std+0x38>)
 8005c6c:	6224      	str	r4, [r4, #32]
 8005c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <std+0x3c>)
 8005c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c74:	4b04      	ldr	r3, [pc, #16]	; (8005c88 <std+0x40>)
 8005c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <std+0x44>)
 8005c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	bf00      	nop
 8005c80:	08006055 	.word	0x08006055
 8005c84:	08006077 	.word	0x08006077
 8005c88:	080060af 	.word	0x080060af
 8005c8c:	080060d3 	.word	0x080060d3

08005c90 <_cleanup_r>:
 8005c90:	4901      	ldr	r1, [pc, #4]	; (8005c98 <_cleanup_r+0x8>)
 8005c92:	f000 b8af 	b.w	8005df4 <_fwalk_reent>
 8005c96:	bf00      	nop
 8005c98:	08005bd1 	.word	0x08005bd1

08005c9c <__sfmoreglue>:
 8005c9c:	2268      	movs	r2, #104	; 0x68
 8005c9e:	b570      	push	{r4, r5, r6, lr}
 8005ca0:	1e4d      	subs	r5, r1, #1
 8005ca2:	4355      	muls	r5, r2
 8005ca4:	460e      	mov	r6, r1
 8005ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005caa:	f7ff f979 	bl	8004fa0 <_malloc_r>
 8005cae:	4604      	mov	r4, r0
 8005cb0:	b140      	cbz	r0, 8005cc4 <__sfmoreglue+0x28>
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8005cb8:	300c      	adds	r0, #12
 8005cba:	60a0      	str	r0, [r4, #8]
 8005cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cc0:	f7ff f83a 	bl	8004d38 <memset>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}

08005cc8 <__sfp_lock_acquire>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	; (8005cd0 <__sfp_lock_acquire+0x8>)
 8005cca:	f000 b8b3 	b.w	8005e34 <__retarget_lock_acquire_recursive>
 8005cce:	bf00      	nop
 8005cd0:	20002f75 	.word	0x20002f75

08005cd4 <__sfp_lock_release>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__sfp_lock_release+0x8>)
 8005cd6:	f000 b8ae 	b.w	8005e36 <__retarget_lock_release_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20002f75 	.word	0x20002f75

08005ce0 <__sinit_lock_acquire>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__sinit_lock_acquire+0x8>)
 8005ce2:	f000 b8a7 	b.w	8005e34 <__retarget_lock_acquire_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20002f76 	.word	0x20002f76

08005cec <__sinit_lock_release>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__sinit_lock_release+0x8>)
 8005cee:	f000 b8a2 	b.w	8005e36 <__retarget_lock_release_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	20002f76 	.word	0x20002f76

08005cf8 <__sinit>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	f7ff fff0 	bl	8005ce0 <__sinit_lock_acquire>
 8005d00:	69a3      	ldr	r3, [r4, #24]
 8005d02:	b11b      	cbz	r3, 8005d0c <__sinit+0x14>
 8005d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d08:	f7ff bff0 	b.w	8005cec <__sinit_lock_release>
 8005d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d10:	6523      	str	r3, [r4, #80]	; 0x50
 8005d12:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <__sinit+0x68>)
 8005d14:	4a13      	ldr	r2, [pc, #76]	; (8005d64 <__sinit+0x6c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	bf08      	it	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	4620      	mov	r0, r4
 8005d22:	bf08      	it	eq
 8005d24:	61a3      	streq	r3, [r4, #24]
 8005d26:	f000 f81f 	bl	8005d68 <__sfp>
 8005d2a:	6060      	str	r0, [r4, #4]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 f81b 	bl	8005d68 <__sfp>
 8005d32:	60a0      	str	r0, [r4, #8]
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 f817 	bl	8005d68 <__sfp>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2104      	movs	r1, #4
 8005d3e:	60e0      	str	r0, [r4, #12]
 8005d40:	6860      	ldr	r0, [r4, #4]
 8005d42:	f7ff ff81 	bl	8005c48 <std>
 8005d46:	2201      	movs	r2, #1
 8005d48:	2109      	movs	r1, #9
 8005d4a:	68a0      	ldr	r0, [r4, #8]
 8005d4c:	f7ff ff7c 	bl	8005c48 <std>
 8005d50:	2202      	movs	r2, #2
 8005d52:	2112      	movs	r1, #18
 8005d54:	68e0      	ldr	r0, [r4, #12]
 8005d56:	f7ff ff77 	bl	8005c48 <std>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61a3      	str	r3, [r4, #24]
 8005d5e:	e7d1      	b.n	8005d04 <__sinit+0xc>
 8005d60:	0800bcd0 	.word	0x0800bcd0
 8005d64:	08005c91 	.word	0x08005c91

08005d68 <__sfp>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	4607      	mov	r7, r0
 8005d6c:	f7ff ffac 	bl	8005cc8 <__sfp_lock_acquire>
 8005d70:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <__sfp+0x84>)
 8005d72:	681e      	ldr	r6, [r3, #0]
 8005d74:	69b3      	ldr	r3, [r6, #24]
 8005d76:	b913      	cbnz	r3, 8005d7e <__sfp+0x16>
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f7ff ffbd 	bl	8005cf8 <__sinit>
 8005d7e:	3648      	adds	r6, #72	; 0x48
 8005d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	d503      	bpl.n	8005d90 <__sfp+0x28>
 8005d88:	6833      	ldr	r3, [r6, #0]
 8005d8a:	b30b      	cbz	r3, 8005dd0 <__sfp+0x68>
 8005d8c:	6836      	ldr	r6, [r6, #0]
 8005d8e:	e7f7      	b.n	8005d80 <__sfp+0x18>
 8005d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d94:	b9d5      	cbnz	r5, 8005dcc <__sfp+0x64>
 8005d96:	4b16      	ldr	r3, [pc, #88]	; (8005df0 <__sfp+0x88>)
 8005d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d9c:	60e3      	str	r3, [r4, #12]
 8005d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8005da0:	f000 f847 	bl	8005e32 <__retarget_lock_init_recursive>
 8005da4:	f7ff ff96 	bl	8005cd4 <__sfp_lock_release>
 8005da8:	2208      	movs	r2, #8
 8005daa:	4629      	mov	r1, r5
 8005dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005db4:	6025      	str	r5, [r4, #0]
 8005db6:	61a5      	str	r5, [r4, #24]
 8005db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dbc:	f7fe ffbc 	bl	8004d38 <memset>
 8005dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dc8:	4620      	mov	r0, r4
 8005dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dcc:	3468      	adds	r4, #104	; 0x68
 8005dce:	e7d9      	b.n	8005d84 <__sfp+0x1c>
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	f7ff ff62 	bl	8005c9c <__sfmoreglue>
 8005dd8:	4604      	mov	r4, r0
 8005dda:	6030      	str	r0, [r6, #0]
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1d5      	bne.n	8005d8c <__sfp+0x24>
 8005de0:	f7ff ff78 	bl	8005cd4 <__sfp_lock_release>
 8005de4:	230c      	movs	r3, #12
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	e7ee      	b.n	8005dc8 <__sfp+0x60>
 8005dea:	bf00      	nop
 8005dec:	0800bcd0 	.word	0x0800bcd0
 8005df0:	ffff0001 	.word	0xffff0001

08005df4 <_fwalk_reent>:
 8005df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005df8:	4606      	mov	r6, r0
 8005dfa:	4688      	mov	r8, r1
 8005dfc:	2700      	movs	r7, #0
 8005dfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e06:	f1b9 0901 	subs.w	r9, r9, #1
 8005e0a:	d505      	bpl.n	8005e18 <_fwalk_reent+0x24>
 8005e0c:	6824      	ldr	r4, [r4, #0]
 8005e0e:	2c00      	cmp	r4, #0
 8005e10:	d1f7      	bne.n	8005e02 <_fwalk_reent+0xe>
 8005e12:	4638      	mov	r0, r7
 8005e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e18:	89ab      	ldrh	r3, [r5, #12]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d907      	bls.n	8005e2e <_fwalk_reent+0x3a>
 8005e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e22:	3301      	adds	r3, #1
 8005e24:	d003      	beq.n	8005e2e <_fwalk_reent+0x3a>
 8005e26:	4629      	mov	r1, r5
 8005e28:	4630      	mov	r0, r6
 8005e2a:	47c0      	blx	r8
 8005e2c:	4307      	orrs	r7, r0
 8005e2e:	3568      	adds	r5, #104	; 0x68
 8005e30:	e7e9      	b.n	8005e06 <_fwalk_reent+0x12>

08005e32 <__retarget_lock_init_recursive>:
 8005e32:	4770      	bx	lr

08005e34 <__retarget_lock_acquire_recursive>:
 8005e34:	4770      	bx	lr

08005e36 <__retarget_lock_release_recursive>:
 8005e36:	4770      	bx	lr

08005e38 <__swhatbuf_r>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	460e      	mov	r6, r1
 8005e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e40:	4614      	mov	r4, r2
 8005e42:	2900      	cmp	r1, #0
 8005e44:	461d      	mov	r5, r3
 8005e46:	b096      	sub	sp, #88	; 0x58
 8005e48:	da08      	bge.n	8005e5c <__swhatbuf_r+0x24>
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e50:	602a      	str	r2, [r5, #0]
 8005e52:	061a      	lsls	r2, r3, #24
 8005e54:	d410      	bmi.n	8005e78 <__swhatbuf_r+0x40>
 8005e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e5a:	e00e      	b.n	8005e7a <__swhatbuf_r+0x42>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	f000 f95f 	bl	8006120 <_fstat_r>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	dbf1      	blt.n	8005e4a <__swhatbuf_r+0x12>
 8005e66:	9a01      	ldr	r2, [sp, #4]
 8005e68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e70:	425a      	negs	r2, r3
 8005e72:	415a      	adcs	r2, r3
 8005e74:	602a      	str	r2, [r5, #0]
 8005e76:	e7ee      	b.n	8005e56 <__swhatbuf_r+0x1e>
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	b016      	add	sp, #88	; 0x58
 8005e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e84 <__smakebuf_r>:
 8005e84:	898b      	ldrh	r3, [r1, #12]
 8005e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e88:	079d      	lsls	r5, r3, #30
 8005e8a:	4606      	mov	r6, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	d507      	bpl.n	8005ea0 <__smakebuf_r+0x1c>
 8005e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	2301      	movs	r3, #1
 8005e9a:	6163      	str	r3, [r4, #20]
 8005e9c:	b002      	add	sp, #8
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	466a      	mov	r2, sp
 8005ea2:	ab01      	add	r3, sp, #4
 8005ea4:	f7ff ffc8 	bl	8005e38 <__swhatbuf_r>
 8005ea8:	9900      	ldr	r1, [sp, #0]
 8005eaa:	4605      	mov	r5, r0
 8005eac:	4630      	mov	r0, r6
 8005eae:	f7ff f877 	bl	8004fa0 <_malloc_r>
 8005eb2:	b948      	cbnz	r0, 8005ec8 <__smakebuf_r+0x44>
 8005eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb8:	059a      	lsls	r2, r3, #22
 8005eba:	d4ef      	bmi.n	8005e9c <__smakebuf_r+0x18>
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	f043 0302 	orr.w	r3, r3, #2
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	e7e3      	b.n	8005e90 <__smakebuf_r+0xc>
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <__smakebuf_r+0x7c>)
 8005eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	6020      	str	r0, [r4, #0]
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	6120      	str	r0, [r4, #16]
 8005eda:	6163      	str	r3, [r4, #20]
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	b15b      	cbz	r3, 8005ef8 <__smakebuf_r+0x74>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee6:	f000 f92d 	bl	8006144 <_isatty_r>
 8005eea:	b128      	cbz	r0, 8005ef8 <__smakebuf_r+0x74>
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	89a0      	ldrh	r0, [r4, #12]
 8005efa:	4305      	orrs	r5, r0
 8005efc:	81a5      	strh	r5, [r4, #12]
 8005efe:	e7cd      	b.n	8005e9c <__smakebuf_r+0x18>
 8005f00:	08005c91 	.word	0x08005c91

08005f04 <memchr>:
 8005f04:	4603      	mov	r3, r0
 8005f06:	b510      	push	{r4, lr}
 8005f08:	b2c9      	uxtb	r1, r1
 8005f0a:	4402      	add	r2, r0
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	d101      	bne.n	8005f16 <memchr+0x12>
 8005f12:	2000      	movs	r0, #0
 8005f14:	e003      	b.n	8005f1e <memchr+0x1a>
 8005f16:	7804      	ldrb	r4, [r0, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	428c      	cmp	r4, r1
 8005f1c:	d1f6      	bne.n	8005f0c <memchr+0x8>
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <memmove>:
 8005f20:	4288      	cmp	r0, r1
 8005f22:	b510      	push	{r4, lr}
 8005f24:	eb01 0402 	add.w	r4, r1, r2
 8005f28:	d902      	bls.n	8005f30 <memmove+0x10>
 8005f2a:	4284      	cmp	r4, r0
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	d807      	bhi.n	8005f40 <memmove+0x20>
 8005f30:	1e43      	subs	r3, r0, #1
 8005f32:	42a1      	cmp	r1, r4
 8005f34:	d008      	beq.n	8005f48 <memmove+0x28>
 8005f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f3e:	e7f8      	b.n	8005f32 <memmove+0x12>
 8005f40:	4601      	mov	r1, r0
 8005f42:	4402      	add	r2, r0
 8005f44:	428a      	cmp	r2, r1
 8005f46:	d100      	bne.n	8005f4a <memmove+0x2a>
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f52:	e7f7      	b.n	8005f44 <memmove+0x24>

08005f54 <__malloc_lock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	; (8005f5c <__malloc_lock+0x8>)
 8005f56:	f7ff bf6d 	b.w	8005e34 <__retarget_lock_acquire_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	20002f74 	.word	0x20002f74

08005f60 <__malloc_unlock>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__malloc_unlock+0x8>)
 8005f62:	f7ff bf68 	b.w	8005e36 <__retarget_lock_release_recursive>
 8005f66:	bf00      	nop
 8005f68:	20002f74 	.word	0x20002f74

08005f6c <_realloc_r>:
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	4680      	mov	r8, r0
 8005f72:	4614      	mov	r4, r2
 8005f74:	460e      	mov	r6, r1
 8005f76:	b921      	cbnz	r1, 8005f82 <_realloc_r+0x16>
 8005f78:	4611      	mov	r1, r2
 8005f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7e:	f7ff b80f 	b.w	8004fa0 <_malloc_r>
 8005f82:	b92a      	cbnz	r2, 8005f90 <_realloc_r+0x24>
 8005f84:	f7fe ffa4 	bl	8004ed0 <_free_r>
 8005f88:	4625      	mov	r5, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f90:	f000 f8fa 	bl	8006188 <_malloc_usable_size_r>
 8005f94:	4284      	cmp	r4, r0
 8005f96:	4607      	mov	r7, r0
 8005f98:	d802      	bhi.n	8005fa0 <_realloc_r+0x34>
 8005f9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f9e:	d812      	bhi.n	8005fc6 <_realloc_r+0x5a>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7fe fffc 	bl	8004fa0 <_malloc_r>
 8005fa8:	4605      	mov	r5, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d0ed      	beq.n	8005f8a <_realloc_r+0x1e>
 8005fae:	42bc      	cmp	r4, r7
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	bf28      	it	cs
 8005fb6:	463a      	movcs	r2, r7
 8005fb8:	f7fe feb0 	bl	8004d1c <memcpy>
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	f7fe ff86 	bl	8004ed0 <_free_r>
 8005fc4:	e7e1      	b.n	8005f8a <_realloc_r+0x1e>
 8005fc6:	4635      	mov	r5, r6
 8005fc8:	e7df      	b.n	8005f8a <_realloc_r+0x1e>

08005fca <_raise_r>:
 8005fca:	291f      	cmp	r1, #31
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	d904      	bls.n	8005fde <_raise_r+0x14>
 8005fd4:	2316      	movs	r3, #22
 8005fd6:	6003      	str	r3, [r0, #0]
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
 8005fde:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005fe0:	b112      	cbz	r2, 8005fe8 <_raise_r+0x1e>
 8005fe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fe6:	b94b      	cbnz	r3, 8005ffc <_raise_r+0x32>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f831 	bl	8006050 <_getpid_r>
 8005fee:	462a      	mov	r2, r5
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ff8:	f000 b818 	b.w	800602c <_kill_r>
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d00a      	beq.n	8006016 <_raise_r+0x4c>
 8006000:	1c59      	adds	r1, r3, #1
 8006002:	d103      	bne.n	800600c <_raise_r+0x42>
 8006004:	2316      	movs	r3, #22
 8006006:	6003      	str	r3, [r0, #0]
 8006008:	2001      	movs	r0, #1
 800600a:	e7e7      	b.n	8005fdc <_raise_r+0x12>
 800600c:	2400      	movs	r4, #0
 800600e:	4628      	mov	r0, r5
 8006010:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006014:	4798      	blx	r3
 8006016:	2000      	movs	r0, #0
 8006018:	e7e0      	b.n	8005fdc <_raise_r+0x12>
	...

0800601c <raise>:
 800601c:	4b02      	ldr	r3, [pc, #8]	; (8006028 <raise+0xc>)
 800601e:	4601      	mov	r1, r0
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	f7ff bfd2 	b.w	8005fca <_raise_r>
 8006026:	bf00      	nop
 8006028:	20000218 	.word	0x20000218

0800602c <_kill_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	2300      	movs	r3, #0
 8006030:	4d06      	ldr	r5, [pc, #24]	; (800604c <_kill_r+0x20>)
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	f7fb f84e 	bl	80010da <_kill>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d102      	bne.n	8006048 <_kill_r+0x1c>
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	b103      	cbz	r3, 8006048 <_kill_r+0x1c>
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	bd38      	pop	{r3, r4, r5, pc}
 800604a:	bf00      	nop
 800604c:	20002f78 	.word	0x20002f78

08006050 <_getpid_r>:
 8006050:	f7fb b83c 	b.w	80010cc <_getpid>

08006054 <__sread>:
 8006054:	b510      	push	{r4, lr}
 8006056:	460c      	mov	r4, r1
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	f000 f89c 	bl	8006198 <_read_r>
 8006060:	2800      	cmp	r0, #0
 8006062:	bfab      	itete	ge
 8006064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006066:	89a3      	ldrhlt	r3, [r4, #12]
 8006068:	181b      	addge	r3, r3, r0
 800606a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800606e:	bfac      	ite	ge
 8006070:	6563      	strge	r3, [r4, #84]	; 0x54
 8006072:	81a3      	strhlt	r3, [r4, #12]
 8006074:	bd10      	pop	{r4, pc}

08006076 <__swrite>:
 8006076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607a:	461f      	mov	r7, r3
 800607c:	898b      	ldrh	r3, [r1, #12]
 800607e:	4605      	mov	r5, r0
 8006080:	05db      	lsls	r3, r3, #23
 8006082:	460c      	mov	r4, r1
 8006084:	4616      	mov	r6, r2
 8006086:	d505      	bpl.n	8006094 <__swrite+0x1e>
 8006088:	2302      	movs	r3, #2
 800608a:	2200      	movs	r2, #0
 800608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006090:	f000 f868 	bl	8006164 <_lseek_r>
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	4632      	mov	r2, r6
 8006098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800609c:	81a3      	strh	r3, [r4, #12]
 800609e:	4628      	mov	r0, r5
 80060a0:	463b      	mov	r3, r7
 80060a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060aa:	f000 b817 	b.w	80060dc <_write_r>

080060ae <__sseek>:
 80060ae:	b510      	push	{r4, lr}
 80060b0:	460c      	mov	r4, r1
 80060b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b6:	f000 f855 	bl	8006164 <_lseek_r>
 80060ba:	1c43      	adds	r3, r0, #1
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	bf15      	itete	ne
 80060c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80060c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060ca:	81a3      	strheq	r3, [r4, #12]
 80060cc:	bf18      	it	ne
 80060ce:	81a3      	strhne	r3, [r4, #12]
 80060d0:	bd10      	pop	{r4, pc}

080060d2 <__sclose>:
 80060d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d6:	f000 b813 	b.w	8006100 <_close_r>
	...

080060dc <_write_r>:
 80060dc:	b538      	push	{r3, r4, r5, lr}
 80060de:	4604      	mov	r4, r0
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	2200      	movs	r2, #0
 80060e6:	4d05      	ldr	r5, [pc, #20]	; (80060fc <_write_r+0x20>)
 80060e8:	602a      	str	r2, [r5, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f7fb f82c 	bl	8001148 <_write>
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	d102      	bne.n	80060fa <_write_r+0x1e>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	b103      	cbz	r3, 80060fa <_write_r+0x1e>
 80060f8:	6023      	str	r3, [r4, #0]
 80060fa:	bd38      	pop	{r3, r4, r5, pc}
 80060fc:	20002f78 	.word	0x20002f78

08006100 <_close_r>:
 8006100:	b538      	push	{r3, r4, r5, lr}
 8006102:	2300      	movs	r3, #0
 8006104:	4d05      	ldr	r5, [pc, #20]	; (800611c <_close_r+0x1c>)
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	f7fb f838 	bl	8001180 <_close>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_close_r+0x1a>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_close_r+0x1a>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20002f78 	.word	0x20002f78

08006120 <_fstat_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	2300      	movs	r3, #0
 8006124:	4d06      	ldr	r5, [pc, #24]	; (8006140 <_fstat_r+0x20>)
 8006126:	4604      	mov	r4, r0
 8006128:	4608      	mov	r0, r1
 800612a:	4611      	mov	r1, r2
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	f7fb f832 	bl	8001196 <_fstat>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d102      	bne.n	800613c <_fstat_r+0x1c>
 8006136:	682b      	ldr	r3, [r5, #0]
 8006138:	b103      	cbz	r3, 800613c <_fstat_r+0x1c>
 800613a:	6023      	str	r3, [r4, #0]
 800613c:	bd38      	pop	{r3, r4, r5, pc}
 800613e:	bf00      	nop
 8006140:	20002f78 	.word	0x20002f78

08006144 <_isatty_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	2300      	movs	r3, #0
 8006148:	4d05      	ldr	r5, [pc, #20]	; (8006160 <_isatty_r+0x1c>)
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fb f830 	bl	80011b4 <_isatty>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_isatty_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_isatty_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	20002f78 	.word	0x20002f78

08006164 <_lseek_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	4611      	mov	r1, r2
 800616c:	2200      	movs	r2, #0
 800616e:	4d05      	ldr	r5, [pc, #20]	; (8006184 <_lseek_r+0x20>)
 8006170:	602a      	str	r2, [r5, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	f7fb f828 	bl	80011c8 <_lseek>
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d102      	bne.n	8006182 <_lseek_r+0x1e>
 800617c:	682b      	ldr	r3, [r5, #0]
 800617e:	b103      	cbz	r3, 8006182 <_lseek_r+0x1e>
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	bd38      	pop	{r3, r4, r5, pc}
 8006184:	20002f78 	.word	0x20002f78

08006188 <_malloc_usable_size_r>:
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f18      	subs	r0, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfbc      	itt	lt
 8006192:	580b      	ldrlt	r3, [r1, r0]
 8006194:	18c0      	addlt	r0, r0, r3
 8006196:	4770      	bx	lr

08006198 <_read_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4604      	mov	r4, r0
 800619c:	4608      	mov	r0, r1
 800619e:	4611      	mov	r1, r2
 80061a0:	2200      	movs	r2, #0
 80061a2:	4d05      	ldr	r5, [pc, #20]	; (80061b8 <_read_r+0x20>)
 80061a4:	602a      	str	r2, [r5, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f7fa ffb1 	bl	800110e <_read>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_read_r+0x1e>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_read_r+0x1e>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	20002f78 	.word	0x20002f78

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
