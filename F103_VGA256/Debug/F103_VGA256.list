
F103_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000540c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007980  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce98  0800ce98  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce98  0800ce98  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce98  0800ce98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce98  0800ce98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce9c  0800ce9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800cea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c8  20000080  0800cf20  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002748  0800cf20  00022748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a51b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d66  00000000  00000000  0002a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002c330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858b  00000000  00000000  0002d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1d7  00000000  00000000  00045e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a341  00000000  00000000  00052042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000398c  00000000  00000000  000dc3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08005500 	.word	0x08005500

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08005500 	.word	0x08005500

0800014c <VGA_update>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VGA_update(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	vga_voff[0]=VOFFSET;
 8000152:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <VGA_update+0x44>)
 8000154:	881a      	ldrh	r2, [r3, #0]
 8000156:	4b0f      	ldr	r3, [pc, #60]	; (8000194 <VGA_update+0x48>)
 8000158:	801a      	strh	r2, [r3, #0]
	for(int i=1;i<16;i++){
 800015a:	2301      	movs	r3, #1
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	e00d      	b.n	800017c <VGA_update+0x30>
		vga_voff[i]=vga_voff[i-1]+VGA_LBUFFERSIZE;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3b01      	subs	r3, #1
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <VGA_update+0x48>)
 8000166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800016a:	3380      	adds	r3, #128	; 0x80
 800016c:	b299      	uxth	r1, r3
 800016e:	4a09      	ldr	r2, [pc, #36]	; (8000194 <VGA_update+0x48>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=1;i<16;i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	ddee      	ble.n	8000160 <VGA_update+0x14>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000000 	.word	0x20000000
 8000194:	200001bc 	.word	0x200001bc

08000198 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
     if(htim==&htim2){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4a19      	ldr	r2, [pc, #100]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d12b      	bne.n	8000200 <HAL_TIM_PeriodElapsedCallback+0x68>
     //V-sync detected
		line=-4;
 80001a8:	4b18      	ldr	r3, [pc, #96]	; (800020c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80001aa:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80001ae:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 80001b0:	4b17      	ldr	r3, [pc, #92]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d023      	beq.n	8000200 <HAL_TIM_PeriodElapsedCallback+0x68>
			for(int i=0;i<preVoffset;i++);
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
 80001bc:	e002      	b.n	80001c4 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	3301      	adds	r3, #1
 80001c2:	60fb      	str	r3, [r7, #12]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80001c6:	881b      	ldrh	r3, [r3, #0]
 80001c8:	461a      	mov	r2, r3
 80001ca:	68fb      	ldr	r3, [r7, #12]
 80001cc:	4293      	cmp	r3, r2
 80001ce:	dbf6      	blt.n	80001be <HAL_TIM_PeriodElapsedCallback+0x26>
			if(
            HAL_DMA_Start_IT(&hdma_tim4_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 80001d0:	4911      	ldr	r1, [pc, #68]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001da:	4811      	ldr	r0, [pc, #68]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80001dc:	f001 fe50 	bl	8001e80 <HAL_DMA_Start_IT>
 80001e0:	4603      	mov	r3, r0
			if(
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d009      	beq.n	80001fa <HAL_TIM_PeriodElapsedCallback+0x62>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80001e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80001ec:	f002 fa70 	bl	80026d0 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f001 fcb8 	bl	8001b68 <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80001f8:	e7f5      	b.n	80001e6 <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
			}
			firstTrig=0;
 80001fa:	4b05      	ldr	r3, [pc, #20]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000200:	bf00      	nop
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200000e4 	.word	0x200000e4
 800020c:	200001ba 	.word	0x200001ba
 8000210:	20000004 	.word	0x20000004
 8000214:	20000002 	.word	0x20000002
 8000218:	200001e4 	.word	0x200001e4
 800021c:	200001dc 	.word	0x200001dc
 8000220:	20000174 	.word	0x20000174
 8000224:	40011000 	.word	0x40011000

08000228 <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 8000230:	4b2c      	ldr	r3, [pc, #176]	; (80002e4 <DMA_HalfCpltCallback+0xbc>)
 8000232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000236:	2b00      	cmp	r3, #0
 8000238:	db04      	blt.n	8000244 <DMA_HalfCpltCallback+0x1c>
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <DMA_HalfCpltCallback+0xbc>)
 800023c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000240:	2b4a      	cmp	r3, #74	; 0x4a
 8000242:	dd06      	ble.n	8000252 <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000248:	2100      	movs	r1, #0
 800024a:	4827      	ldr	r0, [pc, #156]	; (80002e8 <DMA_HalfCpltCallback+0xc0>)
 800024c:	f003 ff44 	bl	80040d8 <memset>
 8000250:	e01c      	b.n	800028c <DMA_HalfCpltCallback+0x64>
	}else{
		for(int i=0;i<8;i++){
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	e016      	b.n	8000286 <DMA_HalfCpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 8000258:	4a24      	ldr	r2, [pc, #144]	; (80002ec <DMA_HalfCpltCallback+0xc4>)
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000260:	461a      	mov	r2, r3
 8000262:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <DMA_HalfCpltCallback+0xc0>)
 8000264:	18d0      	adds	r0, r2, r3
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <DMA_HalfCpltCallback+0xbc>)
 8000268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800026c:	461a      	mov	r2, r3
 800026e:	2364      	movs	r3, #100	; 0x64
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <DMA_HalfCpltCallback+0xc8>)
 8000276:	4413      	add	r3, r2
 8000278:	2264      	movs	r2, #100	; 0x64
 800027a:	4619      	mov	r1, r3
 800027c:	f003 ff1e 	bl	80040bc <memcpy>
		for(int i=0;i<8;i++){
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	3301      	adds	r3, #1
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	2b07      	cmp	r3, #7
 800028a:	dde5      	ble.n	8000258 <DMA_HalfCpltCallback+0x30>
		}
	}
	line++;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <DMA_HalfCpltCallback+0xbc>)
 800028e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000292:	b29b      	uxth	r3, r3
 8000294:	3301      	adds	r3, #1
 8000296:	b29b      	uxth	r3, r3
 8000298:	b21a      	sxth	r2, r3
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <DMA_HalfCpltCallback+0xbc>)
 800029c:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <DMA_HalfCpltCallback+0xcc>)
 80002a0:	881b      	ldrh	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d00a      	beq.n	80002bc <DMA_HalfCpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80002a6:	4814      	ldr	r0, [pc, #80]	; (80002f8 <DMA_HalfCpltCallback+0xd0>)
 80002a8:	f001 fe84 	bl	8001fb4 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80002ac:	4b13      	ldr	r3, [pc, #76]	; (80002fc <DMA_HalfCpltCallback+0xd4>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <DMA_HalfCpltCallback+0xcc>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80002b8:	f7ff ff48 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <DMA_HalfCpltCallback+0xbc>)
 80002be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002c2:	2b4a      	cmp	r3, #74	; 0x4a
 80002c4:	dd09      	ble.n	80002da <DMA_HalfCpltCallback+0xb2>
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <DMA_HalfCpltCallback+0xd4>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d105      	bne.n	80002da <DMA_HalfCpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80002ce:	480a      	ldr	r0, [pc, #40]	; (80002f8 <DMA_HalfCpltCallback+0xd0>)
 80002d0:	f001 fe70 	bl	8001fb4 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <DMA_HalfCpltCallback+0xd4>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	801a      	strh	r2, [r3, #0]
	}
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200001ba 	.word	0x200001ba
 80002e8:	200001e4 	.word	0x200001e4
 80002ec:	200001bc 	.word	0x200001bc
 80002f0:	200009e4 	.word	0x200009e4
 80002f4:	200001b8 	.word	0x200001b8
 80002f8:	20000174 	.word	0x20000174
 80002fc:	20000004 	.word	0x20000004

08000300 <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <DMA_CpltCallback+0xbc>)
 800030a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800030e:	2b00      	cmp	r3, #0
 8000310:	db04      	blt.n	800031c <DMA_CpltCallback+0x1c>
 8000312:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <DMA_CpltCallback+0xbc>)
 8000314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000318:	2b4a      	cmp	r3, #74	; 0x4a
 800031a:	dd06      	ble.n	800032a <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 800031c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000320:	2100      	movs	r1, #0
 8000322:	4827      	ldr	r0, [pc, #156]	; (80003c0 <DMA_CpltCallback+0xc0>)
 8000324:	f003 fed8 	bl	80040d8 <memset>
 8000328:	e01c      	b.n	8000364 <DMA_CpltCallback+0x64>
	}else{
		for(int i=8;i<16;i++){
 800032a:	2308      	movs	r3, #8
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e016      	b.n	800035e <DMA_CpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 8000330:	4a24      	ldr	r2, [pc, #144]	; (80003c4 <DMA_CpltCallback+0xc4>)
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000338:	461a      	mov	r2, r3
 800033a:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <DMA_CpltCallback+0xc0>)
 800033c:	18d0      	adds	r0, r2, r3
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <DMA_CpltCallback+0xbc>)
 8000340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000344:	461a      	mov	r2, r3
 8000346:	2364      	movs	r3, #100	; 0x64
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	4a1e      	ldr	r2, [pc, #120]	; (80003c8 <DMA_CpltCallback+0xc8>)
 800034e:	4413      	add	r3, r2
 8000350:	2264      	movs	r2, #100	; 0x64
 8000352:	4619      	mov	r1, r3
 8000354:	f003 feb2 	bl	80040bc <memcpy>
		for(int i=8;i<16;i++){
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3301      	adds	r3, #1
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	2b0f      	cmp	r3, #15
 8000362:	dde5      	ble.n	8000330 <DMA_CpltCallback+0x30>
		}
	}
	line++;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <DMA_CpltCallback+0xbc>)
 8000366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800036a:	b29b      	uxth	r3, r3
 800036c:	3301      	adds	r3, #1
 800036e:	b29b      	uxth	r3, r3
 8000370:	b21a      	sxth	r2, r3
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <DMA_CpltCallback+0xbc>)
 8000374:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <DMA_CpltCallback+0xcc>)
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d00a      	beq.n	8000394 <DMA_CpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 800037e:	4814      	ldr	r0, [pc, #80]	; (80003d0 <DMA_CpltCallback+0xd0>)
 8000380:	f001 fe18 	bl	8001fb4 <HAL_DMA_Abort_IT>
		firstTrig=1;
 8000384:	4b13      	ldr	r3, [pc, #76]	; (80003d4 <DMA_CpltCallback+0xd4>)
 8000386:	2201      	movs	r2, #1
 8000388:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <DMA_CpltCallback+0xcc>)
 800038c:	2200      	movs	r2, #0
 800038e:	801a      	strh	r2, [r3, #0]
		VGA_update();
 8000390:	f7ff fedc 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <DMA_CpltCallback+0xbc>)
 8000396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800039a:	2b4a      	cmp	r3, #74	; 0x4a
 800039c:	dd09      	ble.n	80003b2 <DMA_CpltCallback+0xb2>
 800039e:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <DMA_CpltCallback+0xd4>)
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d105      	bne.n	80003b2 <DMA_CpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003a6:	480a      	ldr	r0, [pc, #40]	; (80003d0 <DMA_CpltCallback+0xd0>)
 80003a8:	f001 fe04 	bl	8001fb4 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <DMA_CpltCallback+0xd4>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	801a      	strh	r2, [r3, #0]
	}
}
 80003b2:	bf00      	nop
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200001ba 	.word	0x200001ba
 80003c0:	200001e4 	.word	0x200001e4
 80003c4:	200001bc 	.word	0x200001bc
 80003c8:	200009e4 	.word	0x200009e4
 80003cc:	200001b8 	.word	0x200001b8
 80003d0:	20000174 	.word	0x20000174
 80003d4:	20000004 	.word	0x20000004

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b590      	push	{r4, r7, lr}
 80003da:	b093      	sub	sp, #76	; 0x4c
 80003dc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  VGA_update();
 80003de:	f7ff feb5 	bl	800014c <VGA_update>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e2:	f001 fb5f 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e6:	f000 fa69 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ea:	f000 fc2f 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80003ee:	f000 fc0f 	bl	8000c10 <MX_DMA_Init>
  MX_TIM1_Init();
 80003f2:	f000 faa9 	bl	8000948 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003f6:	f000 fb47 	bl	8000a88 <MX_TIM2_Init>
  MX_TIM4_Init();
 80003fa:	f000 fbbd 	bl	8000b78 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim4_up);
 80003fe:	4813      	ldr	r0, [pc, #76]	; (800044c <main+0x74>)
 8000400:	f001 fd9d 	bl	8001f3e <HAL_DMA_Abort>
    if(
    	  HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <main+0x78>)
 8000406:	2101      	movs	r1, #1
 8000408:	4810      	ldr	r0, [pc, #64]	; (800044c <main+0x74>)
 800040a:	f001 ff4f 	bl	80022ac <HAL_DMA_RegisterCallback>
 800040e:	4603      	mov	r3, r0
    if(
 8000410:	2b00      	cmp	r3, #0
 8000412:	d009      	beq.n	8000428 <main+0x50>
    	  !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000418:	480e      	ldr	r0, [pc, #56]	; (8000454 <main+0x7c>)
 800041a:	f002 f959 	bl	80026d0 <HAL_GPIO_TogglePin>
    		  HAL_Delay(500);
 800041e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000422:	f001 fba1 	bl	8001b68 <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000426:	e7f5      	b.n	8000414 <main+0x3c>
    	  }
    }
    if(
          HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <main+0x80>)
 800042a:	2100      	movs	r1, #0
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <main+0x74>)
 800042e:	f001 ff3d 	bl	80022ac <HAL_DMA_RegisterCallback>
 8000432:	4603      	mov	r3, r0
    if(
 8000434:	2b00      	cmp	r3, #0
 8000436:	d011      	beq.n	800045c <main+0x84>
          !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <main+0x7c>)
 800043e:	f002 f947 	bl	80026d0 <HAL_GPIO_TogglePin>
    		  HAL_Delay(250);
 8000442:	20fa      	movs	r0, #250	; 0xfa
 8000444:	f001 fb90 	bl	8001b68 <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000448:	e7f6      	b.n	8000438 <main+0x60>
 800044a:	bf00      	nop
 800044c:	20000174 	.word	0x20000174
 8000450:	08000229 	.word	0x08000229
 8000454:	40011000 	.word	0x40011000
 8000458:	08000301 	.word	0x08000301
    	  }
    }
    GPIOB_ODR = (uint32_t)&(GPIOB->ODR)+1;
 800045c:	4bc1      	ldr	r3, [pc, #772]	; (8000764 <main+0x38c>)
 800045e:	4ac2      	ldr	r2, [pc, #776]	; (8000768 <main+0x390>)
 8000460:	601a      	str	r2, [r3, #0]

    //Start GPIO-DMA output
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_TC);
 8000462:	4bc2      	ldr	r3, [pc, #776]	; (800076c <main+0x394>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4bc0      	ldr	r3, [pc, #768]	; (800076c <main+0x394>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f042 0202 	orr.w	r2, r2, #2
 8000470:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_HT);
 8000472:	4bbe      	ldr	r3, [pc, #760]	; (800076c <main+0x394>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4bbc      	ldr	r3, [pc, #752]	; (800076c <main+0x394>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f042 0204 	orr.w	r2, r2, #4
 8000480:	601a      	str	r2, [r3, #0]
    __HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_UPDATE);
 8000482:	4bbb      	ldr	r3, [pc, #748]	; (8000770 <main+0x398>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	68da      	ldr	r2, [r3, #12]
 8000488:	4bb9      	ldr	r3, [pc, #740]	; (8000770 <main+0x398>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000490:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start(&htim4);
 8000492:	48b7      	ldr	r0, [pc, #732]	; (8000770 <main+0x398>)
 8000494:	f002 fd6e 	bl	8002f74 <HAL_TIM_Base_Start>

    //Start H-sync
    HAL_TIM_Base_Start_IT(&htim1);
 8000498:	48b6      	ldr	r0, [pc, #728]	; (8000774 <main+0x39c>)
 800049a:	f002 fdb5 	bl	8003008 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800049e:	2100      	movs	r1, #0
 80004a0:	48b4      	ldr	r0, [pc, #720]	; (8000774 <main+0x39c>)
 80004a2:	f002 fe5b 	bl	800315c <HAL_TIM_PWM_Start>

    //Start V-sync
    HAL_TIM_Base_Start_IT(&htim2);
 80004a6:	48b4      	ldr	r0, [pc, #720]	; (8000778 <main+0x3a0>)
 80004a8:	f002 fdae 	bl	8003008 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80004ac:	2100      	movs	r1, #0
 80004ae:	48b2      	ldr	r0, [pc, #712]	; (8000778 <main+0x3a0>)
 80004b0:	f002 fe54 	bl	800315c <HAL_TIM_PWM_Start>



    HAL_Delay(100);
 80004b4:	2064      	movs	r0, #100	; 0x64
 80004b6:	f001 fb57 	bl	8001b68 <HAL_Delay>
    vga_stop=1;
 80004ba:	4bb0      	ldr	r3, [pc, #704]	; (800077c <main+0x3a4>)
 80004bc:	2201      	movs	r2, #1
 80004be:	801a      	strh	r2, [r3, #0]

    ClearScreen(VGA_BLACK);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fe33 	bl	800112c <ClearScreen>
    DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 80004c6:	23ff      	movs	r3, #255	; 0xff
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2348      	movs	r3, #72	; 0x48
 80004cc:	2263      	movs	r2, #99	; 0x63
 80004ce:	2100      	movs	r1, #0
 80004d0:	2000      	movs	r0, #0
 80004d2:	f001 f8f7 	bl	80016c4 <DrawRectangle>
    char msg[32]="Testing";
 80004d6:	4aaa      	ldr	r2, [pc, #680]	; (8000780 <main+0x3a8>)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004de:	e883 0003 	stmia.w	r3, {r0, r1}
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
 80004f2:	615a      	str	r2, [r3, #20]
    SetCursor(3,3);
 80004f4:	2103      	movs	r1, #3
 80004f6:	2003      	movs	r0, #3
 80004f8:	f001 f824 	bl	8001544 <SetCursor>
    WriteString(msg,Font_7x10,VGA_GREEN);
 80004fc:	4aa1      	ldr	r2, [pc, #644]	; (8000784 <main+0x3ac>)
 80004fe:	1d38      	adds	r0, r7, #4
 8000500:	231c      	movs	r3, #28
 8000502:	ca06      	ldmia	r2, {r1, r2}
 8000504:	f000 fff8 	bl	80014f8 <WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int r,x,y,w,h,z=0,c;
 8000508:	2300      	movs	r3, #0
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
	  r = rand()%25;
 800050c:	f003 fdec 	bl	80040e8 <rand>
 8000510:	4602      	mov	r2, r0
 8000512:	4b9d      	ldr	r3, [pc, #628]	; (8000788 <main+0x3b0>)
 8000514:	fb83 1302 	smull	r1, r3, r3, r2
 8000518:	10d9      	asrs	r1, r3, #3
 800051a:	17d3      	asrs	r3, r2, #31
 800051c:	1ac9      	subs	r1, r1, r3
 800051e:	460b      	mov	r3, r1
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	0099      	lsls	r1, r3, #2
 8000526:	440b      	add	r3, r1
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 800052c:	f003 fddc 	bl	80040e8 <rand>
 8000530:	4603      	mov	r3, r0
 8000532:	4a95      	ldr	r2, [pc, #596]	; (8000788 <main+0x3b0>)
 8000534:	fb82 1203 	smull	r1, r2, r2, r3
 8000538:	1151      	asrs	r1, r2, #5
 800053a:	17da      	asrs	r2, r3, #31
 800053c:	1a8a      	subs	r2, r1, r2
 800053e:	2164      	movs	r1, #100	; 0x64
 8000540:	fb01 f202 	mul.w	r2, r1, r2
 8000544:	1a9b      	subs	r3, r3, r2
 8000546:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000548:	f003 fdce 	bl	80040e8 <rand>
 800054c:	4602      	mov	r2, r0
 800054e:	4b8f      	ldr	r3, [pc, #572]	; (800078c <main+0x3b4>)
 8000550:	fb83 1302 	smull	r1, r3, r3, r2
 8000554:	4413      	add	r3, r2
 8000556:	1199      	asrs	r1, r3, #6
 8000558:	17d3      	asrs	r3, r2, #31
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	460b      	mov	r3, r1
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	440b      	add	r3, r1
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	440b      	add	r3, r1
 8000566:	1ad3      	subs	r3, r2, r3
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 800056a:	f003 fdbd 	bl	80040e8 <rand>
 800056e:	4603      	mov	r3, r0
 8000570:	425a      	negs	r2, r3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	bf58      	it	pl
 8000578:	4253      	negpl	r3, r2
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 800057c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800057e:	b218      	sxth	r0, r3
 8000580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000582:	b219      	sxth	r1, r3
 8000584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000586:	b21a      	sxth	r2, r3
 8000588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f001 f808 	bl	80015a0 <DrawCircle>
	  r = rand()%25;
 8000590:	f003 fdaa 	bl	80040e8 <rand>
 8000594:	4602      	mov	r2, r0
 8000596:	4b7c      	ldr	r3, [pc, #496]	; (8000788 <main+0x3b0>)
 8000598:	fb83 1302 	smull	r1, r3, r3, r2
 800059c:	10d9      	asrs	r1, r3, #3
 800059e:	17d3      	asrs	r3, r2, #31
 80005a0:	1ac9      	subs	r1, r1, r3
 80005a2:	460b      	mov	r3, r1
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	0099      	lsls	r1, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 80005b0:	f003 fd9a 	bl	80040e8 <rand>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a74      	ldr	r2, [pc, #464]	; (8000788 <main+0x3b0>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1151      	asrs	r1, r2, #5
 80005be:	17da      	asrs	r2, r3, #31
 80005c0:	1a8a      	subs	r2, r1, r2
 80005c2:	2164      	movs	r1, #100	; 0x64
 80005c4:	fb01 f202 	mul.w	r2, r1, r2
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80005cc:	f003 fd8c 	bl	80040e8 <rand>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b6e      	ldr	r3, [pc, #440]	; (800078c <main+0x3b4>)
 80005d4:	fb83 1302 	smull	r1, r3, r3, r2
 80005d8:	4413      	add	r3, r2
 80005da:	1199      	asrs	r1, r3, #6
 80005dc:	17d3      	asrs	r3, r2, #31
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	460b      	mov	r3, r1
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	440b      	add	r3, r1
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	440b      	add	r3, r1
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 80005ee:	f003 fd7b 	bl	80040e8 <rand>
 80005f2:	4603      	mov	r3, r0
 80005f4:	425a      	negs	r2, r3
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	bf58      	it	pl
 80005fc:	4253      	negpl	r3, r2
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 8000600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000602:	b218      	sxth	r0, r3
 8000604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000606:	b219      	sxth	r1, r3
 8000608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800060a:	b21a      	sxth	r2, r3
 800060c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060e:	b2db      	uxtb	r3, r3
 8000610:	f001 f8e1 	bl	80017d6 <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000614:	f003 fd68 	bl	80040e8 <rand>
 8000618:	4603      	mov	r3, r0
 800061a:	4a5b      	ldr	r2, [pc, #364]	; (8000788 <main+0x3b0>)
 800061c:	fb82 1203 	smull	r1, r2, r2, r3
 8000620:	1151      	asrs	r1, r2, #5
 8000622:	17da      	asrs	r2, r3, #31
 8000624:	1a8a      	subs	r2, r1, r2
 8000626:	2164      	movs	r1, #100	; 0x64
 8000628:	fb01 f202 	mul.w	r2, r1, r2
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000630:	f003 fd5a 	bl	80040e8 <rand>
 8000634:	4602      	mov	r2, r0
 8000636:	4b55      	ldr	r3, [pc, #340]	; (800078c <main+0x3b4>)
 8000638:	fb83 1302 	smull	r1, r3, r3, r2
 800063c:	4413      	add	r3, r2
 800063e:	1199      	asrs	r1, r3, #6
 8000640:	17d3      	asrs	r3, r2, #31
 8000642:	1ac9      	subs	r1, r1, r3
 8000644:	460b      	mov	r3, r1
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	440b      	add	r3, r1
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 8000652:	f003 fd49 	bl	80040e8 <rand>
 8000656:	4602      	mov	r2, r0
 8000658:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x3b8>)
 800065a:	fb83 1302 	smull	r1, r3, r3, r2
 800065e:	4413      	add	r3, r2
 8000660:	1119      	asrs	r1, r3, #4
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	011b      	lsls	r3, r3, #4
 800066a:	1a5b      	subs	r3, r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 8000672:	f003 fd39 	bl	80040e8 <rand>
 8000676:	4602      	mov	r2, r0
 8000678:	4b45      	ldr	r3, [pc, #276]	; (8000790 <main+0x3b8>)
 800067a:	fb83 1302 	smull	r1, r3, r3, r2
 800067e:	4413      	add	r3, r2
 8000680:	1119      	asrs	r1, r3, #4
 8000682:	17d3      	asrs	r3, r2, #31
 8000684:	1ac9      	subs	r1, r1, r3
 8000686:	460b      	mov	r3, r1
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	1a5b      	subs	r3, r3, r1
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000692:	f003 fd29 	bl	80040e8 <rand>
 8000696:	4603      	mov	r3, r0
 8000698:	425a      	negs	r2, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	bf58      	it	pl
 80006a0:	4253      	negpl	r3, r2
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	b218      	sxth	r0, r3
 80006a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006aa:	b219      	sxth	r1, r3
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	4413      	add	r3, r2
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	b21c      	sxth	r4, r3
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	b29a      	uxth	r2, r3
 80006be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4613      	mov	r3, r2
 80006d0:	4622      	mov	r2, r4
 80006d2:	f000 fff7 	bl	80016c4 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 80006d6:	f003 fd07 	bl	80040e8 <rand>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <main+0x3b0>)
 80006de:	fb82 1203 	smull	r1, r2, r2, r3
 80006e2:	1151      	asrs	r1, r2, #5
 80006e4:	17da      	asrs	r2, r3, #31
 80006e6:	1a8a      	subs	r2, r1, r2
 80006e8:	2164      	movs	r1, #100	; 0x64
 80006ea:	fb01 f202 	mul.w	r2, r1, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80006f2:	f003 fcf9 	bl	80040e8 <rand>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0x3b4>)
 80006fa:	fb83 1302 	smull	r1, r3, r3, r2
 80006fe:	4413      	add	r3, r2
 8000700:	1199      	asrs	r1, r3, #6
 8000702:	17d3      	asrs	r3, r2, #31
 8000704:	1ac9      	subs	r1, r1, r3
 8000706:	460b      	mov	r3, r1
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	440b      	add	r3, r1
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	440b      	add	r3, r1
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 8000714:	f003 fce8 	bl	80040e8 <rand>
 8000718:	4602      	mov	r2, r0
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x3b8>)
 800071c:	fb83 1302 	smull	r1, r3, r3, r2
 8000720:	4413      	add	r3, r2
 8000722:	1119      	asrs	r1, r3, #4
 8000724:	17d3      	asrs	r3, r2, #31
 8000726:	1ac9      	subs	r1, r1, r3
 8000728:	460b      	mov	r3, r1
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	1a5b      	subs	r3, r3, r1
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 8000734:	f003 fcd8 	bl	80040e8 <rand>
 8000738:	4602      	mov	r2, r0
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0x3b8>)
 800073c:	fb83 1302 	smull	r1, r3, r3, r2
 8000740:	4413      	add	r3, r2
 8000742:	1119      	asrs	r1, r3, #4
 8000744:	17d3      	asrs	r3, r2, #31
 8000746:	1ac9      	subs	r1, r1, r3
 8000748:	460b      	mov	r3, r1
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000754:	f003 fcc8 	bl	80040e8 <rand>
 8000758:	4603      	mov	r3, r0
 800075a:	425a      	negs	r2, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	e018      	b.n	8000794 <main+0x3bc>
 8000762:	bf00      	nop
 8000764:	200001dc 	.word	0x200001dc
 8000768:	40010c0d 	.word	0x40010c0d
 800076c:	20000174 	.word	0x20000174
 8000770:	2000012c 	.word	0x2000012c
 8000774:	2000009c 	.word	0x2000009c
 8000778:	200000e4 	.word	0x200000e4
 800077c:	200001b8 	.word	0x200001b8
 8000780:	08005524 	.word	0x08005524
 8000784:	2000000c 	.word	0x2000000c
 8000788:	51eb851f 	.word	0x51eb851f
 800078c:	e070381d 	.word	0xe070381d
 8000790:	88888889 	.word	0x88888889
 8000794:	bf58      	it	pl
 8000796:	4253      	negpl	r3, r2
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 800079a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079c:	b218      	sxth	r0, r3
 800079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a0:	b219      	sxth	r1, r3
 80007a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	b21c      	sxth	r4, r3
 80007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4623      	mov	r3, r4
 80007b2:	f000 ffce 	bl	8001752 <FillRectangle>

	  z=z+1;
 80007b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b8:	3301      	adds	r3, #1
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 80007bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007be:	2b63      	cmp	r3, #99	; 0x63
 80007c0:	dd66      	ble.n	8000890 <main+0x4b8>
		  /////////
		  ClearScreen(VGA_BLACK);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fcb2 	bl	800112c <ClearScreen>
		  ShowImage((uint8_t *)colors,100,75,0,0);
 80007c8:	2300      	movs	r3, #0
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	224b      	movs	r2, #75	; 0x4b
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	4831      	ldr	r0, [pc, #196]	; (8000898 <main+0x4c0>)
 80007d4:	f001 f8f6 	bl	80019c4 <ShowImage>
		  HAL_Delay(5000);
 80007d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80007dc:	f001 f9c4 	bl	8001b68 <HAL_Delay>
		  ShowImage((uint8_t *)flower,100,63,0,0);
 80007e0:	2300      	movs	r3, #0
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2300      	movs	r3, #0
 80007e6:	223f      	movs	r2, #63	; 0x3f
 80007e8:	2164      	movs	r1, #100	; 0x64
 80007ea:	482c      	ldr	r0, [pc, #176]	; (800089c <main+0x4c4>)
 80007ec:	f001 f8ea 	bl	80019c4 <ShowImage>
		  HAL_Delay(5000);
 80007f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f4:	f001 f9b8 	bl	8001b68 <HAL_Delay>
		  ShowImage((uint8_t *)mut,100,75,0,0);
 80007f8:	2300      	movs	r3, #0
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2300      	movs	r3, #0
 80007fe:	224b      	movs	r2, #75	; 0x4b
 8000800:	2164      	movs	r1, #100	; 0x64
 8000802:	4827      	ldr	r0, [pc, #156]	; (80008a0 <main+0x4c8>)
 8000804:	f001 f8de 	bl	80019c4 <ShowImage>
		  HAL_Delay(5000);
 8000808:	f241 3088 	movw	r0, #5000	; 0x1388
 800080c:	f001 f9ac 	bl	8001b68 <HAL_Delay>
		  ShowImage((uint8_t *)rgb,100,75,0,0);
 8000810:	2300      	movs	r3, #0
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2300      	movs	r3, #0
 8000816:	224b      	movs	r2, #75	; 0x4b
 8000818:	2164      	movs	r1, #100	; 0x64
 800081a:	4822      	ldr	r0, [pc, #136]	; (80008a4 <main+0x4cc>)
 800081c:	f001 f8d2 	bl	80019c4 <ShowImage>
		  HAL_Delay(5000);
 8000820:	f241 3088 	movw	r0, #5000	; 0x1388
 8000824:	f001 f9a0 	bl	8001b68 <HAL_Delay>
		  //////////
		  z=0;
 8000828:	2300      	movs	r3, #0
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 800082c:	2000      	movs	r0, #0
 800082e:	f000 fc7d 	bl	800112c <ClearScreen>
		  HAL_Delay(100);
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f001 f998 	bl	8001b68 <HAL_Delay>
		  vga_stop=1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <main+0x4d0>)
 800083a:	2201      	movs	r2, #1
 800083c:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	491a      	ldr	r1, [pc, #104]	; (80008ac <main+0x4d4>)
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fc8e 	bl	8004164 <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000848:	23ff      	movs	r3, #255	; 0xff
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2348      	movs	r3, #72	; 0x48
 800084e:	2263      	movs	r2, #99	; 0x63
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f000 ff36 	bl	80016c4 <DrawRectangle>
		  SetCursor(3,3);
 8000858:	2103      	movs	r1, #3
 800085a:	2003      	movs	r0, #3
 800085c:	f000 fe72 	bl	8001544 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <main+0x4d8>)
 8000862:	1d38      	adds	r0, r7, #4
 8000864:	231c      	movs	r3, #28
 8000866:	ca06      	ldmia	r2, {r1, r2}
 8000868:	f000 fe46 	bl	80014f8 <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <main+0x4dc>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4910      	ldr	r1, [pc, #64]	; (80008b8 <main+0x4e0>)
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fc74 	bl	8004164 <siprintf>
		  SetCursor(3,50);
 800087c:	2132      	movs	r1, #50	; 0x32
 800087e:	2003      	movs	r0, #3
 8000880:	f000 fe60 	bl	8001544 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <main+0x4d8>)
 8000886:	1d38      	adds	r0, r7, #4
 8000888:	23ff      	movs	r3, #255	; 0xff
 800088a:	ca06      	ldmia	r2, {r1, r2}
 800088c:	f000 fe34 	bl	80014f8 <WriteString>
	  }
	  HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f001 f969 	bl	8001b68 <HAL_Delay>
	  r = rand()%25;
 8000896:	e639      	b.n	800050c <main+0x134>
 8000898:	08005554 	.word	0x08005554
 800089c:	080072a0 	.word	0x080072a0
 80008a0:	08008b3c 	.word	0x08008b3c
 80008a4:	0800a888 	.word	0x0800a888
 80008a8:	200001b8 	.word	0x200001b8
 80008ac:	08005518 	.word	0x08005518
 80008b0:	2000000c 	.word	0x2000000c
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08005520 	.word	0x08005520

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	; 0x40
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fc04 	bl	80040d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008fa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fefd 	bl	8002704 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000910:	f000 fa0a 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2302      	movs	r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f96a 	bl	8002c08 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800093a:	f000 f9f5 	bl	8000d28 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	; 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b096      	sub	sp, #88	; 0x58
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2220      	movs	r2, #32
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fba9 	bl	80040d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000986:	4b3e      	ldr	r3, [pc, #248]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000988:	4a3e      	ldr	r2, [pc, #248]	; (8000a84 <MX_TIM1_Init+0x13c>)
 800098a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 800098c:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <MX_TIM1_Init+0x138>)
 800098e:	2201      	movs	r2, #1
 8000990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 8000998:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <MX_TIM1_Init+0x138>)
 800099a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800099e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b2:	4833      	ldr	r0, [pc, #204]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009b4:	f002 fa8e 	bl	8002ed4 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009be:	f000 f9b3 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009cc:	4619      	mov	r1, r3
 80009ce:	482c      	ldr	r0, [pc, #176]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009d0:	f002 fe2c 	bl	800362c <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009da:	f000 f9a5 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009de:	4828      	ldr	r0, [pc, #160]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009e0:	f002 fb64 	bl	80030ac <HAL_TIM_PWM_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009ea:	f000 f99d 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ee:	2320      	movs	r3, #32
 80009f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009fa:	4619      	mov	r1, r3
 80009fc:	4820      	ldr	r0, [pc, #128]	; (8000a80 <MX_TIM1_Init+0x138>)
 80009fe:	f003 fa71 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a08:	f000 f98e 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 72-1;
 8000a10:	2347      	movs	r3, #71	; 0x47
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000a32:	f002 fd3d 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a3c:	f000 f974 	bl	8000d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000a64:	f003 fa9c 	bl	8003fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a6e:	f000 f95b 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM1_Init+0x138>)
 8000a74:	f000 fa06 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3758      	adds	r7, #88	; 0x58
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000009c 	.word	0x2000009c
 8000a84:	40012c00 	.word	0x40012c00

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aba:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000abc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ac2:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-2;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000ad0:	f240 226f 	movw	r2, #623	; 0x26f
 8000ad4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae2:	4824      	ldr	r0, [pc, #144]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000ae4:	f002 f9f6 	bl	8002ed4 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000aee:	f000 f91b 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000af2:	4820      	ldr	r0, [pc, #128]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000af4:	f002 fada 	bl	80030ac <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000afe:	f000 f913 	bl	8000d28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b02:	2307      	movs	r3, #7
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000b12:	f002 fe4f 	bl	80037b4 <HAL_TIM_SlaveConfigSynchro>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b1c:	f000 f904 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b20:	2320      	movs	r3, #32
 8000b22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000b30:	f003 f9d8 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b3a:	f000 f8f5 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	; 0x60
 8000b40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000b56:	f002 fcab 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000b60:	f000 f8e2 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM2_Init+0xec>)
 8000b66:	f000 f98d 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	; 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e4 	.word	0x200000e4

08000b78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000b96:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <MX_TIM4_Init+0x94>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000bba:	f002 f98b 	bl	8002ed4 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000bc4:	f000 f8b0 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000bd6:	f002 fd29 	bl	800362c <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000be0:	f000 f8a2 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000be4:	2320      	movs	r3, #32
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM4_Init+0x90>)
 8000bf2:	f003 f977 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000bfc:	f000 f894 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000012c 	.word	0x2000012c
 8000c0c:	40000800 	.word	0x40000800

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_DMA_Init+0x38>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2011      	movs	r0, #17
 8000c34:	f001 f893 	bl	8001d5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c38:	2011      	movs	r0, #17
 8000c3a:	f001 f8ac 	bl	8001d96 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0310 	and.w	r3, r3, #16
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000cae:	f043 0308 	orr.w	r3, r3, #8
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_GPIO_Init+0xd0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <MX_GPIO_Init+0xd4>)
 8000cc8:	f001 fcea 	bl	80026a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000cd2:	4814      	ldr	r0, [pc, #80]	; (8000d24 <MX_GPIO_Init+0xd8>)
 8000cd4:	f001 fce4 	bl	80026a0 <HAL_GPIO_WritePin>
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <MX_GPIO_Init+0xd4>)
 8000cf2:	f001 fb51 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pins : G0_Pin G1_Pin G2_Pin R0_Pin
                           R1_Pin R2_Pin B0_Pin B1_Pin */
  GPIO_InitStruct.Pin = G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000cf6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000cfa:	613b      	str	r3, [r7, #16]
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_GPIO_Init+0xd8>)
 8000d10:	f001 fb42 	bl	8002398 <HAL_GPIO_Init>

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40010c00 	.word	0x40010c00

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_MspInit+0x60>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_MspInit+0x60>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a32      	ldr	r2, [pc, #200]	; (8000e70 <HAL_TIM_Base_MspInit+0xd8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10c      	bne.n	8000dc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a31      	ldr	r2, [pc, #196]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dc2:	e051      	b.n	8000e68 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d114      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	201c      	movs	r0, #28
 8000dec:	f000 ffb7 	bl	8001d5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 ffd0 	bl	8001d96 <HAL_NVIC_EnableIRQ>
}
 8000df6:	e037      	b.n	8000e68 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_TIM_Base_MspInit+0xe0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d132      	bne.n	8000e68 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_TIM_Base_MspInit+0xdc>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_up.Instance = DMA1_Channel7;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e1c:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_TIM_Base_MspInit+0xe8>)
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e22:	2210      	movs	r2, #16
 8000e24:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e40:	2220      	movs	r2, #32
 8000e42:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e46:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e4e:	f000 ffbd 	bl	8001dcc <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 8000e58:	f7ff ff66 	bl	8000d28 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e60:	621a      	str	r2, [r3, #32]
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_TIM_Base_MspInit+0xe4>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40000800 	.word	0x40000800
 8000e7c:	20000174 	.word	0x20000174
 8000e80:	40020080 	.word	0x40020080

08000e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_TIM_MspPostInit+0x98>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d119      	bne.n	8000ed8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_TIM_MspPostInit+0x9c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <HAL_TIM_MspPostInit+0x9c>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_TIM_MspPostInit+0x9c>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ebc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <HAL_TIM_MspPostInit+0xa0>)
 8000ed2:	f001 fa61 	bl	8002398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ed6:	e01c      	b.n	8000f12 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d117      	bne.n	8000f12 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_TIM_MspPostInit+0x9c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_TIM_MspPostInit+0x9c>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_TIM_MspPostInit+0x9c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <HAL_TIM_MspPostInit+0xa0>)
 8000f0e:	f001 fa43 	bl	8002398 <HAL_GPIO_Init>
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40012c00 	.word	0x40012c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010800 	.word	0x40010800

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6e:	f000 fddf 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA1_Channel7_IRQHandler+0x10>)
 8000f7e:	f001 f88f 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000174 	.word	0x20000174

08000f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM2_IRQHandler+0x10>)
 8000f92:	f002 f985 	bl	80032a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000e4 	.word	0x200000e4

08000fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <_kill>:

int _kill(int pid, int sig)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fb8:	f003 f856 	bl	8004068 <__errno>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2216      	movs	r2, #22
 8000fc0:	601a      	str	r2, [r3, #0]
	return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_exit>:

void _exit (int status)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffe7 	bl	8000fae <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fe0:	e7fe      	b.n	8000fe0 <_exit+0x12>

08000fe2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e00a      	b.n	800100a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	60ba      	str	r2, [r7, #8]
 8001000:	b2ca      	uxtb	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbf0      	blt.n	8000ff4 <_read+0x12>
	}

return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e009      	b.n	8001042 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	60ba      	str	r2, [r7, #8]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	dbf1      	blt.n	800102e <_write+0x12>
	}
	return len;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_close>:

int _close(int file)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	return -1;
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	605a      	str	r2, [r3, #4]
	return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <_isatty>:

int _isatty(int file)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	return 1;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f002 ffc0 	bl	8004068 <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20005000 	.word	0x20005000
 8001114:	00000400 	.word	0x00000400
 8001118:	200001e0 	.word	0x200001e0
 800111c:	20002748 	.word	0x20002748

08001120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e015      	b.n	8001168 <ClearScreen+0x3c>
		for(i=0;i<VGA_LBUFFER;i++){
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e00c      	b.n	800115c <ClearScreen+0x30>
			VGA_buffer[j][i]= color;
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <ClearScreen+0x50>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2164      	movs	r1, #100	; 0x64
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	441a      	add	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	79fa      	ldrb	r2, [r7, #7]
 8001154:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b63      	cmp	r3, #99	; 0x63
 8001160:	ddef      	ble.n	8001142 <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3301      	adds	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b4a      	cmp	r3, #74	; 0x4a
 800116c:	dde6      	ble.n	800113c <ClearScreen+0x10>
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	200009e4 	.word	0x200009e4

08001180 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	460b      	mov	r3, r1
 800118c:	80bb      	strh	r3, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db18      	blt.n	80011cc <DrawPixel+0x4c>
 800119a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db14      	blt.n	80011cc <DrawPixel+0x4c>
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	2b63      	cmp	r3, #99	; 0x63
 80011a8:	dc10      	bgt.n	80011cc <DrawPixel+0x4c>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 80011aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011ae:	2b48      	cmp	r3, #72	; 0x48
 80011b0:	dc0c      	bgt.n	80011cc <DrawPixel+0x4c>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 80011b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ba:	4907      	ldr	r1, [pc, #28]	; (80011d8 <DrawPixel+0x58>)
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	fb00 f202 	mul.w	r2, r0, r2
 80011c2:	440a      	add	r2, r1
 80011c4:	4413      	add	r3, r2
 80011c6:	78fa      	ldrb	r2, [r7, #3]
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e000      	b.n	80011ce <DrawPixel+0x4e>
		return;
 80011cc:	bf00      	nop
}
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200009e4 	.word	0x200009e4

080011dc <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4604      	mov	r4, r0
 80011e4:	4608      	mov	r0, r1
 80011e6:	4611      	mov	r1, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	4623      	mov	r3, r4
 80011ec:	80fb      	strh	r3, [r7, #6]
 80011ee:	4603      	mov	r3, r0
 80011f0:	80bb      	strh	r3, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
 80011f6:	4613      	mov	r3, r2
 80011f8:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80011fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001202:	429a      	cmp	r2, r3
 8001204:	da05      	bge.n	8001212 <DrawLine+0x36>
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29b      	uxth	r3, r3
 800120e:	b21b      	sxth	r3, r3
 8001210:	e004      	b.n	800121c <DrawLine+0x40>
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	b21b      	sxth	r3, r3
 800121c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 800121e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001222:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001226:	429a      	cmp	r2, r3
 8001228:	da05      	bge.n	8001236 <DrawLine+0x5a>
 800122a:	883a      	ldrh	r2, [r7, #0]
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21b      	sxth	r3, r3
 8001234:	e004      	b.n	8001240 <DrawLine+0x64>
 8001236:	88ba      	ldrh	r2, [r7, #4]
 8001238:	883b      	ldrh	r3, [r7, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	b21b      	sxth	r3, r3
 8001240:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001242:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	da01      	bge.n	8001252 <DrawLine+0x76>
 800124e:	2301      	movs	r3, #1
 8001250:	e001      	b.n	8001256 <DrawLine+0x7a>
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001258:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800125c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001260:	429a      	cmp	r2, r3
 8001262:	da01      	bge.n	8001268 <DrawLine+0x8c>
 8001264:	2301      	movs	r3, #1
 8001266:	e001      	b.n	800126c <DrawLine+0x90>
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 800126e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001272:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001276:	429a      	cmp	r2, r3
 8001278:	dd06      	ble.n	8001288 <DrawLine+0xac>
 800127a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800127e:	0fda      	lsrs	r2, r3, #31
 8001280:	4413      	add	r3, r2
 8001282:	105b      	asrs	r3, r3, #1
 8001284:	b21b      	sxth	r3, r3
 8001286:	e006      	b.n	8001296 <DrawLine+0xba>
 8001288:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800128c:	0fda      	lsrs	r2, r3, #31
 800128e:	4413      	add	r3, r2
 8001290:	105b      	asrs	r3, r3, #1
 8001292:	425b      	negs	r3, r3
 8001294:	b21b      	sxth	r3, r3
 8001296:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001298:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d130      	bne.n	8001302 <DrawLine+0x126>
		if (y1 < y0) {
 80012a0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80012a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	da05      	bge.n	80012b8 <DrawLine+0xdc>
			tmp = y1;
 80012ac:	883b      	ldrh	r3, [r7, #0]
 80012ae:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80012b4:	893b      	ldrh	r3, [r7, #8]
 80012b6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80012b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	da05      	bge.n	80012d0 <DrawLine+0xf4>
			tmp = x1;
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80012cc:	893b      	ldrh	r3, [r7, #8]
 80012ce:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	82bb      	strh	r3, [r7, #20]
 80012d4:	e00e      	b.n	80012f4 <DrawLine+0x118>
			DrawPixel(x0, i, c);
 80012d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80012da:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff4c 	bl	8001180 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 80012e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	82bb      	strh	r3, [r7, #20]
 80012f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	ddea      	ble.n	80012d6 <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8001300:	e06e      	b.n	80013e0 <DrawLine+0x204>
	}

	if (dy == 0) {
 8001302:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d130      	bne.n	800136c <DrawLine+0x190>
		if (y1 < y0) {
 800130a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800130e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	da05      	bge.n	8001322 <DrawLine+0x146>
			tmp = y1;
 8001316:	883b      	ldrh	r3, [r7, #0]
 8001318:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800131e:	893b      	ldrh	r3, [r7, #8]
 8001320:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001322:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132a:	429a      	cmp	r2, r3
 800132c:	da05      	bge.n	800133a <DrawLine+0x15e>
			tmp = x1;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001336:	893b      	ldrh	r3, [r7, #8]
 8001338:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	82bb      	strh	r3, [r7, #20]
 800133e:	e00e      	b.n	800135e <DrawLine+0x182>
			DrawPixel(i, y0, c);
 8001340:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001344:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001348:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff17 	bl	8001180 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001352:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001356:	b29b      	uxth	r3, r3
 8001358:	3301      	adds	r3, #1
 800135a:	b29b      	uxth	r3, r3
 800135c:	82bb      	strh	r3, [r7, #20]
 800135e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001362:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001366:	429a      	cmp	r2, r3
 8001368:	ddea      	ble.n	8001340 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 800136a:	e039      	b.n	80013e0 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 800136c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001370:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff01 	bl	8001180 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800137e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001382:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001386:	429a      	cmp	r2, r3
 8001388:	d105      	bne.n	8001396 <DrawLine+0x1ba>
 800138a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800138e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001392:	429a      	cmp	r2, r3
 8001394:	d023      	beq.n	80013de <DrawLine+0x202>
			break;
		}
		e2 = err;
 8001396:	8afb      	ldrh	r3, [r7, #22]
 8001398:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800139a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800139e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013a2:	425b      	negs	r3, r3
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dd09      	ble.n	80013bc <DrawLine+0x1e0>
			err -= dy;
 80013a8:	8afa      	ldrh	r2, [r7, #22]
 80013aa:	8a3b      	ldrh	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	4413      	add	r3, r2
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 80013bc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dad1      	bge.n	800136c <DrawLine+0x190>
			err += dx;
 80013c8:	8afa      	ldrh	r2, [r7, #22]
 80013ca:	8a7b      	ldrh	r3, [r7, #18]
 80013cc:	4413      	add	r3, r2
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80013d2:	88ba      	ldrh	r2, [r7, #4]
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 80013dc:	e7c6      	b.n	800136c <DrawLine+0x190>
			break;
 80013de:	bf00      	nop
		}
	}
}
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
	...

080013e8 <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	1d38      	adds	r0, r7, #4
 80013f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80013f6:	461a      	mov	r2, r3
 80013f8:	4623      	mov	r3, r4
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	4613      	mov	r3, r2
 80013fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b1f      	cmp	r3, #31
 8001404:	d902      	bls.n	800140c <WriteChar+0x24>
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b7e      	cmp	r3, #126	; 0x7e
 800140a:	d901      	bls.n	8001410 <WriteChar+0x28>
        return 0;
 800140c:	2300      	movs	r3, #0
 800140e:	e06d      	b.n	80014ec <WriteChar+0x104>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <WriteChar+0x10c>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	793b      	ldrb	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	dc06      	bgt.n	800142c <WriteChar+0x44>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <WriteChar+0x10c>)
 8001420:	885b      	ldrh	r3, [r3, #2]
 8001422:	461a      	mov	r2, r3
 8001424:	797b      	ldrb	r3, [r7, #5]
 8001426:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001428:	2b49      	cmp	r3, #73	; 0x49
 800142a:	dd01      	ble.n	8001430 <WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800142c:	2300      	movs	r3, #0
 800142e:	e05d      	b.n	80014ec <WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	e04c      	b.n	80014d0 <WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	3b20      	subs	r3, #32
 800143c:	7979      	ldrb	r1, [r7, #5]
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	4619      	mov	r1, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	440b      	add	r3, r1
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	e034      	b.n	80014c0 <WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d012      	beq.n	800148c <WriteChar+0xa4>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <WriteChar+0x10c>)
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4413      	add	r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	b218      	sxth	r0, r3
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <WriteChar+0x10c>)
 8001476:	885a      	ldrh	r2, [r3, #2]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4413      	add	r3, r2
 800147e:	b29b      	uxth	r3, r3
 8001480:	b21b      	sxth	r3, r3
 8001482:	7bba      	ldrb	r2, [r7, #14]
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fe7b 	bl	8001180 <DrawPixel>
 800148a:	e016      	b.n	80014ba <WriteChar+0xd2>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <WriteChar+0x10c>)
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	b218      	sxth	r0, r3
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <WriteChar+0x10c>)
 800149c:	885a      	ldrh	r2, [r3, #2]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b219      	sxth	r1, r3
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	f7ff fe63 	bl	8001180 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
 80014c0:	793b      	ldrb	r3, [r7, #4]
 80014c2:	461a      	mov	r2, r3
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d3c5      	bcc.n	8001456 <WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	797b      	ldrb	r3, [r7, #5]
 80014d2:	461a      	mov	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d3ad      	bcc.n	8001436 <WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <WriteChar+0x10c>)
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	793b      	ldrb	r3, [r7, #4]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4413      	add	r3, r2
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <WriteChar+0x10c>)
 80014e8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	20002730 	.word	0x20002730

080014f8 <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	1d38      	adds	r0, r7, #4
 8001502:	e880 0006 	stmia.w	r0, {r1, r2}
 8001506:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001508:	e012      	b.n	8001530 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	7818      	ldrb	r0, [r3, #0]
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	1d3a      	adds	r2, r7, #4
 8001512:	ca06      	ldmia	r2, {r1, r2}
 8001514:	f7ff ff68 	bl	80013e8 <WriteChar>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d002      	beq.n	800152a <WriteString+0x32>
            // Char could not be written
            return *str;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	e008      	b.n	800153c <WriteString+0x44>
        }

        // Next char
        str++;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e8      	bne.n	800150a <WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 8001554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db03      	blt.n	8001564 <SetCursor+0x20>
 800155c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001560:	2b63      	cmp	r3, #99	; 0x63
 8001562:	dd03      	ble.n	800156c <SetCursor+0x28>
	    VGA.CurrentX = 0;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <SetCursor+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	e002      	b.n	8001572 <SetCursor+0x2e>
	else
		VGA.CurrentX = x;
 800156c:	88fa      	ldrh	r2, [r7, #6]
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <SetCursor+0x58>)
 8001570:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 8001572:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	db03      	blt.n	8001582 <SetCursor+0x3e>
 800157a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157e:	2b48      	cmp	r3, #72	; 0x48
 8001580:	dd03      	ble.n	800158a <SetCursor+0x46>
	    VGA.CurrentY = 0;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <SetCursor+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	805a      	strh	r2, [r3, #2]
 8001588:	e003      	b.n	8001592 <SetCursor+0x4e>
	else
        VGA.CurrentY = y;
 800158a:	88ba      	ldrh	r2, [r7, #4]
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <SetCursor+0x58>)
 800158e:	805a      	strh	r2, [r3, #2]
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20002730 	.word	0x20002730

080015a0 <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	4603      	mov	r3, r0
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 80015be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015c2:	425b      	negs	r3, r3
 80015c4:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 80015ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015ce:	f1c3 0301 	rsb	r3, r3, #1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	2b63      	cmp	r3, #99	; 0x63
 80015dc:	dc6e      	bgt.n	80016bc <DrawCircle+0x11c>
 80015de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e2:	2b48      	cmp	r3, #72	; 0x48
 80015e4:	dc6a      	bgt.n	80016bc <DrawCircle+0x11c>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b218      	sxth	r0, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	787a      	ldrb	r2, [r7, #1]
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fdbd 	bl	8001180 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	b29a      	uxth	r2, r3
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4413      	add	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	b218      	sxth	r0, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	b29a      	uxth	r2, r3
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	b21b      	sxth	r3, r3
 800161e:	787a      	ldrb	r2, [r7, #1]
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fdad 	bl	8001180 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	b29a      	uxth	r2, r3
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	4413      	add	r3, r2
 800162e:	b29b      	uxth	r3, r3
 8001630:	b218      	sxth	r0, r3
 8001632:	88ba      	ldrh	r2, [r7, #4]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	b29b      	uxth	r3, r3
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	b21b      	sxth	r3, r3
 800163e:	787a      	ldrb	r2, [r7, #1]
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fd9d 	bl	8001180 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	b29b      	uxth	r3, r3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	b29b      	uxth	r3, r3
 8001650:	b218      	sxth	r0, r3
 8001652:	88ba      	ldrh	r2, [r7, #4]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	b29b      	uxth	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b29b      	uxth	r3, r3
 800165c:	b21b      	sxth	r3, r3
 800165e:	787a      	ldrb	r2, [r7, #1]
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fd8d 	bl	8001180 <DrawPixel>
        e2 = err;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	429a      	cmp	r2, r3
 8001670:	dc13      	bgt.n	800169a <DrawCircle+0xfa>
            y++;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3301      	adds	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	3301      	adds	r3, #1
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4413      	add	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	425b      	negs	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	429a      	cmp	r2, r3
 800168c:	d105      	bne.n	800169a <DrawCircle+0xfa>
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	429a      	cmp	r2, r3
 8001694:	dc01      	bgt.n	800169a <DrawCircle+0xfa>
              e2 = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dd08      	ble.n	80016b4 <DrawCircle+0x114>
          x++;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	3301      	adds	r3, #1
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	dd95      	ble.n	80015e6 <DrawCircle+0x46>

    return;
 80016ba:	e000      	b.n	80016be <DrawCircle+0x11e>
    return;
 80016bc:	bf00      	nop
}
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	4611      	mov	r1, r2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	80fb      	strh	r3, [r7, #6]
 80016d6:	4603      	mov	r3, r0
 80016d8:	80bb      	strh	r3, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]
 80016de:	4613      	mov	r3, r2
 80016e0:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 80016e2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80016e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016ee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016f2:	7e3b      	ldrb	r3, [r7, #24]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4623      	mov	r3, r4
 80016f8:	f7ff fd70 	bl	80011dc <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 80016fc:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001700:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001704:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001708:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800170c:	7e3b      	ldrb	r3, [r7, #24]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4623      	mov	r3, r4
 8001712:	f7ff fd63 	bl	80011dc <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 8001716:	f9b7 4000 	ldrsh.w	r4, [r7]
 800171a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800171e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001722:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001726:	7e3b      	ldrb	r3, [r7, #24]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4623      	mov	r3, r4
 800172c:	f7ff fd56 	bl	80011dc <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 8001730:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001734:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001738:	f9b7 1000 	ldrsh.w	r1, [r7]
 800173c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001740:	7e3b      	ldrb	r3, [r7, #24]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4623      	mov	r3, r4
 8001746:	f7ff fd49 	bl	80011dc <DrawLine>
  return;
 800174a:	bf00      	nop
}
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}

08001752 <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8001752:	b590      	push	{r4, r7, lr}
 8001754:	b087      	sub	sp, #28
 8001756:	af02      	add	r7, sp, #8
 8001758:	4604      	mov	r4, r0
 800175a:	4608      	mov	r0, r1
 800175c:	4611      	mov	r1, r2
 800175e:	461a      	mov	r2, r3
 8001760:	4623      	mov	r3, r4
 8001762:	80fb      	strh	r3, [r7, #6]
 8001764:	4603      	mov	r3, r0
 8001766:	80bb      	strh	r3, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8001770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001774:	2b63      	cmp	r3, #99	; 0x63
 8001776:	dc2a      	bgt.n	80017ce <FillRectangle+0x7c>
 8001778:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800177c:	2b48      	cmp	r3, #72	; 0x48
 800177e:	dc26      	bgt.n	80017ce <FillRectangle+0x7c>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 8001780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001784:	2b63      	cmp	r3, #99	; 0x63
 8001786:	dd01      	ble.n	800178c <FillRectangle+0x3a>
 8001788:	2363      	movs	r3, #99	; 0x63
 800178a:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 800178c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001790:	2b48      	cmp	r3, #72	; 0x48
 8001792:	dd01      	ble.n	8001798 <FillRectangle+0x46>
 8001794:	2348      	movs	r3, #72	; 0x48
 8001796:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 8001798:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e010      	b.n	80017c2 <FillRectangle+0x70>
    	DrawLine(x1,yy,x2,yy,color);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	b219      	sxth	r1, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	b21c      	sxth	r4, r3
 80017a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017ac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4623      	mov	r3, r4
 80017b8:	f7ff fd10 	bl	80011dc <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dde9      	ble.n	80017a0 <FillRectangle+0x4e>
 80017cc:	e000      	b.n	80017d0 <FillRectangle+0x7e>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 80017ce:	bf00      	nop
    }
}
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}

080017d6 <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 80017d6:	b590      	push	{r4, r7, lr}
 80017d8:	b089      	sub	sp, #36	; 0x24
 80017da:	af02      	add	r7, sp, #8
 80017dc:	4604      	mov	r4, r0
 80017de:	4608      	mov	r0, r1
 80017e0:	4611      	mov	r1, r2
 80017e2:	461a      	mov	r2, r3
 80017e4:	4623      	mov	r3, r4
 80017e6:	80fb      	strh	r3, [r7, #6]
 80017e8:	4603      	mov	r3, r0
 80017ea:	80bb      	strh	r3, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	f1c3 0301 	rsb	r3, r3, #1
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	461a      	mov	r2, r3
 8001806:	03d2      	lsls	r2, r2, #15
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 8001818:	88ba      	ldrh	r2, [r7, #4]
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	4413      	add	r3, r2
 800181e:	b29b      	uxth	r3, r3
 8001820:	b219      	sxth	r1, r3
 8001822:	787a      	ldrb	r2, [r7, #1]
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fca9 	bl	8001180 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 800182e:	88ba      	ldrh	r2, [r7, #4]
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	b29b      	uxth	r3, r3
 8001836:	b219      	sxth	r1, r3
 8001838:	787a      	ldrb	r2, [r7, #1]
 800183a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fc9e 	bl	8001180 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	b21b      	sxth	r3, r3
 800184e:	787a      	ldrb	r2, [r7, #1]
 8001850:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fc93 	bl	8001180 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 800185a:	88fa      	ldrh	r2, [r7, #6]
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	b21b      	sxth	r3, r3
 8001864:	787a      	ldrb	r2, [r7, #1]
 8001866:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc88 	bl	8001180 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	b218      	sxth	r0, r3
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	b21a      	sxth	r2, r3
 8001884:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001888:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800188c:	787b      	ldrb	r3, [r7, #1]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4623      	mov	r3, r4
 8001892:	f7ff fca3 	bl	80011dc <DrawLine>

    while (x < y) {
 8001896:	e089      	b.n	80019ac <FillCircle+0x1d6>
        if (f >= 0) {
 8001898:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0e      	blt.n	80018be <FillCircle+0xe8>
            y--;
 80018a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80018ac:	8a7b      	ldrh	r3, [r7, #18]
 80018ae:	3302      	adds	r3, #2
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80018b4:	8afa      	ldrh	r2, [r7, #22]
 80018b6:	8a7b      	ldrh	r3, [r7, #18]
 80018b8:	4413      	add	r3, r2
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80018be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80018ca:	8abb      	ldrh	r3, [r7, #20]
 80018cc:	3302      	adds	r3, #2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80018d2:	8afa      	ldrh	r2, [r7, #22]
 80018d4:	8abb      	ldrh	r3, [r7, #20]
 80018d6:	4413      	add	r3, r2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	8a3b      	ldrh	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	b218      	sxth	r0, r3
 80018e6:	88ba      	ldrh	r2, [r7, #4]
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	4413      	add	r3, r2
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b219      	sxth	r1, r3
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	8a3b      	ldrh	r3, [r7, #16]
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b21c      	sxth	r4, r3
 80018fa:	88ba      	ldrh	r2, [r7, #4]
 80018fc:	89fb      	ldrh	r3, [r7, #14]
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	b21a      	sxth	r2, r3
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	4622      	mov	r2, r4
 800190c:	f7ff fc66 	bl	80011dc <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001910:	88fa      	ldrh	r2, [r7, #6]
 8001912:	8a3b      	ldrh	r3, [r7, #16]
 8001914:	4413      	add	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	b218      	sxth	r0, r3
 800191a:	88ba      	ldrh	r2, [r7, #4]
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	b219      	sxth	r1, r3
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	8a3b      	ldrh	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	b29b      	uxth	r3, r3
 800192c:	b21c      	sxth	r4, r3
 800192e:	88ba      	ldrh	r2, [r7, #4]
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	b21a      	sxth	r2, r3
 8001938:	787b      	ldrb	r3, [r7, #1]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	4622      	mov	r2, r4
 8001940:	f7ff fc4c 	bl	80011dc <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	89fb      	ldrh	r3, [r7, #14]
 8001948:	4413      	add	r3, r2
 800194a:	b29b      	uxth	r3, r3
 800194c:	b218      	sxth	r0, r3
 800194e:	88ba      	ldrh	r2, [r7, #4]
 8001950:	8a3b      	ldrh	r3, [r7, #16]
 8001952:	4413      	add	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	b219      	sxth	r1, r3
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	b21c      	sxth	r4, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	8a3b      	ldrh	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21a      	sxth	r2, r3
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	4622      	mov	r2, r4
 8001974:	f7ff fc32 	bl	80011dc <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4413      	add	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	b218      	sxth	r0, r3
 8001982:	88ba      	ldrh	r2, [r7, #4]
 8001984:	8a3b      	ldrh	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b29b      	uxth	r3, r3
 800198a:	b219      	sxth	r1, r3
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21c      	sxth	r4, r3
 8001996:	88ba      	ldrh	r2, [r7, #4]
 8001998:	8a3b      	ldrh	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	787b      	ldrb	r3, [r7, #1]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	4622      	mov	r2, r4
 80019a8:	f7ff fc18 	bl	80011dc <DrawLine>
    while (x < y) {
 80019ac:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80019b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f6ff af6f 	blt.w	8001898 <FillCircle+0xc2>
    }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}

080019c4 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	817b      	strh	r3, [r7, #10]
 80019d6:	460b      	mov	r3, r1
 80019d8:	813b      	strh	r3, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 80019de:	2300      	movs	r3, #0
 80019e0:	82fb      	strh	r3, [r7, #22]
 80019e2:	e02e      	b.n	8001a42 <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 80019e4:	2300      	movs	r3, #0
 80019e6:	82bb      	strh	r3, [r7, #20]
 80019e8:	e01f      	b.n	8001a2a <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 80019ea:	8aba      	ldrh	r2, [r7, #20]
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	b218      	sxth	r0, r3
 80019f4:	8afa      	ldrh	r2, [r7, #22]
 80019f6:	8c3b      	ldrh	r3, [r7, #32]
 80019f8:	4413      	add	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b219      	sxth	r1, r3
 80019fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a02:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a06:	fb03 f202 	mul.w	r2, r3, r2
 8001a0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a0e:	4413      	add	r3, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f7ff fbb1 	bl	8001180 <DrawPixel>
    	for(i=0;i<x;i++){
 8001a1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	82bb      	strh	r3, [r7, #20]
 8001a2a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	dbd9      	blt.n	80019ea <ShowImage+0x26>
    for(j=0;j<y;j++){
 8001a36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	82fb      	strh	r3, [r7, #22]
 8001a42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a46:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbca      	blt.n	80019e4 <ShowImage+0x20>
    	}
    }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a7e:	f7ff fb4f 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f002 faf7 	bl	8004074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a86:	f7fe fca7 	bl	80003d8 <main>
  bx lr
 8001a8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a94:	0800cea0 	.word	0x0800cea0
  ldr r2, =_sbss
 8001a98:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a9c:	20002748 	.word	0x20002748

08001aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC1_2_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_Init+0x28>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a07      	ldr	r2, [pc, #28]	; (8001acc <HAL_Init+0x28>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 f947 	bl	8001d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aba:	200f      	movs	r0, #15
 8001abc:	f000 f808 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac0:	f7ff f938 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40022000 	.word	0x40022000

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f95f 	bl	8001db2 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 f927 	bl	8001d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000018 	.word	0x20000018
 8001b2c:	20000014 	.word	0x20000014

08001b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_IncTick+0x1c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_IncTick+0x20>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_IncTick+0x20>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	20002734 	.word	0x20002734

08001b54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <HAL_GetTick+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20002734 	.word	0x20002734

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffe0 	bl	8001b54 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000018 	.word	0x20000018

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4906      	ldr	r1, [pc, #24]	; (8001c48 <__NVIC_EnableIRQ+0x34>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d14:	d301      	bcc.n	8001d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d16:	2301      	movs	r3, #1
 8001d18:	e00f      	b.n	8001d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <SysTick_Config+0x40>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d22:	210f      	movs	r1, #15
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	f7ff ff90 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x40>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x40>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff2d 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d70:	f7ff ff42 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	6978      	ldr	r0, [r7, #20]
 8001d7c:	f7ff ff90 	bl	8001ca0 <NVIC_EncodePriority>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff5f 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff35 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ffa2 	bl	8001d04 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e043      	b.n	8001e6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_DMA_Init+0xa8>)
 8001dea:	4413      	add	r3, r2
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <HAL_DMA_Init+0xac>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	009a      	lsls	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_DMA_Init+0xb0>)
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	bffdfff8 	.word	0xbffdfff8
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_DMA_Start_IT+0x20>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e04a      	b.n	8001f36 <HAL_DMA_Start_IT+0xb6>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d13a      	bne.n	8001f28 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 fa30 	bl	800233c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 020e 	orr.w	r2, r2, #14
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e00f      	b.n	8001f16 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0204 	bic.w	r2, r2, #4
 8001f04:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 020a 	orr.w	r2, r2, #10
 8001f14:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e005      	b.n	8001f34 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
 8001f32:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d008      	beq.n	8001f66 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2204      	movs	r2, #4
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e020      	b.n	8001fa8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 020e 	bic.w	r2, r2, #14
 8001f74:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d005      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e051      	b.n	800207a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 020e 	bic.w	r2, r2, #14
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_DMA_Abort_IT+0xd0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d029      	beq.n	8002054 <HAL_DMA_Abort_IT+0xa0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a20      	ldr	r2, [pc, #128]	; (8002088 <HAL_DMA_Abort_IT+0xd4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d022      	beq.n	8002050 <HAL_DMA_Abort_IT+0x9c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_DMA_Abort_IT+0xd8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d01a      	beq.n	800204a <HAL_DMA_Abort_IT+0x96>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_DMA_Abort_IT+0xdc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d012      	beq.n	8002044 <HAL_DMA_Abort_IT+0x90>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_DMA_Abort_IT+0xe0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00a      	beq.n	800203e <HAL_DMA_Abort_IT+0x8a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_DMA_Abort_IT+0xe4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d102      	bne.n	8002038 <HAL_DMA_Abort_IT+0x84>
 8002032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002036:	e00e      	b.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 8002038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800203c:	e00b      	b.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 800203e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002042:	e008      	b.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 8002044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002048:	e005      	b.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 800204a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800204e:	e002      	b.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 8002050:	2310      	movs	r3, #16
 8002052:	e000      	b.n	8002056 <HAL_DMA_Abort_IT+0xa2>
 8002054:	2301      	movs	r3, #1
 8002056:	4a11      	ldr	r2, [pc, #68]	; (800209c <HAL_DMA_Abort_IT+0xe8>)
 8002058:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
    } 
  }
  return status;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40020008 	.word	0x40020008
 8002088:	4002001c 	.word	0x4002001c
 800208c:	40020030 	.word	0x40020030
 8002090:	40020044 	.word	0x40020044
 8002094:	40020058 	.word	0x40020058
 8002098:	4002006c 	.word	0x4002006c
 800209c:	40020000 	.word	0x40020000

080020a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	2204      	movs	r2, #4
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d04f      	beq.n	8002168 <HAL_DMA_IRQHandler+0xc8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04a      	beq.n	8002168 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a66      	ldr	r2, [pc, #408]	; (8002290 <HAL_DMA_IRQHandler+0x1f0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d029      	beq.n	800214e <HAL_DMA_IRQHandler+0xae>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a65      	ldr	r2, [pc, #404]	; (8002294 <HAL_DMA_IRQHandler+0x1f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <HAL_DMA_IRQHandler+0xaa>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a63      	ldr	r2, [pc, #396]	; (8002298 <HAL_DMA_IRQHandler+0x1f8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01a      	beq.n	8002144 <HAL_DMA_IRQHandler+0xa4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a62      	ldr	r2, [pc, #392]	; (800229c <HAL_DMA_IRQHandler+0x1fc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0x9e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_DMA_IRQHandler+0x200>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00a      	beq.n	8002138 <HAL_DMA_IRQHandler+0x98>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_DMA_IRQHandler+0x204>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <HAL_DMA_IRQHandler+0x92>
 800212c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002130:	e00e      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 8002132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002136:	e00b      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 8002138:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800213c:	e008      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 800213e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002142:	e005      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 8002144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002148:	e002      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 800214a:	2340      	movs	r3, #64	; 0x40
 800214c:	e000      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 800214e:	2304      	movs	r3, #4
 8002150:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_DMA_IRQHandler+0x208>)
 8002152:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8094 	beq.w	8002286 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002166:	e08e      	b.n	8002286 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	2202      	movs	r2, #2
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d056      	beq.n	8002226 <HAL_DMA_IRQHandler+0x186>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d051      	beq.n	8002226 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 020a 	bic.w	r2, r2, #10
 800219e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a38      	ldr	r2, [pc, #224]	; (8002290 <HAL_DMA_IRQHandler+0x1f0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d029      	beq.n	8002206 <HAL_DMA_IRQHandler+0x166>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a37      	ldr	r2, [pc, #220]	; (8002294 <HAL_DMA_IRQHandler+0x1f4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_DMA_IRQHandler+0x162>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a35      	ldr	r2, [pc, #212]	; (8002298 <HAL_DMA_IRQHandler+0x1f8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_IRQHandler+0x15c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <HAL_DMA_IRQHandler+0x1fc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d012      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x156>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a32      	ldr	r2, [pc, #200]	; (80022a0 <HAL_DMA_IRQHandler+0x200>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00a      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x150>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a31      	ldr	r2, [pc, #196]	; (80022a4 <HAL_DMA_IRQHandler+0x204>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <HAL_DMA_IRQHandler+0x14a>
 80021e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e8:	e00e      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ee:	e00b      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f4:	e008      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fa:	e005      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002200:	e002      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 8002202:	2320      	movs	r3, #32
 8002204:	e000      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 8002206:	2302      	movs	r3, #2
 8002208:	4a27      	ldr	r2, [pc, #156]	; (80022a8 <HAL_DMA_IRQHandler+0x208>)
 800220a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d034      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002224:	e02f      	b.n	8002286 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2208      	movs	r2, #8
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1e8>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
    }
  }
  return;
 8002286:	bf00      	nop
 8002288:	bf00      	nop
}
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40020008 	.word	0x40020008
 8002294:	4002001c 	.word	0x4002001c
 8002298:	40020030 	.word	0x40020030
 800229c:	40020044 	.word	0x40020044
 80022a0:	40020058 	.word	0x40020058
 80022a4:	4002006c 	.word	0x4002006c
 80022a8:	40020000 	.word	0x40020000

080022ac <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	460b      	mov	r3, r1
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_DMA_RegisterCallback+0x20>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e031      	b.n	8002330 <HAL_DMA_RegisterCallback+0x84>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d121      	bne.n	8002322 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d81b      	bhi.n	800231c <HAL_DMA_RegisterCallback+0x70>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <HAL_DMA_RegisterCallback+0x40>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002305 	.word	0x08002305
 80022f4:	0800230d 	.word	0x0800230d
 80022f8:	08002315 	.word	0x08002315
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002302:	e010      	b.n	8002326 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 800230a:	e00c      	b.n	8002326 <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8002312:	e008      	b.n	8002326 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 800231a:	e004      	b.n	8002326 <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8002320:	e001      	b.n	8002326 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d108      	bne.n	800237c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800237a:	e007      	b.n	800238c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b08b      	sub	sp, #44	; 0x2c
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e169      	b.n	8002680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023ac:	2201      	movs	r2, #1
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f040 8158 	bne.w	800267a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a9a      	ldr	r2, [pc, #616]	; (8002638 <HAL_GPIO_Init+0x2a0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d05e      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023d4:	4a98      	ldr	r2, [pc, #608]	; (8002638 <HAL_GPIO_Init+0x2a0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d875      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023da:	4a98      	ldr	r2, [pc, #608]	; (800263c <HAL_GPIO_Init+0x2a4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d058      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023e0:	4a96      	ldr	r2, [pc, #600]	; (800263c <HAL_GPIO_Init+0x2a4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d86f      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023e6:	4a96      	ldr	r2, [pc, #600]	; (8002640 <HAL_GPIO_Init+0x2a8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d052      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023ec:	4a94      	ldr	r2, [pc, #592]	; (8002640 <HAL_GPIO_Init+0x2a8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d869      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023f2:	4a94      	ldr	r2, [pc, #592]	; (8002644 <HAL_GPIO_Init+0x2ac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d04c      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 80023f8:	4a92      	ldr	r2, [pc, #584]	; (8002644 <HAL_GPIO_Init+0x2ac>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d863      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 80023fe:	4a92      	ldr	r2, [pc, #584]	; (8002648 <HAL_GPIO_Init+0x2b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d046      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
 8002404:	4a90      	ldr	r2, [pc, #576]	; (8002648 <HAL_GPIO_Init+0x2b0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d85d      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 800240a:	2b12      	cmp	r3, #18
 800240c:	d82a      	bhi.n	8002464 <HAL_GPIO_Init+0xcc>
 800240e:	2b12      	cmp	r3, #18
 8002410:	d859      	bhi.n	80024c6 <HAL_GPIO_Init+0x12e>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <HAL_GPIO_Init+0x80>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002493 	.word	0x08002493
 800241c:	0800246d 	.word	0x0800246d
 8002420:	0800247f 	.word	0x0800247f
 8002424:	080024c1 	.word	0x080024c1
 8002428:	080024c7 	.word	0x080024c7
 800242c:	080024c7 	.word	0x080024c7
 8002430:	080024c7 	.word	0x080024c7
 8002434:	080024c7 	.word	0x080024c7
 8002438:	080024c7 	.word	0x080024c7
 800243c:	080024c7 	.word	0x080024c7
 8002440:	080024c7 	.word	0x080024c7
 8002444:	080024c7 	.word	0x080024c7
 8002448:	080024c7 	.word	0x080024c7
 800244c:	080024c7 	.word	0x080024c7
 8002450:	080024c7 	.word	0x080024c7
 8002454:	080024c7 	.word	0x080024c7
 8002458:	080024c7 	.word	0x080024c7
 800245c:	08002475 	.word	0x08002475
 8002460:	08002489 	.word	0x08002489
 8002464:	4a79      	ldr	r2, [pc, #484]	; (800264c <HAL_GPIO_Init+0x2b4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800246a:	e02c      	b.n	80024c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	623b      	str	r3, [r7, #32]
          break;
 8002472:	e029      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	3304      	adds	r3, #4
 800247a:	623b      	str	r3, [r7, #32]
          break;
 800247c:	e024      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	3308      	adds	r3, #8
 8002484:	623b      	str	r3, [r7, #32]
          break;
 8002486:	e01f      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	330c      	adds	r3, #12
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e01a      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800249a:	2304      	movs	r3, #4
 800249c:	623b      	str	r3, [r7, #32]
          break;
 800249e:	e013      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a8:	2308      	movs	r3, #8
 80024aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	611a      	str	r2, [r3, #16]
          break;
 80024b2:	e009      	b.n	80024c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024b4:	2308      	movs	r3, #8
 80024b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	615a      	str	r2, [r3, #20]
          break;
 80024be:	e003      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
          break;
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x130>
          break;
 80024c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2bff      	cmp	r3, #255	; 0xff
 80024cc:	d801      	bhi.n	80024d2 <HAL_GPIO_Init+0x13a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_Init+0x13e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d802      	bhi.n	80024e4 <HAL_GPIO_Init+0x14c>
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x152>
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3b08      	subs	r3, #8
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	210f      	movs	r1, #15
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	401a      	ands	r2, r3
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80b1 	beq.w	800267a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002518:	4b4d      	ldr	r3, [pc, #308]	; (8002650 <HAL_GPIO_Init+0x2b8>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a4c      	ldr	r2, [pc, #304]	; (8002650 <HAL_GPIO_Init+0x2b8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b4a      	ldr	r3, [pc, #296]	; (8002650 <HAL_GPIO_Init+0x2b8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002530:	4a48      	ldr	r2, [pc, #288]	; (8002654 <HAL_GPIO_Init+0x2bc>)
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a40      	ldr	r2, [pc, #256]	; (8002658 <HAL_GPIO_Init+0x2c0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d013      	beq.n	8002584 <HAL_GPIO_Init+0x1ec>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a3f      	ldr	r2, [pc, #252]	; (800265c <HAL_GPIO_Init+0x2c4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00d      	beq.n	8002580 <HAL_GPIO_Init+0x1e8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <HAL_GPIO_Init+0x2c8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <HAL_GPIO_Init+0x1e4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <HAL_GPIO_Init+0x2cc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_GPIO_Init+0x1e0>
 8002574:	2303      	movs	r3, #3
 8002576:	e006      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002578:	2304      	movs	r3, #4
 800257a:	e004      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 800257c:	2302      	movs	r3, #2
 800257e:	e002      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_GPIO_Init+0x1ee>
 8002584:	2300      	movs	r3, #0
 8002586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002588:	f002 0203 	and.w	r2, r2, #3
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	4093      	lsls	r3, r2
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002596:	492f      	ldr	r1, [pc, #188]	; (8002654 <HAL_GPIO_Init+0x2bc>)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	492c      	ldr	r1, [pc, #176]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e006      	b.n	80025cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	4928      	ldr	r1, [pc, #160]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4922      	ldr	r1, [pc, #136]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e006      	b.n	80025f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	491e      	ldr	r1, [pc, #120]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d006      	beq.n	800260e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4918      	ldr	r1, [pc, #96]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	43db      	mvns	r3, r3
 8002616:	4914      	ldr	r1, [pc, #80]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 8002618:	4013      	ands	r3, r2
 800261a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d021      	beq.n	800266c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_GPIO_Init+0x2d0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
 8002634:	e021      	b.n	800267a <HAL_GPIO_Init+0x2e2>
 8002636:	bf00      	nop
 8002638:	10320000 	.word	0x10320000
 800263c:	10310000 	.word	0x10310000
 8002640:	10220000 	.word	0x10220000
 8002644:	10210000 	.word	0x10210000
 8002648:	10120000 	.word	0x10120000
 800264c:	10110000 	.word	0x10110000
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000
 8002658:	40010800 	.word	0x40010800
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40011000 	.word	0x40011000
 8002664:	40011400 	.word	0x40011400
 8002668:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_GPIO_Init+0x304>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	43db      	mvns	r3, r3
 8002674:	4909      	ldr	r1, [pc, #36]	; (800269c <HAL_GPIO_Init+0x304>)
 8002676:	4013      	ands	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f ae8e 	bne.w	80023ac <HAL_GPIO_Init+0x14>
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	372c      	adds	r7, #44	; 0x2c
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40010400 	.word	0x40010400

080026a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
 80026ac:	4613      	mov	r3, r2
 80026ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026bc:	e003      	b.n	80026c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	041a      	lsls	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43d9      	mvns	r1, r3
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	400b      	ands	r3, r1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	611a      	str	r2, [r3, #16]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
	...

08002704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e272      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002724:	4b92      	ldr	r3, [pc, #584]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b04      	cmp	r3, #4
 800272e:	d00c      	beq.n	800274a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002730:	4b8f      	ldr	r3, [pc, #572]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d112      	bne.n	8002762 <HAL_RCC_OscConfig+0x5e>
 800273c:	4b8c      	ldr	r3, [pc, #560]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d10b      	bne.n	8002762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274a:	4b89      	ldr	r3, [pc, #548]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d06c      	beq.n	8002830 <HAL_RCC_OscConfig+0x12c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d168      	bne.n	8002830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e24c      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x76>
 800276c:	4b80      	ldr	r3, [pc, #512]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a7f      	ldr	r2, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	e02e      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x98>
 8002782:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a7a      	ldr	r2, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b78      	ldr	r3, [pc, #480]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a77      	ldr	r2, [pc, #476]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e01d      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0xbc>
 80027a6:	4b72      	ldr	r3, [pc, #456]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a71      	ldr	r2, [pc, #452]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e00b      	b.n	80027d8 <HAL_RCC_OscConfig+0xd4>
 80027c0:	4b6b      	ldr	r3, [pc, #428]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6a      	ldr	r2, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff f9b8 	bl	8001b54 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e8:	f7ff f9b4 	bl	8001b54 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e200      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0xe4>
 8002806:	e014      	b.n	8002832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff f9a4 	bl	8001b54 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002810:	f7ff f9a0 	bl	8001b54 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b64      	cmp	r3, #100	; 0x64
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1ec      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002822:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x10c>
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d063      	beq.n	8002906 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283e:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00b      	beq.n	8002862 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	d11c      	bne.n	8002890 <HAL_RCC_OscConfig+0x18c>
 8002856:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_RCC_OscConfig+0x176>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1c0      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4939      	ldr	r1, [pc, #228]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	e03a      	b.n	8002906 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002898:	4b36      	ldr	r3, [pc, #216]	; (8002974 <HAL_RCC_OscConfig+0x270>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7ff f959 	bl	8001b54 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a6:	f7ff f955 	bl	8001b54 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1a1      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b8:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4927      	ldr	r1, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]
 80028d8:	e015      	b.n	8002906 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_RCC_OscConfig+0x270>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f938 	bl	8001b54 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e8:	f7ff f934 	bl	8001b54 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e180      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d03a      	beq.n	8002988 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d019      	beq.n	800294e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_RCC_OscConfig+0x274>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002920:	f7ff f918 	bl	8001b54 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002928:	f7ff f914 	bl	8001b54 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e160      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_RCC_OscConfig+0x26c>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002946:	2001      	movs	r0, #1
 8002948:	f000 faa6 	bl	8002e98 <RCC_Delay>
 800294c:	e01c      	b.n	8002988 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_RCC_OscConfig+0x274>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002954:	f7ff f8fe 	bl	8001b54 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295a:	e00f      	b.n	800297c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295c:	f7ff f8fa 	bl	8001b54 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d908      	bls.n	800297c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e146      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	42420000 	.word	0x42420000
 8002978:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e9      	bne.n	800295c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a6 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b8b      	ldr	r3, [pc, #556]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4a87      	ldr	r2, [pc, #540]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	61d3      	str	r3, [r2, #28]
 80029b2:	4b85      	ldr	r3, [pc, #532]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b82      	ldr	r3, [pc, #520]	; (8002bcc <HAL_RCC_OscConfig+0x4c8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b7f      	ldr	r3, [pc, #508]	; (8002bcc <HAL_RCC_OscConfig+0x4c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7e      	ldr	r2, [pc, #504]	; (8002bcc <HAL_RCC_OscConfig+0x4c8>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7ff f8bb 	bl	8001b54 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7ff f8b7 	bl	8001b54 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e103      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <HAL_RCC_OscConfig+0x4c8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x312>
 8002a08:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a6e      	ldr	r2, [pc, #440]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	e02d      	b.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x334>
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a69      	ldr	r2, [pc, #420]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a66      	ldr	r2, [pc, #408]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	e01c      	b.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCC_OscConfig+0x356>
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a60      	ldr	r2, [pc, #384]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	4b5e      	ldr	r3, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e00b      	b.n	8002a72 <HAL_RCC_OscConfig+0x36e>
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a5a      	ldr	r2, [pc, #360]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	4b58      	ldr	r3, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d015      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7ff f86b 	bl	8001b54 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a80:	e00a      	b.n	8002a98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7ff f867 	bl	8001b54 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0b1      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ee      	beq.n	8002a82 <HAL_RCC_OscConfig+0x37e>
 8002aa4:	e014      	b.n	8002ad0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7ff f855 	bl	8001b54 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7ff f851 	bl	8001b54 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e09b      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ee      	bne.n	8002aae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4a3b      	ldr	r2, [pc, #236]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8087 	beq.w	8002bfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aec:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d061      	beq.n	8002bbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d146      	bne.n	8002b8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b00:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7ff f825 	bl	8001b54 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7ff f821 	bl	8001b54 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e06d      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b20:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d108      	bne.n	8002b48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	4921      	ldr	r1, [pc, #132]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a19      	ldr	r1, [r3, #32]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe fff5 	bl	8001b54 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fff1 	bl	8001b54 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e03d      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x46a>
 8002b8c:	e035      	b.n	8002bfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe ffde 	bl	8001b54 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe ffda 	bl	8001b54 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e026      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x498>
 8002bba:	e01e      	b.n	8002bfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e019      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_OscConfig+0x500>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0d0      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d910      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b67      	ldr	r3, [pc, #412]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4965      	ldr	r1, [pc, #404]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b63      	ldr	r3, [pc, #396]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0b8      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c64:	4b59      	ldr	r3, [pc, #356]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	494d      	ldr	r1, [pc, #308]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d040      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e07f      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc6:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e073      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06b      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f023 0203 	bic.w	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4936      	ldr	r1, [pc, #216]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe ff2c 	bl	8001b54 <HAL_GetTick>
 8002cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d00:	f7fe ff28 	bl	8001b54 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e053      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	4b2d      	ldr	r3, [pc, #180]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 020c 	and.w	r2, r3, #12
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1eb      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d210      	bcs.n	8002d58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0207 	bic.w	r2, r3, #7
 8002d3e:	4922      	ldr	r1, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e032      	b.n	8002dbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4916      	ldr	r1, [pc, #88]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	490e      	ldr	r1, [pc, #56]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 f821 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	490a      	ldr	r1, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dae:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCC_ClockConfig+0x1cc>)
 8002db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1d0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fe fe8a 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40022000 	.word	0x40022000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	0800c5d4 	.word	0x0800c5d4
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	20000014 	.word	0x20000014

08002ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b490      	push	{r4, r7}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002de2:	4b29      	ldr	r3, [pc, #164]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xac>)
 8002de4:	1d3c      	adds	r4, r7, #4
 8002de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dec:	f240 2301 	movw	r3, #513	; 0x201
 8002df0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	2300      	movs	r3, #0
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e06:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x40>
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x46>
 8002e1a:	e02b      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e1e:	623b      	str	r3, [r7, #32]
      break;
 8002e20:	e02b      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	0c9b      	lsrs	r3, r3, #18
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3328      	adds	r3, #40	; 0x28
 8002e2c:	443b      	add	r3, r7
 8002e2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e32:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d012      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	0c5b      	lsrs	r3, r3, #17
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	3328      	adds	r3, #40	; 0x28
 8002e4a:	443b      	add	r3, r7
 8002e4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e56:	fb03 f202 	mul.w	r2, r3, r2
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	e004      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e68:	fb02 f303 	mul.w	r3, r2, r3
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	623b      	str	r3, [r7, #32]
      break;
 8002e72:	e002      	b.n	8002e7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e76:	623b      	str	r3, [r7, #32]
      break;
 8002e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3728      	adds	r7, #40	; 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc90      	pop	{r4, r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	08005544 	.word	0x08005544
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	007a1200 	.word	0x007a1200
 8002e94:	003d0900 	.word	0x003d0900

08002e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <RCC_Delay+0x34>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <RCC_Delay+0x38>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0a5b      	lsrs	r3, r3, #9
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eb4:	bf00      	nop
  }
  while (Delay --);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	60fa      	str	r2, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <RCC_Delay+0x1c>
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr
 8002ecc:	20000008 	.word	0x20000008
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd ff4c 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f000 fcb4 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e032      	b.n	8002ff2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_TIM_Base_Start+0x88>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_Base_Start+0x48>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIM_Base_Start+0x48>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <HAL_TIM_Base_Start+0x8c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_Base_Start+0x48>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_TIM_Base_Start+0x90>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d111      	bne.n	8002fe0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d010      	beq.n	8002ff0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	e007      	b.n	8002ff0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	40012c00 	.word	0x40012c00
 8003000:	40000400 	.word	0x40000400
 8003004:	40000800 	.word	0x40000800

08003008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e03a      	b.n	8003096 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_TIM_Base_Start_IT+0x98>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d009      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x58>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a13      	ldr	r2, [pc, #76]	; (80030a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d010      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	e007      	b.n	8003094 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800

080030ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f839 	bl	800314a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fbc8 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_TIM_PWM_Start+0x24>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e022      	b.n	80031c6 <HAL_TIM_PWM_Start+0x6a>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b04      	cmp	r3, #4
 8003184:	d109      	bne.n	800319a <HAL_TIM_PWM_Start+0x3e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e015      	b.n	80031c6 <HAL_TIM_PWM_Start+0x6a>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d109      	bne.n	80031b4 <HAL_TIM_PWM_Start+0x58>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	e008      	b.n	80031c6 <HAL_TIM_PWM_Start+0x6a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e05e      	b.n	800328c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0x82>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031dc:	e013      	b.n	8003206 <HAL_TIM_PWM_Start+0xaa>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_PWM_Start+0x92>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ec:	e00b      	b.n	8003206 <HAL_TIM_PWM_Start+0xaa>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0xa2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	e003      	b.n	8003206 <HAL_TIM_PWM_Start+0xaa>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2201      	movs	r2, #1
 800320c:	6839      	ldr	r1, [r7, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fe44 	bl	8003e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1e      	ldr	r2, [pc, #120]	; (8003294 <HAL_TIM_PWM_Start+0x138>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d107      	bne.n	800322e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_TIM_PWM_Start+0x138>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_TIM_PWM_Start+0xfa>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d009      	beq.n	8003256 <HAL_TIM_PWM_Start+0xfa>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_PWM_Start+0x13c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIM_PWM_Start+0xfa>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_TIM_PWM_Start+0x140>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d010      	beq.n	800328a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003278:	e007      	b.n	800328a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800

080032a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d122      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d11b      	bne.n	80032fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0202 	mvn.w	r2, #2
 80032cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fab1 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 faa4 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fab3 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b04      	cmp	r3, #4
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0204 	mvn.w	r2, #4
 8003320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa87 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa7a 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa89 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0208 	mvn.w	r2, #8
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2204      	movs	r2, #4
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa5d 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa50 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa5f 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0210 	mvn.w	r2, #16
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2208      	movs	r2, #8
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa33 	bl	800384a <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa26 	bl	8003838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa35 	bl	800385c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d10e      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d107      	bne.n	8003424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0201 	mvn.w	r2, #1
 800341c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fc feba 	bl	8000198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d10e      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d107      	bne.n	8003450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fe02 	bl	8004054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d10e      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003468:	2b40      	cmp	r3, #64	; 0x40
 800346a:	d107      	bne.n	800347c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9f9 	bl	800386e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b20      	cmp	r3, #32
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0220 	mvn.w	r2, #32
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fdcd 	bl	8004042 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0ac      	b.n	8003624 <HAL_TIM_PWM_ConfigChannel+0x174>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	f200 809f 	bhi.w	8003618 <HAL_TIM_PWM_ConfigChannel+0x168>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	08003515 	.word	0x08003515
 80034e4:	08003619 	.word	0x08003619
 80034e8:	08003619 	.word	0x08003619
 80034ec:	08003619 	.word	0x08003619
 80034f0:	08003555 	.word	0x08003555
 80034f4:	08003619 	.word	0x08003619
 80034f8:	08003619 	.word	0x08003619
 80034fc:	08003619 	.word	0x08003619
 8003500:	08003597 	.word	0x08003597
 8003504:	08003619 	.word	0x08003619
 8003508:	08003619 	.word	0x08003619
 800350c:	08003619 	.word	0x08003619
 8003510:	080035d7 	.word	0x080035d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa12 	bl	8003944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0204 	bic.w	r2, r2, #4
 800353e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6999      	ldr	r1, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	619a      	str	r2, [r3, #24]
      break;
 8003552:	e062      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fa58 	bl	8003a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800356e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6999      	ldr	r1, [r3, #24]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	021a      	lsls	r2, r3, #8
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	619a      	str	r2, [r3, #24]
      break;
 8003594:	e041      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 faa1 	bl	8003ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0208 	orr.w	r2, r2, #8
 80035b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0204 	bic.w	r2, r2, #4
 80035c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	61da      	str	r2, [r3, #28]
      break;
 80035d4:	e021      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 faeb 	bl	8003bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69d9      	ldr	r1, [r3, #28]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	021a      	lsls	r2, r3, #8
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	61da      	str	r2, [r3, #28]
      break;
 8003616:	e000      	b.n	800361a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003618:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIM_ConfigClockSource+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e0b3      	b.n	80037ac <HAL_TIM_ConfigClockSource+0x180>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d03e      	beq.n	80036fc <HAL_TIM_ConfigClockSource+0xd0>
 800367e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003682:	f200 8087 	bhi.w	8003794 <HAL_TIM_ConfigClockSource+0x168>
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	f000 8085 	beq.w	8003798 <HAL_TIM_ConfigClockSource+0x16c>
 800368e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003692:	d87f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 8003694:	2b70      	cmp	r3, #112	; 0x70
 8003696:	d01a      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xa2>
 8003698:	2b70      	cmp	r3, #112	; 0x70
 800369a:	d87b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 800369c:	2b60      	cmp	r3, #96	; 0x60
 800369e:	d050      	beq.n	8003742 <HAL_TIM_ConfigClockSource+0x116>
 80036a0:	2b60      	cmp	r3, #96	; 0x60
 80036a2:	d877      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036a4:	2b50      	cmp	r3, #80	; 0x50
 80036a6:	d03c      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0xf6>
 80036a8:	2b50      	cmp	r3, #80	; 0x50
 80036aa:	d873      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d058      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x136>
 80036b0:	2b40      	cmp	r3, #64	; 0x40
 80036b2:	d86f      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036b4:	2b30      	cmp	r3, #48	; 0x30
 80036b6:	d064      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
 80036b8:	2b30      	cmp	r3, #48	; 0x30
 80036ba:	d86b      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d060      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
 80036c0:	2b20      	cmp	r3, #32
 80036c2:	d867      	bhi.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
 80036c8:	2b10      	cmp	r3, #16
 80036ca:	d05a      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036cc:	e062      	b.n	8003794 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f000 fbbe 	bl	8003e5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
      break;
 80036fa:	e04e      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6899      	ldr	r1, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f000 fba7 	bl	8003e5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371e:	609a      	str	r2, [r3, #8]
      break;
 8003720:	e03b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	461a      	mov	r2, r3
 8003730:	f000 fb1e 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2150      	movs	r1, #80	; 0x50
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fb75 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003740:	e02b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	461a      	mov	r2, r3
 8003750:	f000 fb3c 	bl	8003dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2160      	movs	r1, #96	; 0x60
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fb65 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003760:	e01b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6859      	ldr	r1, [r3, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	461a      	mov	r2, r3
 8003770:	f000 fafe 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2140      	movs	r1, #64	; 0x40
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fb55 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003780:	e00b      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f000 fb4c 	bl	8003e2a <TIM_ITRx_SetConfig>
        break;
 8003792:	e002      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003794:	bf00      	nop
 8003796:	e000      	b.n	800379a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003798:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e031      	b.n	8003830 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa38 	bl	8003c54 <TIM_SlaveTimer_SetConfig>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e018      	b.n	8003830 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800380c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800381c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a26      	ldr	r2, [pc, #152]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a25      	ldr	r2, [pc, #148]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800

08003944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0201 	bic.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f023 0302 	bic.w	r3, r3, #2
 800398c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <TIM_OC1_SetConfig+0xc8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10c      	bne.n	80039ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0308 	bic.w	r3, r3, #8
 80039a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <TIM_OC1_SetConfig+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d111      	bne.n	80039e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40012c00 	.word	0x40012c00

08003a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0210 	bic.w	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f023 0320 	bic.w	r3, r3, #32
 8003a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ae0 <TIM_OC2_SetConfig+0xd0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d10d      	bne.n	8003a8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <TIM_OC2_SetConfig+0xd0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d113      	bne.n	8003abc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	40012c00 	.word	0x40012c00

08003ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <TIM_OC3_SetConfig+0xd0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10d      	bne.n	8003b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <TIM_OC3_SetConfig+0xd0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d113      	bne.n	8003b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	621a      	str	r2, [r3, #32]
}
 8003ba8:	bf00      	nop
 8003baa:	371c      	adds	r7, #28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00

08003bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <TIM_OC4_SetConfig+0x98>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d109      	bne.n	8003c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	40012c00 	.word	0x40012c00

08003c54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0307 	bic.w	r3, r3, #7
 8003c7e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b70      	cmp	r3, #112	; 0x70
 8003c98:	d01a      	beq.n	8003cd0 <TIM_SlaveTimer_SetConfig+0x7c>
 8003c9a:	2b70      	cmp	r3, #112	; 0x70
 8003c9c:	d860      	bhi.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
 8003c9e:	2b60      	cmp	r3, #96	; 0x60
 8003ca0:	d054      	beq.n	8003d4c <TIM_SlaveTimer_SetConfig+0xf8>
 8003ca2:	2b60      	cmp	r3, #96	; 0x60
 8003ca4:	d85c      	bhi.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
 8003ca6:	2b50      	cmp	r3, #80	; 0x50
 8003ca8:	d046      	beq.n	8003d38 <TIM_SlaveTimer_SetConfig+0xe4>
 8003caa:	2b50      	cmp	r3, #80	; 0x50
 8003cac:	d858      	bhi.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d019      	beq.n	8003ce6 <TIM_SlaveTimer_SetConfig+0x92>
 8003cb2:	2b40      	cmp	r3, #64	; 0x40
 8003cb4:	d854      	bhi.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
 8003cb6:	2b30      	cmp	r3, #48	; 0x30
 8003cb8:	d054      	beq.n	8003d64 <TIM_SlaveTimer_SetConfig+0x110>
 8003cba:	2b30      	cmp	r3, #48	; 0x30
 8003cbc:	d850      	bhi.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d050      	beq.n	8003d64 <TIM_SlaveTimer_SetConfig+0x110>
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d84c      	bhi.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04c      	beq.n	8003d64 <TIM_SlaveTimer_SetConfig+0x110>
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d04a      	beq.n	8003d64 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8003cce:	e047      	b.n	8003d60 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68d9      	ldr	r1, [r3, #12]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f000 f8bd 	bl	8003e5e <TIM_ETR_SetConfig>
      break;
 8003ce4:	e03f      	b.n	8003d66 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d101      	bne.n	8003cf2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e03a      	b.n	8003d68 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0201 	bic.w	r2, r2, #1
 8003d08:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d18:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	621a      	str	r2, [r3, #32]
      break;
 8003d36:	e016      	b.n	8003d66 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6899      	ldr	r1, [r3, #8]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f000 f813 	bl	8003d70 <TIM_TI1_ConfigInputStage>
      break;
 8003d4a:	e00c      	b.n	8003d66 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f000 f837 	bl	8003dcc <TIM_TI2_ConfigInputStage>
      break;
 8003d5e:	e002      	b.n	8003d66 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8003d64:	bf00      	nop
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 030a 	bic.w	r3, r3, #10
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 0210 	bic.w	r2, r3, #16
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	621a      	str	r2, [r3, #32]
}
 8003e20:	bf00      	nop
 8003e22:	371c      	adds	r7, #28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f043 0307 	orr.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b087      	sub	sp, #28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	021a      	lsls	r2, r3, #8
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2201      	movs	r2, #1
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e046      	b.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d009      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10c      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800

08003fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e03d      	b.n	8004038 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
	...

08004068 <__errno>:
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <__errno+0x8>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	2000001c 	.word	0x2000001c

08004074 <__libc_init_array>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	2600      	movs	r6, #0
 8004078:	4d0c      	ldr	r5, [pc, #48]	; (80040ac <__libc_init_array+0x38>)
 800407a:	4c0d      	ldr	r4, [pc, #52]	; (80040b0 <__libc_init_array+0x3c>)
 800407c:	1b64      	subs	r4, r4, r5
 800407e:	10a4      	asrs	r4, r4, #2
 8004080:	42a6      	cmp	r6, r4
 8004082:	d109      	bne.n	8004098 <__libc_init_array+0x24>
 8004084:	f001 fa3c 	bl	8005500 <_init>
 8004088:	2600      	movs	r6, #0
 800408a:	4d0a      	ldr	r5, [pc, #40]	; (80040b4 <__libc_init_array+0x40>)
 800408c:	4c0a      	ldr	r4, [pc, #40]	; (80040b8 <__libc_init_array+0x44>)
 800408e:	1b64      	subs	r4, r4, r5
 8004090:	10a4      	asrs	r4, r4, #2
 8004092:	42a6      	cmp	r6, r4
 8004094:	d105      	bne.n	80040a2 <__libc_init_array+0x2e>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	f855 3b04 	ldr.w	r3, [r5], #4
 800409c:	4798      	blx	r3
 800409e:	3601      	adds	r6, #1
 80040a0:	e7ee      	b.n	8004080 <__libc_init_array+0xc>
 80040a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a6:	4798      	blx	r3
 80040a8:	3601      	adds	r6, #1
 80040aa:	e7f2      	b.n	8004092 <__libc_init_array+0x1e>
 80040ac:	0800ce98 	.word	0x0800ce98
 80040b0:	0800ce98 	.word	0x0800ce98
 80040b4:	0800ce98 	.word	0x0800ce98
 80040b8:	0800ce9c 	.word	0x0800ce9c

080040bc <memcpy>:
 80040bc:	440a      	add	r2, r1
 80040be:	4291      	cmp	r1, r2
 80040c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040c4:	d100      	bne.n	80040c8 <memcpy+0xc>
 80040c6:	4770      	bx	lr
 80040c8:	b510      	push	{r4, lr}
 80040ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ce:	4291      	cmp	r1, r2
 80040d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040d4:	d1f9      	bne.n	80040ca <memcpy+0xe>
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <memset>:
 80040d8:	4603      	mov	r3, r0
 80040da:	4402      	add	r2, r0
 80040dc:	4293      	cmp	r3, r2
 80040de:	d100      	bne.n	80040e2 <memset+0xa>
 80040e0:	4770      	bx	lr
 80040e2:	f803 1b01 	strb.w	r1, [r3], #1
 80040e6:	e7f9      	b.n	80040dc <memset+0x4>

080040e8 <rand>:
 80040e8:	4b16      	ldr	r3, [pc, #88]	; (8004144 <rand+0x5c>)
 80040ea:	b510      	push	{r4, lr}
 80040ec:	681c      	ldr	r4, [r3, #0]
 80040ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040f0:	b9b3      	cbnz	r3, 8004120 <rand+0x38>
 80040f2:	2018      	movs	r0, #24
 80040f4:	f000 f886 	bl	8004204 <malloc>
 80040f8:	4602      	mov	r2, r0
 80040fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80040fc:	b920      	cbnz	r0, 8004108 <rand+0x20>
 80040fe:	214e      	movs	r1, #78	; 0x4e
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <rand+0x60>)
 8004102:	4812      	ldr	r0, [pc, #72]	; (800414c <rand+0x64>)
 8004104:	f000 f84e 	bl	80041a4 <__assert_func>
 8004108:	4911      	ldr	r1, [pc, #68]	; (8004150 <rand+0x68>)
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <rand+0x6c>)
 800410c:	e9c0 1300 	strd	r1, r3, [r0]
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <rand+0x70>)
 8004112:	2100      	movs	r1, #0
 8004114:	6083      	str	r3, [r0, #8]
 8004116:	230b      	movs	r3, #11
 8004118:	8183      	strh	r3, [r0, #12]
 800411a:	2001      	movs	r0, #1
 800411c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004120:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004122:	4a0e      	ldr	r2, [pc, #56]	; (800415c <rand+0x74>)
 8004124:	6920      	ldr	r0, [r4, #16]
 8004126:	6963      	ldr	r3, [r4, #20]
 8004128:	4342      	muls	r2, r0
 800412a:	490d      	ldr	r1, [pc, #52]	; (8004160 <rand+0x78>)
 800412c:	fb01 2203 	mla	r2, r1, r3, r2
 8004130:	fba0 0101 	umull	r0, r1, r0, r1
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	eb42 0001 	adc.w	r0, r2, r1
 800413a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800413e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004142:	bd10      	pop	{r4, pc}
 8004144:	2000001c 	.word	0x2000001c
 8004148:	0800cd54 	.word	0x0800cd54
 800414c:	0800cd6b 	.word	0x0800cd6b
 8004150:	abcd330e 	.word	0xabcd330e
 8004154:	e66d1234 	.word	0xe66d1234
 8004158:	0005deec 	.word	0x0005deec
 800415c:	5851f42d 	.word	0x5851f42d
 8004160:	4c957f2d 	.word	0x4c957f2d

08004164 <siprintf>:
 8004164:	b40e      	push	{r1, r2, r3}
 8004166:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800416a:	b500      	push	{lr}
 800416c:	b09c      	sub	sp, #112	; 0x70
 800416e:	ab1d      	add	r3, sp, #116	; 0x74
 8004170:	9002      	str	r0, [sp, #8]
 8004172:	9006      	str	r0, [sp, #24]
 8004174:	9107      	str	r1, [sp, #28]
 8004176:	9104      	str	r1, [sp, #16]
 8004178:	4808      	ldr	r0, [pc, #32]	; (800419c <siprintf+0x38>)
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <siprintf+0x3c>)
 800417c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	a902      	add	r1, sp, #8
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	f000 f97c 	bl	8004484 <_svfiprintf_r>
 800418c:	2200      	movs	r2, #0
 800418e:	9b02      	ldr	r3, [sp, #8]
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	b01c      	add	sp, #112	; 0x70
 8004194:	f85d eb04 	ldr.w	lr, [sp], #4
 8004198:	b003      	add	sp, #12
 800419a:	4770      	bx	lr
 800419c:	2000001c 	.word	0x2000001c
 80041a0:	ffff0208 	.word	0xffff0208

080041a4 <__assert_func>:
 80041a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041a6:	4614      	mov	r4, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <__assert_func+0x2c>)
 80041ac:	4605      	mov	r5, r0
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68d8      	ldr	r0, [r3, #12]
 80041b2:	b14c      	cbz	r4, 80041c8 <__assert_func+0x24>
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <__assert_func+0x30>)
 80041b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80041ba:	9100      	str	r1, [sp, #0]
 80041bc:	462b      	mov	r3, r5
 80041be:	4906      	ldr	r1, [pc, #24]	; (80041d8 <__assert_func+0x34>)
 80041c0:	f000 f80e 	bl	80041e0 <fiprintf>
 80041c4:	f000 fe1c 	bl	8004e00 <abort>
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <__assert_func+0x38>)
 80041ca:	461c      	mov	r4, r3
 80041cc:	e7f3      	b.n	80041b6 <__assert_func+0x12>
 80041ce:	bf00      	nop
 80041d0:	2000001c 	.word	0x2000001c
 80041d4:	0800cdc6 	.word	0x0800cdc6
 80041d8:	0800cdd3 	.word	0x0800cdd3
 80041dc:	0800ce01 	.word	0x0800ce01

080041e0 <fiprintf>:
 80041e0:	b40e      	push	{r1, r2, r3}
 80041e2:	b503      	push	{r0, r1, lr}
 80041e4:	4601      	mov	r1, r0
 80041e6:	ab03      	add	r3, sp, #12
 80041e8:	4805      	ldr	r0, [pc, #20]	; (8004200 <fiprintf+0x20>)
 80041ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ee:	6800      	ldr	r0, [r0, #0]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	f000 fa6f 	bl	80046d4 <_vfiprintf_r>
 80041f6:	b002      	add	sp, #8
 80041f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80041fc:	b003      	add	sp, #12
 80041fe:	4770      	bx	lr
 8004200:	2000001c 	.word	0x2000001c

08004204 <malloc>:
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <malloc+0xc>)
 8004206:	4601      	mov	r1, r0
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	f000 b86b 	b.w	80042e4 <_malloc_r>
 800420e:	bf00      	nop
 8004210:	2000001c 	.word	0x2000001c

08004214 <_free_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4605      	mov	r5, r0
 8004218:	2900      	cmp	r1, #0
 800421a:	d040      	beq.n	800429e <_free_r+0x8a>
 800421c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004220:	1f0c      	subs	r4, r1, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	bfb8      	it	lt
 8004226:	18e4      	addlt	r4, r4, r3
 8004228:	f001 f836 	bl	8005298 <__malloc_lock>
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <_free_r+0x8c>)
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	b933      	cbnz	r3, 8004240 <_free_r+0x2c>
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6014      	str	r4, [r2, #0]
 8004236:	4628      	mov	r0, r5
 8004238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800423c:	f001 b832 	b.w	80052a4 <__malloc_unlock>
 8004240:	42a3      	cmp	r3, r4
 8004242:	d908      	bls.n	8004256 <_free_r+0x42>
 8004244:	6820      	ldr	r0, [r4, #0]
 8004246:	1821      	adds	r1, r4, r0
 8004248:	428b      	cmp	r3, r1
 800424a:	bf01      	itttt	eq
 800424c:	6819      	ldreq	r1, [r3, #0]
 800424e:	685b      	ldreq	r3, [r3, #4]
 8004250:	1809      	addeq	r1, r1, r0
 8004252:	6021      	streq	r1, [r4, #0]
 8004254:	e7ed      	b.n	8004232 <_free_r+0x1e>
 8004256:	461a      	mov	r2, r3
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	b10b      	cbz	r3, 8004260 <_free_r+0x4c>
 800425c:	42a3      	cmp	r3, r4
 800425e:	d9fa      	bls.n	8004256 <_free_r+0x42>
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	1850      	adds	r0, r2, r1
 8004264:	42a0      	cmp	r0, r4
 8004266:	d10b      	bne.n	8004280 <_free_r+0x6c>
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	4401      	add	r1, r0
 800426c:	1850      	adds	r0, r2, r1
 800426e:	4283      	cmp	r3, r0
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	d1e0      	bne.n	8004236 <_free_r+0x22>
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4401      	add	r1, r0
 800427a:	6011      	str	r1, [r2, #0]
 800427c:	6053      	str	r3, [r2, #4]
 800427e:	e7da      	b.n	8004236 <_free_r+0x22>
 8004280:	d902      	bls.n	8004288 <_free_r+0x74>
 8004282:	230c      	movs	r3, #12
 8004284:	602b      	str	r3, [r5, #0]
 8004286:	e7d6      	b.n	8004236 <_free_r+0x22>
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	1821      	adds	r1, r4, r0
 800428c:	428b      	cmp	r3, r1
 800428e:	bf01      	itttt	eq
 8004290:	6819      	ldreq	r1, [r3, #0]
 8004292:	685b      	ldreq	r3, [r3, #4]
 8004294:	1809      	addeq	r1, r1, r0
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	6063      	str	r3, [r4, #4]
 800429a:	6054      	str	r4, [r2, #4]
 800429c:	e7cb      	b.n	8004236 <_free_r+0x22>
 800429e:	bd38      	pop	{r3, r4, r5, pc}
 80042a0:	20002738 	.word	0x20002738

080042a4 <sbrk_aligned>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0e      	ldr	r6, [pc, #56]	; (80042e0 <sbrk_aligned+0x3c>)
 80042a8:	460c      	mov	r4, r1
 80042aa:	6831      	ldr	r1, [r6, #0]
 80042ac:	4605      	mov	r5, r0
 80042ae:	b911      	cbnz	r1, 80042b6 <sbrk_aligned+0x12>
 80042b0:	f000 fcd6 	bl	8004c60 <_sbrk_r>
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 fcd1 	bl	8004c60 <_sbrk_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d00a      	beq.n	80042d8 <sbrk_aligned+0x34>
 80042c2:	1cc4      	adds	r4, r0, #3
 80042c4:	f024 0403 	bic.w	r4, r4, #3
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d007      	beq.n	80042dc <sbrk_aligned+0x38>
 80042cc:	1a21      	subs	r1, r4, r0
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 fcc6 	bl	8004c60 <_sbrk_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d101      	bne.n	80042dc <sbrk_aligned+0x38>
 80042d8:	f04f 34ff 	mov.w	r4, #4294967295
 80042dc:	4620      	mov	r0, r4
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	2000273c 	.word	0x2000273c

080042e4 <_malloc_r>:
 80042e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e8:	1ccd      	adds	r5, r1, #3
 80042ea:	f025 0503 	bic.w	r5, r5, #3
 80042ee:	3508      	adds	r5, #8
 80042f0:	2d0c      	cmp	r5, #12
 80042f2:	bf38      	it	cc
 80042f4:	250c      	movcc	r5, #12
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	4607      	mov	r7, r0
 80042fa:	db01      	blt.n	8004300 <_malloc_r+0x1c>
 80042fc:	42a9      	cmp	r1, r5
 80042fe:	d905      	bls.n	800430c <_malloc_r+0x28>
 8004300:	230c      	movs	r3, #12
 8004302:	2600      	movs	r6, #0
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4630      	mov	r0, r6
 8004308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430c:	4e2e      	ldr	r6, [pc, #184]	; (80043c8 <_malloc_r+0xe4>)
 800430e:	f000 ffc3 	bl	8005298 <__malloc_lock>
 8004312:	6833      	ldr	r3, [r6, #0]
 8004314:	461c      	mov	r4, r3
 8004316:	bb34      	cbnz	r4, 8004366 <_malloc_r+0x82>
 8004318:	4629      	mov	r1, r5
 800431a:	4638      	mov	r0, r7
 800431c:	f7ff ffc2 	bl	80042a4 <sbrk_aligned>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	4604      	mov	r4, r0
 8004324:	d14d      	bne.n	80043c2 <_malloc_r+0xde>
 8004326:	6834      	ldr	r4, [r6, #0]
 8004328:	4626      	mov	r6, r4
 800432a:	2e00      	cmp	r6, #0
 800432c:	d140      	bne.n	80043b0 <_malloc_r+0xcc>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	4631      	mov	r1, r6
 8004332:	4638      	mov	r0, r7
 8004334:	eb04 0803 	add.w	r8, r4, r3
 8004338:	f000 fc92 	bl	8004c60 <_sbrk_r>
 800433c:	4580      	cmp	r8, r0
 800433e:	d13a      	bne.n	80043b6 <_malloc_r+0xd2>
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	3503      	adds	r5, #3
 8004344:	1a6d      	subs	r5, r5, r1
 8004346:	f025 0503 	bic.w	r5, r5, #3
 800434a:	3508      	adds	r5, #8
 800434c:	2d0c      	cmp	r5, #12
 800434e:	bf38      	it	cc
 8004350:	250c      	movcc	r5, #12
 8004352:	4638      	mov	r0, r7
 8004354:	4629      	mov	r1, r5
 8004356:	f7ff ffa5 	bl	80042a4 <sbrk_aligned>
 800435a:	3001      	adds	r0, #1
 800435c:	d02b      	beq.n	80043b6 <_malloc_r+0xd2>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	442b      	add	r3, r5
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	e00e      	b.n	8004384 <_malloc_r+0xa0>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	1b52      	subs	r2, r2, r5
 800436a:	d41e      	bmi.n	80043aa <_malloc_r+0xc6>
 800436c:	2a0b      	cmp	r2, #11
 800436e:	d916      	bls.n	800439e <_malloc_r+0xba>
 8004370:	1961      	adds	r1, r4, r5
 8004372:	42a3      	cmp	r3, r4
 8004374:	6025      	str	r5, [r4, #0]
 8004376:	bf18      	it	ne
 8004378:	6059      	strne	r1, [r3, #4]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	bf08      	it	eq
 800437e:	6031      	streq	r1, [r6, #0]
 8004380:	5162      	str	r2, [r4, r5]
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	4638      	mov	r0, r7
 8004386:	f104 060b 	add.w	r6, r4, #11
 800438a:	f000 ff8b 	bl	80052a4 <__malloc_unlock>
 800438e:	f026 0607 	bic.w	r6, r6, #7
 8004392:	1d23      	adds	r3, r4, #4
 8004394:	1af2      	subs	r2, r6, r3
 8004396:	d0b6      	beq.n	8004306 <_malloc_r+0x22>
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	50a3      	str	r3, [r4, r2]
 800439c:	e7b3      	b.n	8004306 <_malloc_r+0x22>
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	bf0c      	ite	eq
 80043a4:	6032      	streq	r2, [r6, #0]
 80043a6:	605a      	strne	r2, [r3, #4]
 80043a8:	e7ec      	b.n	8004384 <_malloc_r+0xa0>
 80043aa:	4623      	mov	r3, r4
 80043ac:	6864      	ldr	r4, [r4, #4]
 80043ae:	e7b2      	b.n	8004316 <_malloc_r+0x32>
 80043b0:	4634      	mov	r4, r6
 80043b2:	6876      	ldr	r6, [r6, #4]
 80043b4:	e7b9      	b.n	800432a <_malloc_r+0x46>
 80043b6:	230c      	movs	r3, #12
 80043b8:	4638      	mov	r0, r7
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	f000 ff72 	bl	80052a4 <__malloc_unlock>
 80043c0:	e7a1      	b.n	8004306 <_malloc_r+0x22>
 80043c2:	6025      	str	r5, [r4, #0]
 80043c4:	e7de      	b.n	8004384 <_malloc_r+0xa0>
 80043c6:	bf00      	nop
 80043c8:	20002738 	.word	0x20002738

080043cc <__ssputs_r>:
 80043cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d0:	688e      	ldr	r6, [r1, #8]
 80043d2:	4682      	mov	sl, r0
 80043d4:	429e      	cmp	r6, r3
 80043d6:	460c      	mov	r4, r1
 80043d8:	4690      	mov	r8, r2
 80043da:	461f      	mov	r7, r3
 80043dc:	d838      	bhi.n	8004450 <__ssputs_r+0x84>
 80043de:	898a      	ldrh	r2, [r1, #12]
 80043e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043e4:	d032      	beq.n	800444c <__ssputs_r+0x80>
 80043e6:	6825      	ldr	r5, [r4, #0]
 80043e8:	6909      	ldr	r1, [r1, #16]
 80043ea:	3301      	adds	r3, #1
 80043ec:	eba5 0901 	sub.w	r9, r5, r1
 80043f0:	6965      	ldr	r5, [r4, #20]
 80043f2:	444b      	add	r3, r9
 80043f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043fc:	106d      	asrs	r5, r5, #1
 80043fe:	429d      	cmp	r5, r3
 8004400:	bf38      	it	cc
 8004402:	461d      	movcc	r5, r3
 8004404:	0553      	lsls	r3, r2, #21
 8004406:	d531      	bpl.n	800446c <__ssputs_r+0xa0>
 8004408:	4629      	mov	r1, r5
 800440a:	f7ff ff6b 	bl	80042e4 <_malloc_r>
 800440e:	4606      	mov	r6, r0
 8004410:	b950      	cbnz	r0, 8004428 <__ssputs_r+0x5c>
 8004412:	230c      	movs	r3, #12
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f8ca 3000 	str.w	r3, [sl]
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004422:	81a3      	strh	r3, [r4, #12]
 8004424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004428:	464a      	mov	r2, r9
 800442a:	6921      	ldr	r1, [r4, #16]
 800442c:	f7ff fe46 	bl	80040bc <memcpy>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443a:	81a3      	strh	r3, [r4, #12]
 800443c:	6126      	str	r6, [r4, #16]
 800443e:	444e      	add	r6, r9
 8004440:	6026      	str	r6, [r4, #0]
 8004442:	463e      	mov	r6, r7
 8004444:	6165      	str	r5, [r4, #20]
 8004446:	eba5 0509 	sub.w	r5, r5, r9
 800444a:	60a5      	str	r5, [r4, #8]
 800444c:	42be      	cmp	r6, r7
 800444e:	d900      	bls.n	8004452 <__ssputs_r+0x86>
 8004450:	463e      	mov	r6, r7
 8004452:	4632      	mov	r2, r6
 8004454:	4641      	mov	r1, r8
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	f000 ff04 	bl	8005264 <memmove>
 800445c:	68a3      	ldr	r3, [r4, #8]
 800445e:	2000      	movs	r0, #0
 8004460:	1b9b      	subs	r3, r3, r6
 8004462:	60a3      	str	r3, [r4, #8]
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	4433      	add	r3, r6
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	e7db      	b.n	8004424 <__ssputs_r+0x58>
 800446c:	462a      	mov	r2, r5
 800446e:	f000 ff1f 	bl	80052b0 <_realloc_r>
 8004472:	4606      	mov	r6, r0
 8004474:	2800      	cmp	r0, #0
 8004476:	d1e1      	bne.n	800443c <__ssputs_r+0x70>
 8004478:	4650      	mov	r0, sl
 800447a:	6921      	ldr	r1, [r4, #16]
 800447c:	f7ff feca 	bl	8004214 <_free_r>
 8004480:	e7c7      	b.n	8004412 <__ssputs_r+0x46>
	...

08004484 <_svfiprintf_r>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	4698      	mov	r8, r3
 800448a:	898b      	ldrh	r3, [r1, #12]
 800448c:	4607      	mov	r7, r0
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	460d      	mov	r5, r1
 8004492:	4614      	mov	r4, r2
 8004494:	b09d      	sub	sp, #116	; 0x74
 8004496:	d50e      	bpl.n	80044b6 <_svfiprintf_r+0x32>
 8004498:	690b      	ldr	r3, [r1, #16]
 800449a:	b963      	cbnz	r3, 80044b6 <_svfiprintf_r+0x32>
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	f7ff ff21 	bl	80042e4 <_malloc_r>
 80044a2:	6028      	str	r0, [r5, #0]
 80044a4:	6128      	str	r0, [r5, #16]
 80044a6:	b920      	cbnz	r0, 80044b2 <_svfiprintf_r+0x2e>
 80044a8:	230c      	movs	r3, #12
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e0d1      	b.n	8004656 <_svfiprintf_r+0x1d2>
 80044b2:	2340      	movs	r3, #64	; 0x40
 80044b4:	616b      	str	r3, [r5, #20]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ba:	2320      	movs	r3, #32
 80044bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044c0:	2330      	movs	r3, #48	; 0x30
 80044c2:	f04f 0901 	mov.w	r9, #1
 80044c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004670 <_svfiprintf_r+0x1ec>
 80044ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044d2:	4623      	mov	r3, r4
 80044d4:	469a      	mov	sl, r3
 80044d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044da:	b10a      	cbz	r2, 80044e0 <_svfiprintf_r+0x5c>
 80044dc:	2a25      	cmp	r2, #37	; 0x25
 80044de:	d1f9      	bne.n	80044d4 <_svfiprintf_r+0x50>
 80044e0:	ebba 0b04 	subs.w	fp, sl, r4
 80044e4:	d00b      	beq.n	80044fe <_svfiprintf_r+0x7a>
 80044e6:	465b      	mov	r3, fp
 80044e8:	4622      	mov	r2, r4
 80044ea:	4629      	mov	r1, r5
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7ff ff6d 	bl	80043cc <__ssputs_r>
 80044f2:	3001      	adds	r0, #1
 80044f4:	f000 80aa 	beq.w	800464c <_svfiprintf_r+0x1c8>
 80044f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fa:	445a      	add	r2, fp
 80044fc:	9209      	str	r2, [sp, #36]	; 0x24
 80044fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80a2 	beq.w	800464c <_svfiprintf_r+0x1c8>
 8004508:	2300      	movs	r3, #0
 800450a:	f04f 32ff 	mov.w	r2, #4294967295
 800450e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004512:	f10a 0a01 	add.w	sl, sl, #1
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	9307      	str	r3, [sp, #28]
 800451a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800451e:	931a      	str	r3, [sp, #104]	; 0x68
 8004520:	4654      	mov	r4, sl
 8004522:	2205      	movs	r2, #5
 8004524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004528:	4851      	ldr	r0, [pc, #324]	; (8004670 <_svfiprintf_r+0x1ec>)
 800452a:	f000 fe8d 	bl	8005248 <memchr>
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	b9d8      	cbnz	r0, 800456a <_svfiprintf_r+0xe6>
 8004532:	06d0      	lsls	r0, r2, #27
 8004534:	bf44      	itt	mi
 8004536:	2320      	movmi	r3, #32
 8004538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800453c:	0711      	lsls	r1, r2, #28
 800453e:	bf44      	itt	mi
 8004540:	232b      	movmi	r3, #43	; 0x2b
 8004542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004546:	f89a 3000 	ldrb.w	r3, [sl]
 800454a:	2b2a      	cmp	r3, #42	; 0x2a
 800454c:	d015      	beq.n	800457a <_svfiprintf_r+0xf6>
 800454e:	4654      	mov	r4, sl
 8004550:	2000      	movs	r0, #0
 8004552:	f04f 0c0a 	mov.w	ip, #10
 8004556:	9a07      	ldr	r2, [sp, #28]
 8004558:	4621      	mov	r1, r4
 800455a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455e:	3b30      	subs	r3, #48	; 0x30
 8004560:	2b09      	cmp	r3, #9
 8004562:	d94e      	bls.n	8004602 <_svfiprintf_r+0x17e>
 8004564:	b1b0      	cbz	r0, 8004594 <_svfiprintf_r+0x110>
 8004566:	9207      	str	r2, [sp, #28]
 8004568:	e014      	b.n	8004594 <_svfiprintf_r+0x110>
 800456a:	eba0 0308 	sub.w	r3, r0, r8
 800456e:	fa09 f303 	lsl.w	r3, r9, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	46a2      	mov	sl, r4
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	e7d2      	b.n	8004520 <_svfiprintf_r+0x9c>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	9103      	str	r1, [sp, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfbb      	ittet	lt
 8004586:	425b      	neglt	r3, r3
 8004588:	f042 0202 	orrlt.w	r2, r2, #2
 800458c:	9307      	strge	r3, [sp, #28]
 800458e:	9307      	strlt	r3, [sp, #28]
 8004590:	bfb8      	it	lt
 8004592:	9204      	strlt	r2, [sp, #16]
 8004594:	7823      	ldrb	r3, [r4, #0]
 8004596:	2b2e      	cmp	r3, #46	; 0x2e
 8004598:	d10c      	bne.n	80045b4 <_svfiprintf_r+0x130>
 800459a:	7863      	ldrb	r3, [r4, #1]
 800459c:	2b2a      	cmp	r3, #42	; 0x2a
 800459e:	d135      	bne.n	800460c <_svfiprintf_r+0x188>
 80045a0:	9b03      	ldr	r3, [sp, #12]
 80045a2:	3402      	adds	r4, #2
 80045a4:	1d1a      	adds	r2, r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	9203      	str	r2, [sp, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfb8      	it	lt
 80045ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004674 <_svfiprintf_r+0x1f0>
 80045b8:	2203      	movs	r2, #3
 80045ba:	4650      	mov	r0, sl
 80045bc:	7821      	ldrb	r1, [r4, #0]
 80045be:	f000 fe43 	bl	8005248 <memchr>
 80045c2:	b140      	cbz	r0, 80045d6 <_svfiprintf_r+0x152>
 80045c4:	2340      	movs	r3, #64	; 0x40
 80045c6:	eba0 000a 	sub.w	r0, r0, sl
 80045ca:	fa03 f000 	lsl.w	r0, r3, r0
 80045ce:	9b04      	ldr	r3, [sp, #16]
 80045d0:	3401      	adds	r4, #1
 80045d2:	4303      	orrs	r3, r0
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045da:	2206      	movs	r2, #6
 80045dc:	4826      	ldr	r0, [pc, #152]	; (8004678 <_svfiprintf_r+0x1f4>)
 80045de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045e2:	f000 fe31 	bl	8005248 <memchr>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d038      	beq.n	800465c <_svfiprintf_r+0x1d8>
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <_svfiprintf_r+0x1f8>)
 80045ec:	bb1b      	cbnz	r3, 8004636 <_svfiprintf_r+0x1b2>
 80045ee:	9b03      	ldr	r3, [sp, #12]
 80045f0:	3307      	adds	r3, #7
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	3308      	adds	r3, #8
 80045f8:	9303      	str	r3, [sp, #12]
 80045fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fc:	4433      	add	r3, r6
 80045fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004600:	e767      	b.n	80044d2 <_svfiprintf_r+0x4e>
 8004602:	460c      	mov	r4, r1
 8004604:	2001      	movs	r0, #1
 8004606:	fb0c 3202 	mla	r2, ip, r2, r3
 800460a:	e7a5      	b.n	8004558 <_svfiprintf_r+0xd4>
 800460c:	2300      	movs	r3, #0
 800460e:	f04f 0c0a 	mov.w	ip, #10
 8004612:	4619      	mov	r1, r3
 8004614:	3401      	adds	r4, #1
 8004616:	9305      	str	r3, [sp, #20]
 8004618:	4620      	mov	r0, r4
 800461a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800461e:	3a30      	subs	r2, #48	; 0x30
 8004620:	2a09      	cmp	r2, #9
 8004622:	d903      	bls.n	800462c <_svfiprintf_r+0x1a8>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0c5      	beq.n	80045b4 <_svfiprintf_r+0x130>
 8004628:	9105      	str	r1, [sp, #20]
 800462a:	e7c3      	b.n	80045b4 <_svfiprintf_r+0x130>
 800462c:	4604      	mov	r4, r0
 800462e:	2301      	movs	r3, #1
 8004630:	fb0c 2101 	mla	r1, ip, r1, r2
 8004634:	e7f0      	b.n	8004618 <_svfiprintf_r+0x194>
 8004636:	ab03      	add	r3, sp, #12
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	462a      	mov	r2, r5
 800463c:	4638      	mov	r0, r7
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <_svfiprintf_r+0x1fc>)
 8004640:	a904      	add	r1, sp, #16
 8004642:	f3af 8000 	nop.w
 8004646:	1c42      	adds	r2, r0, #1
 8004648:	4606      	mov	r6, r0
 800464a:	d1d6      	bne.n	80045fa <_svfiprintf_r+0x176>
 800464c:	89ab      	ldrh	r3, [r5, #12]
 800464e:	065b      	lsls	r3, r3, #25
 8004650:	f53f af2c 	bmi.w	80044ac <_svfiprintf_r+0x28>
 8004654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004656:	b01d      	add	sp, #116	; 0x74
 8004658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465c:	ab03      	add	r3, sp, #12
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	462a      	mov	r2, r5
 8004662:	4638      	mov	r0, r7
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <_svfiprintf_r+0x1fc>)
 8004666:	a904      	add	r1, sp, #16
 8004668:	f000 f9d4 	bl	8004a14 <_printf_i>
 800466c:	e7eb      	b.n	8004646 <_svfiprintf_r+0x1c2>
 800466e:	bf00      	nop
 8004670:	0800ce02 	.word	0x0800ce02
 8004674:	0800ce08 	.word	0x0800ce08
 8004678:	0800ce0c 	.word	0x0800ce0c
 800467c:	00000000 	.word	0x00000000
 8004680:	080043cd 	.word	0x080043cd

08004684 <__sfputc_r>:
 8004684:	6893      	ldr	r3, [r2, #8]
 8004686:	b410      	push	{r4}
 8004688:	3b01      	subs	r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	6093      	str	r3, [r2, #8]
 800468e:	da07      	bge.n	80046a0 <__sfputc_r+0x1c>
 8004690:	6994      	ldr	r4, [r2, #24]
 8004692:	42a3      	cmp	r3, r4
 8004694:	db01      	blt.n	800469a <__sfputc_r+0x16>
 8004696:	290a      	cmp	r1, #10
 8004698:	d102      	bne.n	80046a0 <__sfputc_r+0x1c>
 800469a:	bc10      	pop	{r4}
 800469c:	f000 baf0 	b.w	8004c80 <__swbuf_r>
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	1c58      	adds	r0, r3, #1
 80046a4:	6010      	str	r0, [r2, #0]
 80046a6:	7019      	strb	r1, [r3, #0]
 80046a8:	4608      	mov	r0, r1
 80046aa:	bc10      	pop	{r4}
 80046ac:	4770      	bx	lr

080046ae <__sfputs_r>:
 80046ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b0:	4606      	mov	r6, r0
 80046b2:	460f      	mov	r7, r1
 80046b4:	4614      	mov	r4, r2
 80046b6:	18d5      	adds	r5, r2, r3
 80046b8:	42ac      	cmp	r4, r5
 80046ba:	d101      	bne.n	80046c0 <__sfputs_r+0x12>
 80046bc:	2000      	movs	r0, #0
 80046be:	e007      	b.n	80046d0 <__sfputs_r+0x22>
 80046c0:	463a      	mov	r2, r7
 80046c2:	4630      	mov	r0, r6
 80046c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046c8:	f7ff ffdc 	bl	8004684 <__sfputc_r>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d1f3      	bne.n	80046b8 <__sfputs_r+0xa>
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046d4 <_vfiprintf_r>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	460d      	mov	r5, r1
 80046da:	4614      	mov	r4, r2
 80046dc:	4698      	mov	r8, r3
 80046de:	4606      	mov	r6, r0
 80046e0:	b09d      	sub	sp, #116	; 0x74
 80046e2:	b118      	cbz	r0, 80046ec <_vfiprintf_r+0x18>
 80046e4:	6983      	ldr	r3, [r0, #24]
 80046e6:	b90b      	cbnz	r3, 80046ec <_vfiprintf_r+0x18>
 80046e8:	f000 fca8 	bl	800503c <__sinit>
 80046ec:	4b89      	ldr	r3, [pc, #548]	; (8004914 <_vfiprintf_r+0x240>)
 80046ee:	429d      	cmp	r5, r3
 80046f0:	d11b      	bne.n	800472a <_vfiprintf_r+0x56>
 80046f2:	6875      	ldr	r5, [r6, #4]
 80046f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046f6:	07d9      	lsls	r1, r3, #31
 80046f8:	d405      	bmi.n	8004706 <_vfiprintf_r+0x32>
 80046fa:	89ab      	ldrh	r3, [r5, #12]
 80046fc:	059a      	lsls	r2, r3, #22
 80046fe:	d402      	bmi.n	8004706 <_vfiprintf_r+0x32>
 8004700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004702:	f000 fd39 	bl	8005178 <__retarget_lock_acquire_recursive>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	071b      	lsls	r3, r3, #28
 800470a:	d501      	bpl.n	8004710 <_vfiprintf_r+0x3c>
 800470c:	692b      	ldr	r3, [r5, #16]
 800470e:	b9eb      	cbnz	r3, 800474c <_vfiprintf_r+0x78>
 8004710:	4629      	mov	r1, r5
 8004712:	4630      	mov	r0, r6
 8004714:	f000 fb06 	bl	8004d24 <__swsetup_r>
 8004718:	b1c0      	cbz	r0, 800474c <_vfiprintf_r+0x78>
 800471a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800471c:	07dc      	lsls	r4, r3, #31
 800471e:	d50e      	bpl.n	800473e <_vfiprintf_r+0x6a>
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	b01d      	add	sp, #116	; 0x74
 8004726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472a:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <_vfiprintf_r+0x244>)
 800472c:	429d      	cmp	r5, r3
 800472e:	d101      	bne.n	8004734 <_vfiprintf_r+0x60>
 8004730:	68b5      	ldr	r5, [r6, #8]
 8004732:	e7df      	b.n	80046f4 <_vfiprintf_r+0x20>
 8004734:	4b79      	ldr	r3, [pc, #484]	; (800491c <_vfiprintf_r+0x248>)
 8004736:	429d      	cmp	r5, r3
 8004738:	bf08      	it	eq
 800473a:	68f5      	ldreq	r5, [r6, #12]
 800473c:	e7da      	b.n	80046f4 <_vfiprintf_r+0x20>
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	0598      	lsls	r0, r3, #22
 8004742:	d4ed      	bmi.n	8004720 <_vfiprintf_r+0x4c>
 8004744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004746:	f000 fd18 	bl	800517a <__retarget_lock_release_recursive>
 800474a:	e7e9      	b.n	8004720 <_vfiprintf_r+0x4c>
 800474c:	2300      	movs	r3, #0
 800474e:	9309      	str	r3, [sp, #36]	; 0x24
 8004750:	2320      	movs	r3, #32
 8004752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004756:	2330      	movs	r3, #48	; 0x30
 8004758:	f04f 0901 	mov.w	r9, #1
 800475c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004760:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004920 <_vfiprintf_r+0x24c>
 8004764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004768:	4623      	mov	r3, r4
 800476a:	469a      	mov	sl, r3
 800476c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004770:	b10a      	cbz	r2, 8004776 <_vfiprintf_r+0xa2>
 8004772:	2a25      	cmp	r2, #37	; 0x25
 8004774:	d1f9      	bne.n	800476a <_vfiprintf_r+0x96>
 8004776:	ebba 0b04 	subs.w	fp, sl, r4
 800477a:	d00b      	beq.n	8004794 <_vfiprintf_r+0xc0>
 800477c:	465b      	mov	r3, fp
 800477e:	4622      	mov	r2, r4
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ff93 	bl	80046ae <__sfputs_r>
 8004788:	3001      	adds	r0, #1
 800478a:	f000 80aa 	beq.w	80048e2 <_vfiprintf_r+0x20e>
 800478e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004790:	445a      	add	r2, fp
 8004792:	9209      	str	r2, [sp, #36]	; 0x24
 8004794:	f89a 3000 	ldrb.w	r3, [sl]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a2 	beq.w	80048e2 <_vfiprintf_r+0x20e>
 800479e:	2300      	movs	r3, #0
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047a8:	f10a 0a01 	add.w	sl, sl, #1
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	9307      	str	r3, [sp, #28]
 80047b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047b4:	931a      	str	r3, [sp, #104]	; 0x68
 80047b6:	4654      	mov	r4, sl
 80047b8:	2205      	movs	r2, #5
 80047ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047be:	4858      	ldr	r0, [pc, #352]	; (8004920 <_vfiprintf_r+0x24c>)
 80047c0:	f000 fd42 	bl	8005248 <memchr>
 80047c4:	9a04      	ldr	r2, [sp, #16]
 80047c6:	b9d8      	cbnz	r0, 8004800 <_vfiprintf_r+0x12c>
 80047c8:	06d1      	lsls	r1, r2, #27
 80047ca:	bf44      	itt	mi
 80047cc:	2320      	movmi	r3, #32
 80047ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047d2:	0713      	lsls	r3, r2, #28
 80047d4:	bf44      	itt	mi
 80047d6:	232b      	movmi	r3, #43	; 0x2b
 80047d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047dc:	f89a 3000 	ldrb.w	r3, [sl]
 80047e0:	2b2a      	cmp	r3, #42	; 0x2a
 80047e2:	d015      	beq.n	8004810 <_vfiprintf_r+0x13c>
 80047e4:	4654      	mov	r4, sl
 80047e6:	2000      	movs	r0, #0
 80047e8:	f04f 0c0a 	mov.w	ip, #10
 80047ec:	9a07      	ldr	r2, [sp, #28]
 80047ee:	4621      	mov	r1, r4
 80047f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f4:	3b30      	subs	r3, #48	; 0x30
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d94e      	bls.n	8004898 <_vfiprintf_r+0x1c4>
 80047fa:	b1b0      	cbz	r0, 800482a <_vfiprintf_r+0x156>
 80047fc:	9207      	str	r2, [sp, #28]
 80047fe:	e014      	b.n	800482a <_vfiprintf_r+0x156>
 8004800:	eba0 0308 	sub.w	r3, r0, r8
 8004804:	fa09 f303 	lsl.w	r3, r9, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	46a2      	mov	sl, r4
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	e7d2      	b.n	80047b6 <_vfiprintf_r+0xe2>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	1d19      	adds	r1, r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	9103      	str	r1, [sp, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	bfbb      	ittet	lt
 800481c:	425b      	neglt	r3, r3
 800481e:	f042 0202 	orrlt.w	r2, r2, #2
 8004822:	9307      	strge	r3, [sp, #28]
 8004824:	9307      	strlt	r3, [sp, #28]
 8004826:	bfb8      	it	lt
 8004828:	9204      	strlt	r2, [sp, #16]
 800482a:	7823      	ldrb	r3, [r4, #0]
 800482c:	2b2e      	cmp	r3, #46	; 0x2e
 800482e:	d10c      	bne.n	800484a <_vfiprintf_r+0x176>
 8004830:	7863      	ldrb	r3, [r4, #1]
 8004832:	2b2a      	cmp	r3, #42	; 0x2a
 8004834:	d135      	bne.n	80048a2 <_vfiprintf_r+0x1ce>
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	3402      	adds	r4, #2
 800483a:	1d1a      	adds	r2, r3, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	9203      	str	r2, [sp, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	bfb8      	it	lt
 8004844:	f04f 33ff 	movlt.w	r3, #4294967295
 8004848:	9305      	str	r3, [sp, #20]
 800484a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004924 <_vfiprintf_r+0x250>
 800484e:	2203      	movs	r2, #3
 8004850:	4650      	mov	r0, sl
 8004852:	7821      	ldrb	r1, [r4, #0]
 8004854:	f000 fcf8 	bl	8005248 <memchr>
 8004858:	b140      	cbz	r0, 800486c <_vfiprintf_r+0x198>
 800485a:	2340      	movs	r3, #64	; 0x40
 800485c:	eba0 000a 	sub.w	r0, r0, sl
 8004860:	fa03 f000 	lsl.w	r0, r3, r0
 8004864:	9b04      	ldr	r3, [sp, #16]
 8004866:	3401      	adds	r4, #1
 8004868:	4303      	orrs	r3, r0
 800486a:	9304      	str	r3, [sp, #16]
 800486c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004870:	2206      	movs	r2, #6
 8004872:	482d      	ldr	r0, [pc, #180]	; (8004928 <_vfiprintf_r+0x254>)
 8004874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004878:	f000 fce6 	bl	8005248 <memchr>
 800487c:	2800      	cmp	r0, #0
 800487e:	d03f      	beq.n	8004900 <_vfiprintf_r+0x22c>
 8004880:	4b2a      	ldr	r3, [pc, #168]	; (800492c <_vfiprintf_r+0x258>)
 8004882:	bb1b      	cbnz	r3, 80048cc <_vfiprintf_r+0x1f8>
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	3307      	adds	r3, #7
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	3308      	adds	r3, #8
 800488e:	9303      	str	r3, [sp, #12]
 8004890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004892:	443b      	add	r3, r7
 8004894:	9309      	str	r3, [sp, #36]	; 0x24
 8004896:	e767      	b.n	8004768 <_vfiprintf_r+0x94>
 8004898:	460c      	mov	r4, r1
 800489a:	2001      	movs	r0, #1
 800489c:	fb0c 3202 	mla	r2, ip, r2, r3
 80048a0:	e7a5      	b.n	80047ee <_vfiprintf_r+0x11a>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f04f 0c0a 	mov.w	ip, #10
 80048a8:	4619      	mov	r1, r3
 80048aa:	3401      	adds	r4, #1
 80048ac:	9305      	str	r3, [sp, #20]
 80048ae:	4620      	mov	r0, r4
 80048b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048b4:	3a30      	subs	r2, #48	; 0x30
 80048b6:	2a09      	cmp	r2, #9
 80048b8:	d903      	bls.n	80048c2 <_vfiprintf_r+0x1ee>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0c5      	beq.n	800484a <_vfiprintf_r+0x176>
 80048be:	9105      	str	r1, [sp, #20]
 80048c0:	e7c3      	b.n	800484a <_vfiprintf_r+0x176>
 80048c2:	4604      	mov	r4, r0
 80048c4:	2301      	movs	r3, #1
 80048c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80048ca:	e7f0      	b.n	80048ae <_vfiprintf_r+0x1da>
 80048cc:	ab03      	add	r3, sp, #12
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	462a      	mov	r2, r5
 80048d2:	4630      	mov	r0, r6
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <_vfiprintf_r+0x25c>)
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	f3af 8000 	nop.w
 80048dc:	4607      	mov	r7, r0
 80048de:	1c78      	adds	r0, r7, #1
 80048e0:	d1d6      	bne.n	8004890 <_vfiprintf_r+0x1bc>
 80048e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048e4:	07d9      	lsls	r1, r3, #31
 80048e6:	d405      	bmi.n	80048f4 <_vfiprintf_r+0x220>
 80048e8:	89ab      	ldrh	r3, [r5, #12]
 80048ea:	059a      	lsls	r2, r3, #22
 80048ec:	d402      	bmi.n	80048f4 <_vfiprintf_r+0x220>
 80048ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048f0:	f000 fc43 	bl	800517a <__retarget_lock_release_recursive>
 80048f4:	89ab      	ldrh	r3, [r5, #12]
 80048f6:	065b      	lsls	r3, r3, #25
 80048f8:	f53f af12 	bmi.w	8004720 <_vfiprintf_r+0x4c>
 80048fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048fe:	e711      	b.n	8004724 <_vfiprintf_r+0x50>
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	462a      	mov	r2, r5
 8004906:	4630      	mov	r0, r6
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <_vfiprintf_r+0x25c>)
 800490a:	a904      	add	r1, sp, #16
 800490c:	f000 f882 	bl	8004a14 <_printf_i>
 8004910:	e7e4      	b.n	80048dc <_vfiprintf_r+0x208>
 8004912:	bf00      	nop
 8004914:	0800ce58 	.word	0x0800ce58
 8004918:	0800ce78 	.word	0x0800ce78
 800491c:	0800ce38 	.word	0x0800ce38
 8004920:	0800ce02 	.word	0x0800ce02
 8004924:	0800ce08 	.word	0x0800ce08
 8004928:	0800ce0c 	.word	0x0800ce0c
 800492c:	00000000 	.word	0x00000000
 8004930:	080046af 	.word	0x080046af

08004934 <_printf_common>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	4616      	mov	r6, r2
 800493a:	4699      	mov	r9, r3
 800493c:	688a      	ldr	r2, [r1, #8]
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	4607      	mov	r7, r0
 8004942:	4293      	cmp	r3, r2
 8004944:	bfb8      	it	lt
 8004946:	4613      	movlt	r3, r2
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800494e:	460c      	mov	r4, r1
 8004950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004954:	b10a      	cbz	r2, 800495a <_printf_common+0x26>
 8004956:	3301      	adds	r3, #1
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	0699      	lsls	r1, r3, #26
 800495e:	bf42      	ittt	mi
 8004960:	6833      	ldrmi	r3, [r6, #0]
 8004962:	3302      	addmi	r3, #2
 8004964:	6033      	strmi	r3, [r6, #0]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	f015 0506 	ands.w	r5, r5, #6
 800496c:	d106      	bne.n	800497c <_printf_common+0x48>
 800496e:	f104 0a19 	add.w	sl, r4, #25
 8004972:	68e3      	ldr	r3, [r4, #12]
 8004974:	6832      	ldr	r2, [r6, #0]
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	42ab      	cmp	r3, r5
 800497a:	dc28      	bgt.n	80049ce <_printf_common+0x9a>
 800497c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004980:	1e13      	subs	r3, r2, #0
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	bf18      	it	ne
 8004986:	2301      	movne	r3, #1
 8004988:	0692      	lsls	r2, r2, #26
 800498a:	d42d      	bmi.n	80049e8 <_printf_common+0xb4>
 800498c:	4649      	mov	r1, r9
 800498e:	4638      	mov	r0, r7
 8004990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d020      	beq.n	80049dc <_printf_common+0xa8>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	68e5      	ldr	r5, [r4, #12]
 800499e:	f003 0306 	and.w	r3, r3, #6
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	bf18      	it	ne
 80049a6:	2500      	movne	r5, #0
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	f04f 0600 	mov.w	r6, #0
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	bf08      	it	eq
 80049b2:	1aad      	subeq	r5, r5, r2
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	bf08      	it	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	4293      	cmp	r3, r2
 80049be:	bfc4      	itt	gt
 80049c0:	1a9b      	subgt	r3, r3, r2
 80049c2:	18ed      	addgt	r5, r5, r3
 80049c4:	341a      	adds	r4, #26
 80049c6:	42b5      	cmp	r5, r6
 80049c8:	d11a      	bne.n	8004a00 <_printf_common+0xcc>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e008      	b.n	80049e0 <_printf_common+0xac>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	4649      	mov	r1, r9
 80049d4:	4638      	mov	r0, r7
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d103      	bne.n	80049e4 <_printf_common+0xb0>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	3501      	adds	r5, #1
 80049e6:	e7c4      	b.n	8004972 <_printf_common+0x3e>
 80049e8:	2030      	movs	r0, #48	; 0x30
 80049ea:	18e1      	adds	r1, r4, r3
 80049ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049f6:	4422      	add	r2, r4
 80049f8:	3302      	adds	r3, #2
 80049fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049fe:	e7c5      	b.n	800498c <_printf_common+0x58>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4622      	mov	r2, r4
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa8>
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7d9      	b.n	80049c6 <_printf_common+0x92>
	...

08004a14 <_printf_i>:
 8004a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	7e0f      	ldrb	r7, [r1, #24]
 8004a1a:	4691      	mov	r9, r2
 8004a1c:	2f78      	cmp	r7, #120	; 0x78
 8004a1e:	4680      	mov	r8, r0
 8004a20:	460c      	mov	r4, r1
 8004a22:	469a      	mov	sl, r3
 8004a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a2a:	d807      	bhi.n	8004a3c <_printf_i+0x28>
 8004a2c:	2f62      	cmp	r7, #98	; 0x62
 8004a2e:	d80a      	bhi.n	8004a46 <_printf_i+0x32>
 8004a30:	2f00      	cmp	r7, #0
 8004a32:	f000 80d9 	beq.w	8004be8 <_printf_i+0x1d4>
 8004a36:	2f58      	cmp	r7, #88	; 0x58
 8004a38:	f000 80a4 	beq.w	8004b84 <_printf_i+0x170>
 8004a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a44:	e03a      	b.n	8004abc <_printf_i+0xa8>
 8004a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4a:	2b15      	cmp	r3, #21
 8004a4c:	d8f6      	bhi.n	8004a3c <_printf_i+0x28>
 8004a4e:	a101      	add	r1, pc, #4	; (adr r1, 8004a54 <_printf_i+0x40>)
 8004a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004a3d 	.word	0x08004a3d
 8004a60:	08004a3d 	.word	0x08004a3d
 8004a64:	08004a3d 	.word	0x08004a3d
 8004a68:	08004a3d 	.word	0x08004a3d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a3d 	.word	0x08004a3d
 8004a74:	08004a3d 	.word	0x08004a3d
 8004a78:	08004a3d 	.word	0x08004a3d
 8004a7c:	08004a3d 	.word	0x08004a3d
 8004a80:	08004bcf 	.word	0x08004bcf
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004bb1 	.word	0x08004bb1
 8004a8c:	08004a3d 	.word	0x08004a3d
 8004a90:	08004a3d 	.word	0x08004a3d
 8004a94:	08004bf1 	.word	0x08004bf1
 8004a98:	08004a3d 	.word	0x08004a3d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a3d 	.word	0x08004a3d
 8004aa4:	08004a3d 	.word	0x08004a3d
 8004aa8:	08004bb9 	.word	0x08004bb9
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	602a      	str	r2, [r5, #0]
 8004ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0a4      	b.n	8004c0a <_printf_i+0x1f6>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	6829      	ldr	r1, [r5, #0]
 8004ac4:	0606      	lsls	r6, r0, #24
 8004ac6:	f101 0304 	add.w	r3, r1, #4
 8004aca:	d50a      	bpl.n	8004ae2 <_printf_i+0xce>
 8004acc:	680e      	ldr	r6, [r1, #0]
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	2e00      	cmp	r6, #0
 8004ad2:	da03      	bge.n	8004adc <_printf_i+0xc8>
 8004ad4:	232d      	movs	r3, #45	; 0x2d
 8004ad6:	4276      	negs	r6, r6
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	230a      	movs	r3, #10
 8004ade:	485e      	ldr	r0, [pc, #376]	; (8004c58 <_printf_i+0x244>)
 8004ae0:	e019      	b.n	8004b16 <_printf_i+0x102>
 8004ae2:	680e      	ldr	r6, [r1, #0]
 8004ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	bf18      	it	ne
 8004aec:	b236      	sxthne	r6, r6
 8004aee:	e7ef      	b.n	8004ad0 <_printf_i+0xbc>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	1d19      	adds	r1, r3, #4
 8004af6:	6029      	str	r1, [r5, #0]
 8004af8:	0601      	lsls	r1, r0, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xec>
 8004afc:	681e      	ldr	r6, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0xf2>
 8004b00:	0646      	lsls	r6, r0, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xe8>
 8004b04:	881e      	ldrh	r6, [r3, #0]
 8004b06:	2f6f      	cmp	r7, #111	; 0x6f
 8004b08:	bf0c      	ite	eq
 8004b0a:	2308      	moveq	r3, #8
 8004b0c:	230a      	movne	r3, #10
 8004b0e:	4852      	ldr	r0, [pc, #328]	; (8004c58 <_printf_i+0x244>)
 8004b10:	2100      	movs	r1, #0
 8004b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b16:	6865      	ldr	r5, [r4, #4]
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	bfa8      	it	ge
 8004b1c:	6821      	ldrge	r1, [r4, #0]
 8004b1e:	60a5      	str	r5, [r4, #8]
 8004b20:	bfa4      	itt	ge
 8004b22:	f021 0104 	bicge.w	r1, r1, #4
 8004b26:	6021      	strge	r1, [r4, #0]
 8004b28:	b90e      	cbnz	r6, 8004b2e <_printf_i+0x11a>
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	d04d      	beq.n	8004bca <_printf_i+0x1b6>
 8004b2e:	4615      	mov	r5, r2
 8004b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b34:	fb03 6711 	mls	r7, r3, r1, r6
 8004b38:	5dc7      	ldrb	r7, [r0, r7]
 8004b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b3e:	4637      	mov	r7, r6
 8004b40:	42bb      	cmp	r3, r7
 8004b42:	460e      	mov	r6, r1
 8004b44:	d9f4      	bls.n	8004b30 <_printf_i+0x11c>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d10b      	bne.n	8004b62 <_printf_i+0x14e>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	07de      	lsls	r6, r3, #31
 8004b4e:	d508      	bpl.n	8004b62 <_printf_i+0x14e>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	6861      	ldr	r1, [r4, #4]
 8004b54:	4299      	cmp	r1, r3
 8004b56:	bfde      	ittt	le
 8004b58:	2330      	movle	r3, #48	; 0x30
 8004b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	6122      	str	r2, [r4, #16]
 8004b66:	464b      	mov	r3, r9
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f8cd a000 	str.w	sl, [sp]
 8004b70:	aa03      	add	r2, sp, #12
 8004b72:	f7ff fedf 	bl	8004934 <_printf_common>
 8004b76:	3001      	adds	r0, #1
 8004b78:	d14c      	bne.n	8004c14 <_printf_i+0x200>
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	b004      	add	sp, #16
 8004b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b84:	4834      	ldr	r0, [pc, #208]	; (8004c58 <_printf_i+0x244>)
 8004b86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b8a:	6829      	ldr	r1, [r5, #0]
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b92:	6029      	str	r1, [r5, #0]
 8004b94:	061d      	lsls	r5, r3, #24
 8004b96:	d514      	bpl.n	8004bc2 <_printf_i+0x1ae>
 8004b98:	07df      	lsls	r7, r3, #31
 8004b9a:	bf44      	itt	mi
 8004b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba0:	6023      	strmi	r3, [r4, #0]
 8004ba2:	b91e      	cbnz	r6, 8004bac <_printf_i+0x198>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	f023 0320 	bic.w	r3, r3, #32
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	2310      	movs	r3, #16
 8004bae:	e7af      	b.n	8004b10 <_printf_i+0xfc>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	f043 0320 	orr.w	r3, r3, #32
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	2378      	movs	r3, #120	; 0x78
 8004bba:	4828      	ldr	r0, [pc, #160]	; (8004c5c <_printf_i+0x248>)
 8004bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc0:	e7e3      	b.n	8004b8a <_printf_i+0x176>
 8004bc2:	0659      	lsls	r1, r3, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2b6      	uxthmi	r6, r6
 8004bc8:	e7e6      	b.n	8004b98 <_printf_i+0x184>
 8004bca:	4615      	mov	r5, r2
 8004bcc:	e7bb      	b.n	8004b46 <_printf_i+0x132>
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	6826      	ldr	r6, [r4, #0]
 8004bd2:	1d18      	adds	r0, r3, #4
 8004bd4:	6961      	ldr	r1, [r4, #20]
 8004bd6:	6028      	str	r0, [r5, #0]
 8004bd8:	0635      	lsls	r5, r6, #24
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	d501      	bpl.n	8004be2 <_printf_i+0x1ce>
 8004bde:	6019      	str	r1, [r3, #0]
 8004be0:	e002      	b.n	8004be8 <_printf_i+0x1d4>
 8004be2:	0670      	lsls	r0, r6, #25
 8004be4:	d5fb      	bpl.n	8004bde <_printf_i+0x1ca>
 8004be6:	8019      	strh	r1, [r3, #0]
 8004be8:	2300      	movs	r3, #0
 8004bea:	4615      	mov	r5, r2
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	e7ba      	b.n	8004b66 <_printf_i+0x152>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	6862      	ldr	r2, [r4, #4]
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 fb23 	bl	8005248 <memchr>
 8004c02:	b108      	cbz	r0, 8004c08 <_printf_i+0x1f4>
 8004c04:	1b40      	subs	r0, r0, r5
 8004c06:	6060      	str	r0, [r4, #4]
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c12:	e7a8      	b.n	8004b66 <_printf_i+0x152>
 8004c14:	462a      	mov	r2, r5
 8004c16:	4649      	mov	r1, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	47d0      	blx	sl
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d0ab      	beq.n	8004b7a <_printf_i+0x166>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	079b      	lsls	r3, r3, #30
 8004c26:	d413      	bmi.n	8004c50 <_printf_i+0x23c>
 8004c28:	68e0      	ldr	r0, [r4, #12]
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	4298      	cmp	r0, r3
 8004c2e:	bfb8      	it	lt
 8004c30:	4618      	movlt	r0, r3
 8004c32:	e7a4      	b.n	8004b7e <_printf_i+0x16a>
 8004c34:	2301      	movs	r3, #1
 8004c36:	4632      	mov	r2, r6
 8004c38:	4649      	mov	r1, r9
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	47d0      	blx	sl
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d09b      	beq.n	8004b7a <_printf_i+0x166>
 8004c42:	3501      	adds	r5, #1
 8004c44:	68e3      	ldr	r3, [r4, #12]
 8004c46:	9903      	ldr	r1, [sp, #12]
 8004c48:	1a5b      	subs	r3, r3, r1
 8004c4a:	42ab      	cmp	r3, r5
 8004c4c:	dcf2      	bgt.n	8004c34 <_printf_i+0x220>
 8004c4e:	e7eb      	b.n	8004c28 <_printf_i+0x214>
 8004c50:	2500      	movs	r5, #0
 8004c52:	f104 0619 	add.w	r6, r4, #25
 8004c56:	e7f5      	b.n	8004c44 <_printf_i+0x230>
 8004c58:	0800ce13 	.word	0x0800ce13
 8004c5c:	0800ce24 	.word	0x0800ce24

08004c60 <_sbrk_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	2300      	movs	r3, #0
 8004c64:	4d05      	ldr	r5, [pc, #20]	; (8004c7c <_sbrk_r+0x1c>)
 8004c66:	4604      	mov	r4, r0
 8004c68:	4608      	mov	r0, r1
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	f7fc fa22 	bl	80010b4 <_sbrk>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_sbrk_r+0x1a>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_sbrk_r+0x1a>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20002744 	.word	0x20002744

08004c80 <__swbuf_r>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	460e      	mov	r6, r1
 8004c84:	4614      	mov	r4, r2
 8004c86:	4605      	mov	r5, r0
 8004c88:	b118      	cbz	r0, 8004c92 <__swbuf_r+0x12>
 8004c8a:	6983      	ldr	r3, [r0, #24]
 8004c8c:	b90b      	cbnz	r3, 8004c92 <__swbuf_r+0x12>
 8004c8e:	f000 f9d5 	bl	800503c <__sinit>
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <__swbuf_r+0x98>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d12b      	bne.n	8004cf0 <__swbuf_r+0x70>
 8004c98:	686c      	ldr	r4, [r5, #4]
 8004c9a:	69a3      	ldr	r3, [r4, #24]
 8004c9c:	60a3      	str	r3, [r4, #8]
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	071a      	lsls	r2, r3, #28
 8004ca2:	d52f      	bpl.n	8004d04 <__swbuf_r+0x84>
 8004ca4:	6923      	ldr	r3, [r4, #16]
 8004ca6:	b36b      	cbz	r3, 8004d04 <__swbuf_r+0x84>
 8004ca8:	6923      	ldr	r3, [r4, #16]
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	b2f6      	uxtb	r6, r6
 8004cae:	1ac0      	subs	r0, r0, r3
 8004cb0:	6963      	ldr	r3, [r4, #20]
 8004cb2:	4637      	mov	r7, r6
 8004cb4:	4283      	cmp	r3, r0
 8004cb6:	dc04      	bgt.n	8004cc2 <__swbuf_r+0x42>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 f92a 	bl	8004f14 <_fflush_r>
 8004cc0:	bb30      	cbnz	r0, 8004d10 <__swbuf_r+0x90>
 8004cc2:	68a3      	ldr	r3, [r4, #8]
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60a3      	str	r3, [r4, #8]
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	6022      	str	r2, [r4, #0]
 8004cd0:	701e      	strb	r6, [r3, #0]
 8004cd2:	6963      	ldr	r3, [r4, #20]
 8004cd4:	4283      	cmp	r3, r0
 8004cd6:	d004      	beq.n	8004ce2 <__swbuf_r+0x62>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	07db      	lsls	r3, r3, #31
 8004cdc:	d506      	bpl.n	8004cec <__swbuf_r+0x6c>
 8004cde:	2e0a      	cmp	r6, #10
 8004ce0:	d104      	bne.n	8004cec <__swbuf_r+0x6c>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 f915 	bl	8004f14 <_fflush_r>
 8004cea:	b988      	cbnz	r0, 8004d10 <__swbuf_r+0x90>
 8004cec:	4638      	mov	r0, r7
 8004cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <__swbuf_r+0x9c>)
 8004cf2:	429c      	cmp	r4, r3
 8004cf4:	d101      	bne.n	8004cfa <__swbuf_r+0x7a>
 8004cf6:	68ac      	ldr	r4, [r5, #8]
 8004cf8:	e7cf      	b.n	8004c9a <__swbuf_r+0x1a>
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <__swbuf_r+0xa0>)
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	bf08      	it	eq
 8004d00:	68ec      	ldreq	r4, [r5, #12]
 8004d02:	e7ca      	b.n	8004c9a <__swbuf_r+0x1a>
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 f80c 	bl	8004d24 <__swsetup_r>
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d0cb      	beq.n	8004ca8 <__swbuf_r+0x28>
 8004d10:	f04f 37ff 	mov.w	r7, #4294967295
 8004d14:	e7ea      	b.n	8004cec <__swbuf_r+0x6c>
 8004d16:	bf00      	nop
 8004d18:	0800ce58 	.word	0x0800ce58
 8004d1c:	0800ce78 	.word	0x0800ce78
 8004d20:	0800ce38 	.word	0x0800ce38

08004d24 <__swsetup_r>:
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <__swsetup_r+0xcc>)
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	681d      	ldr	r5, [r3, #0]
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	b125      	cbz	r5, 8004d3a <__swsetup_r+0x16>
 8004d30:	69ab      	ldr	r3, [r5, #24]
 8004d32:	b913      	cbnz	r3, 8004d3a <__swsetup_r+0x16>
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 f981 	bl	800503c <__sinit>
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <__swsetup_r+0xd0>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d10f      	bne.n	8004d60 <__swsetup_r+0x3c>
 8004d40:	686c      	ldr	r4, [r5, #4]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d48:	0719      	lsls	r1, r3, #28
 8004d4a:	d42c      	bmi.n	8004da6 <__swsetup_r+0x82>
 8004d4c:	06dd      	lsls	r5, r3, #27
 8004d4e:	d411      	bmi.n	8004d74 <__swsetup_r+0x50>
 8004d50:	2309      	movs	r3, #9
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	e03e      	b.n	8004dde <__swsetup_r+0xba>
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <__swsetup_r+0xd4>)
 8004d62:	429c      	cmp	r4, r3
 8004d64:	d101      	bne.n	8004d6a <__swsetup_r+0x46>
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	e7eb      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <__swsetup_r+0xd8>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	bf08      	it	eq
 8004d70:	68ec      	ldreq	r4, [r5, #12]
 8004d72:	e7e6      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d74:	0758      	lsls	r0, r3, #29
 8004d76:	d512      	bpl.n	8004d9e <__swsetup_r+0x7a>
 8004d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d7a:	b141      	cbz	r1, 8004d8e <__swsetup_r+0x6a>
 8004d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d002      	beq.n	8004d8a <__swsetup_r+0x66>
 8004d84:	4630      	mov	r0, r6
 8004d86:	f7ff fa45 	bl	8004214 <_free_r>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	b94b      	cbnz	r3, 8004dbe <__swsetup_r+0x9a>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d003      	beq.n	8004dbe <__swsetup_r+0x9a>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 fa05 	bl	80051c8 <__smakebuf_r>
 8004dbe:	89a0      	ldrh	r0, [r4, #12]
 8004dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dc4:	f010 0301 	ands.w	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <__swsetup_r+0xbc>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60a3      	str	r3, [r4, #8]
 8004dce:	6963      	ldr	r3, [r4, #20]
 8004dd0:	425b      	negs	r3, r3
 8004dd2:	61a3      	str	r3, [r4, #24]
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	b943      	cbnz	r3, 8004dea <__swsetup_r+0xc6>
 8004dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ddc:	d1ba      	bne.n	8004d54 <__swsetup_r+0x30>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	0781      	lsls	r1, r0, #30
 8004de2:	bf58      	it	pl
 8004de4:	6963      	ldrpl	r3, [r4, #20]
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	e7f4      	b.n	8004dd4 <__swsetup_r+0xb0>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7f7      	b.n	8004dde <__swsetup_r+0xba>
 8004dee:	bf00      	nop
 8004df0:	2000001c 	.word	0x2000001c
 8004df4:	0800ce58 	.word	0x0800ce58
 8004df8:	0800ce78 	.word	0x0800ce78
 8004dfc:	0800ce38 	.word	0x0800ce38

08004e00 <abort>:
 8004e00:	2006      	movs	r0, #6
 8004e02:	b508      	push	{r3, lr}
 8004e04:	f000 faac 	bl	8005360 <raise>
 8004e08:	2001      	movs	r0, #1
 8004e0a:	f7fc f8e0 	bl	8000fce <_exit>
	...

08004e10 <__sflush_r>:
 8004e10:	898a      	ldrh	r2, [r1, #12]
 8004e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e14:	4605      	mov	r5, r0
 8004e16:	0710      	lsls	r0, r2, #28
 8004e18:	460c      	mov	r4, r1
 8004e1a:	d457      	bmi.n	8004ecc <__sflush_r+0xbc>
 8004e1c:	684b      	ldr	r3, [r1, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	dc04      	bgt.n	8004e2c <__sflush_r+0x1c>
 8004e22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	dc01      	bgt.n	8004e2c <__sflush_r+0x1c>
 8004e28:	2000      	movs	r0, #0
 8004e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	d0fa      	beq.n	8004e28 <__sflush_r+0x18>
 8004e32:	2300      	movs	r3, #0
 8004e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e38:	682f      	ldr	r7, [r5, #0]
 8004e3a:	602b      	str	r3, [r5, #0]
 8004e3c:	d032      	beq.n	8004ea4 <__sflush_r+0x94>
 8004e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	075a      	lsls	r2, r3, #29
 8004e44:	d505      	bpl.n	8004e52 <__sflush_r+0x42>
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	1ac0      	subs	r0, r0, r3
 8004e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e4c:	b10b      	cbz	r3, 8004e52 <__sflush_r+0x42>
 8004e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e50:	1ac0      	subs	r0, r0, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	4602      	mov	r2, r0
 8004e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e58:	4628      	mov	r0, r5
 8004e5a:	6a21      	ldr	r1, [r4, #32]
 8004e5c:	47b0      	blx	r6
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	d106      	bne.n	8004e72 <__sflush_r+0x62>
 8004e64:	6829      	ldr	r1, [r5, #0]
 8004e66:	291d      	cmp	r1, #29
 8004e68:	d82c      	bhi.n	8004ec4 <__sflush_r+0xb4>
 8004e6a:	4a29      	ldr	r2, [pc, #164]	; (8004f10 <__sflush_r+0x100>)
 8004e6c:	40ca      	lsrs	r2, r1
 8004e6e:	07d6      	lsls	r6, r2, #31
 8004e70:	d528      	bpl.n	8004ec4 <__sflush_r+0xb4>
 8004e72:	2200      	movs	r2, #0
 8004e74:	6062      	str	r2, [r4, #4]
 8004e76:	6922      	ldr	r2, [r4, #16]
 8004e78:	04d9      	lsls	r1, r3, #19
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	d504      	bpl.n	8004e88 <__sflush_r+0x78>
 8004e7e:	1c42      	adds	r2, r0, #1
 8004e80:	d101      	bne.n	8004e86 <__sflush_r+0x76>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	b903      	cbnz	r3, 8004e88 <__sflush_r+0x78>
 8004e86:	6560      	str	r0, [r4, #84]	; 0x54
 8004e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8a:	602f      	str	r7, [r5, #0]
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d0cb      	beq.n	8004e28 <__sflush_r+0x18>
 8004e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e94:	4299      	cmp	r1, r3
 8004e96:	d002      	beq.n	8004e9e <__sflush_r+0x8e>
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7ff f9bb 	bl	8004214 <_free_r>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ea2:	e7c2      	b.n	8004e2a <__sflush_r+0x1a>
 8004ea4:	6a21      	ldr	r1, [r4, #32]
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b0      	blx	r6
 8004eac:	1c41      	adds	r1, r0, #1
 8004eae:	d1c7      	bne.n	8004e40 <__sflush_r+0x30>
 8004eb0:	682b      	ldr	r3, [r5, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c4      	beq.n	8004e40 <__sflush_r+0x30>
 8004eb6:	2b1d      	cmp	r3, #29
 8004eb8:	d001      	beq.n	8004ebe <__sflush_r+0xae>
 8004eba:	2b16      	cmp	r3, #22
 8004ebc:	d101      	bne.n	8004ec2 <__sflush_r+0xb2>
 8004ebe:	602f      	str	r7, [r5, #0]
 8004ec0:	e7b2      	b.n	8004e28 <__sflush_r+0x18>
 8004ec2:	89a3      	ldrh	r3, [r4, #12]
 8004ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec8:	81a3      	strh	r3, [r4, #12]
 8004eca:	e7ae      	b.n	8004e2a <__sflush_r+0x1a>
 8004ecc:	690f      	ldr	r7, [r1, #16]
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	d0aa      	beq.n	8004e28 <__sflush_r+0x18>
 8004ed2:	0793      	lsls	r3, r2, #30
 8004ed4:	bf18      	it	ne
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	680e      	ldr	r6, [r1, #0]
 8004eda:	bf08      	it	eq
 8004edc:	694b      	ldreq	r3, [r1, #20]
 8004ede:	1bf6      	subs	r6, r6, r7
 8004ee0:	600f      	str	r7, [r1, #0]
 8004ee2:	608b      	str	r3, [r1, #8]
 8004ee4:	2e00      	cmp	r6, #0
 8004ee6:	dd9f      	ble.n	8004e28 <__sflush_r+0x18>
 8004ee8:	4633      	mov	r3, r6
 8004eea:	463a      	mov	r2, r7
 8004eec:	4628      	mov	r0, r5
 8004eee:	6a21      	ldr	r1, [r4, #32]
 8004ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004ef4:	47e0      	blx	ip
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	dc06      	bgt.n	8004f08 <__sflush_r+0xf8>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	e790      	b.n	8004e2a <__sflush_r+0x1a>
 8004f08:	4407      	add	r7, r0
 8004f0a:	1a36      	subs	r6, r6, r0
 8004f0c:	e7ea      	b.n	8004ee4 <__sflush_r+0xd4>
 8004f0e:	bf00      	nop
 8004f10:	20400001 	.word	0x20400001

08004f14 <_fflush_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	690b      	ldr	r3, [r1, #16]
 8004f18:	4605      	mov	r5, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	b913      	cbnz	r3, 8004f24 <_fflush_r+0x10>
 8004f1e:	2500      	movs	r5, #0
 8004f20:	4628      	mov	r0, r5
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	b118      	cbz	r0, 8004f2e <_fflush_r+0x1a>
 8004f26:	6983      	ldr	r3, [r0, #24]
 8004f28:	b90b      	cbnz	r3, 8004f2e <_fflush_r+0x1a>
 8004f2a:	f000 f887 	bl	800503c <__sinit>
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <_fflush_r+0x6c>)
 8004f30:	429c      	cmp	r4, r3
 8004f32:	d11b      	bne.n	8004f6c <_fflush_r+0x58>
 8004f34:	686c      	ldr	r4, [r5, #4]
 8004f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ef      	beq.n	8004f1e <_fflush_r+0xa>
 8004f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f40:	07d0      	lsls	r0, r2, #31
 8004f42:	d404      	bmi.n	8004f4e <_fflush_r+0x3a>
 8004f44:	0599      	lsls	r1, r3, #22
 8004f46:	d402      	bmi.n	8004f4e <_fflush_r+0x3a>
 8004f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4a:	f000 f915 	bl	8005178 <__retarget_lock_acquire_recursive>
 8004f4e:	4628      	mov	r0, r5
 8004f50:	4621      	mov	r1, r4
 8004f52:	f7ff ff5d 	bl	8004e10 <__sflush_r>
 8004f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f58:	4605      	mov	r5, r0
 8004f5a:	07da      	lsls	r2, r3, #31
 8004f5c:	d4e0      	bmi.n	8004f20 <_fflush_r+0xc>
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	059b      	lsls	r3, r3, #22
 8004f62:	d4dd      	bmi.n	8004f20 <_fflush_r+0xc>
 8004f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f66:	f000 f908 	bl	800517a <__retarget_lock_release_recursive>
 8004f6a:	e7d9      	b.n	8004f20 <_fflush_r+0xc>
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <_fflush_r+0x70>)
 8004f6e:	429c      	cmp	r4, r3
 8004f70:	d101      	bne.n	8004f76 <_fflush_r+0x62>
 8004f72:	68ac      	ldr	r4, [r5, #8]
 8004f74:	e7df      	b.n	8004f36 <_fflush_r+0x22>
 8004f76:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <_fflush_r+0x74>)
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	bf08      	it	eq
 8004f7c:	68ec      	ldreq	r4, [r5, #12]
 8004f7e:	e7da      	b.n	8004f36 <_fflush_r+0x22>
 8004f80:	0800ce58 	.word	0x0800ce58
 8004f84:	0800ce78 	.word	0x0800ce78
 8004f88:	0800ce38 	.word	0x0800ce38

08004f8c <std>:
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	4604      	mov	r4, r0
 8004f92:	e9c0 3300 	strd	r3, r3, [r0]
 8004f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f9a:	6083      	str	r3, [r0, #8]
 8004f9c:	8181      	strh	r1, [r0, #12]
 8004f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8004fa0:	81c2      	strh	r2, [r0, #14]
 8004fa2:	6183      	str	r3, [r0, #24]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	305c      	adds	r0, #92	; 0x5c
 8004faa:	f7ff f895 	bl	80040d8 <memset>
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <std+0x38>)
 8004fb0:	6224      	str	r4, [r4, #32]
 8004fb2:	6263      	str	r3, [r4, #36]	; 0x24
 8004fb4:	4b04      	ldr	r3, [pc, #16]	; (8004fc8 <std+0x3c>)
 8004fb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <std+0x40>)
 8004fba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fbc:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <std+0x44>)
 8004fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8004fc0:	bd10      	pop	{r4, pc}
 8004fc2:	bf00      	nop
 8004fc4:	08005399 	.word	0x08005399
 8004fc8:	080053bb 	.word	0x080053bb
 8004fcc:	080053f3 	.word	0x080053f3
 8004fd0:	08005417 	.word	0x08005417

08004fd4 <_cleanup_r>:
 8004fd4:	4901      	ldr	r1, [pc, #4]	; (8004fdc <_cleanup_r+0x8>)
 8004fd6:	f000 b8af 	b.w	8005138 <_fwalk_reent>
 8004fda:	bf00      	nop
 8004fdc:	08004f15 	.word	0x08004f15

08004fe0 <__sfmoreglue>:
 8004fe0:	2268      	movs	r2, #104	; 0x68
 8004fe2:	b570      	push	{r4, r5, r6, lr}
 8004fe4:	1e4d      	subs	r5, r1, #1
 8004fe6:	4355      	muls	r5, r2
 8004fe8:	460e      	mov	r6, r1
 8004fea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fee:	f7ff f979 	bl	80042e4 <_malloc_r>
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	b140      	cbz	r0, 8005008 <__sfmoreglue+0x28>
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	e9c0 1600 	strd	r1, r6, [r0]
 8004ffc:	300c      	adds	r0, #12
 8004ffe:	60a0      	str	r0, [r4, #8]
 8005000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005004:	f7ff f868 	bl	80040d8 <memset>
 8005008:	4620      	mov	r0, r4
 800500a:	bd70      	pop	{r4, r5, r6, pc}

0800500c <__sfp_lock_acquire>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__sfp_lock_acquire+0x8>)
 800500e:	f000 b8b3 	b.w	8005178 <__retarget_lock_acquire_recursive>
 8005012:	bf00      	nop
 8005014:	20002741 	.word	0x20002741

08005018 <__sfp_lock_release>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__sfp_lock_release+0x8>)
 800501a:	f000 b8ae 	b.w	800517a <__retarget_lock_release_recursive>
 800501e:	bf00      	nop
 8005020:	20002741 	.word	0x20002741

08005024 <__sinit_lock_acquire>:
 8005024:	4801      	ldr	r0, [pc, #4]	; (800502c <__sinit_lock_acquire+0x8>)
 8005026:	f000 b8a7 	b.w	8005178 <__retarget_lock_acquire_recursive>
 800502a:	bf00      	nop
 800502c:	20002742 	.word	0x20002742

08005030 <__sinit_lock_release>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__sinit_lock_release+0x8>)
 8005032:	f000 b8a2 	b.w	800517a <__retarget_lock_release_recursive>
 8005036:	bf00      	nop
 8005038:	20002742 	.word	0x20002742

0800503c <__sinit>:
 800503c:	b510      	push	{r4, lr}
 800503e:	4604      	mov	r4, r0
 8005040:	f7ff fff0 	bl	8005024 <__sinit_lock_acquire>
 8005044:	69a3      	ldr	r3, [r4, #24]
 8005046:	b11b      	cbz	r3, 8005050 <__sinit+0x14>
 8005048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504c:	f7ff bff0 	b.w	8005030 <__sinit_lock_release>
 8005050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005054:	6523      	str	r3, [r4, #80]	; 0x50
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <__sinit+0x68>)
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <__sinit+0x6c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	62a2      	str	r2, [r4, #40]	; 0x28
 800505e:	42a3      	cmp	r3, r4
 8005060:	bf08      	it	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	4620      	mov	r0, r4
 8005066:	bf08      	it	eq
 8005068:	61a3      	streq	r3, [r4, #24]
 800506a:	f000 f81f 	bl	80050ac <__sfp>
 800506e:	6060      	str	r0, [r4, #4]
 8005070:	4620      	mov	r0, r4
 8005072:	f000 f81b 	bl	80050ac <__sfp>
 8005076:	60a0      	str	r0, [r4, #8]
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f817 	bl	80050ac <__sfp>
 800507e:	2200      	movs	r2, #0
 8005080:	2104      	movs	r1, #4
 8005082:	60e0      	str	r0, [r4, #12]
 8005084:	6860      	ldr	r0, [r4, #4]
 8005086:	f7ff ff81 	bl	8004f8c <std>
 800508a:	2201      	movs	r2, #1
 800508c:	2109      	movs	r1, #9
 800508e:	68a0      	ldr	r0, [r4, #8]
 8005090:	f7ff ff7c 	bl	8004f8c <std>
 8005094:	2202      	movs	r2, #2
 8005096:	2112      	movs	r1, #18
 8005098:	68e0      	ldr	r0, [r4, #12]
 800509a:	f7ff ff77 	bl	8004f8c <std>
 800509e:	2301      	movs	r3, #1
 80050a0:	61a3      	str	r3, [r4, #24]
 80050a2:	e7d1      	b.n	8005048 <__sinit+0xc>
 80050a4:	0800cd50 	.word	0x0800cd50
 80050a8:	08004fd5 	.word	0x08004fd5

080050ac <__sfp>:
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ae:	4607      	mov	r7, r0
 80050b0:	f7ff ffac 	bl	800500c <__sfp_lock_acquire>
 80050b4:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <__sfp+0x84>)
 80050b6:	681e      	ldr	r6, [r3, #0]
 80050b8:	69b3      	ldr	r3, [r6, #24]
 80050ba:	b913      	cbnz	r3, 80050c2 <__sfp+0x16>
 80050bc:	4630      	mov	r0, r6
 80050be:	f7ff ffbd 	bl	800503c <__sinit>
 80050c2:	3648      	adds	r6, #72	; 0x48
 80050c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050c8:	3b01      	subs	r3, #1
 80050ca:	d503      	bpl.n	80050d4 <__sfp+0x28>
 80050cc:	6833      	ldr	r3, [r6, #0]
 80050ce:	b30b      	cbz	r3, 8005114 <__sfp+0x68>
 80050d0:	6836      	ldr	r6, [r6, #0]
 80050d2:	e7f7      	b.n	80050c4 <__sfp+0x18>
 80050d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050d8:	b9d5      	cbnz	r5, 8005110 <__sfp+0x64>
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <__sfp+0x88>)
 80050dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050e0:	60e3      	str	r3, [r4, #12]
 80050e2:	6665      	str	r5, [r4, #100]	; 0x64
 80050e4:	f000 f847 	bl	8005176 <__retarget_lock_init_recursive>
 80050e8:	f7ff ff96 	bl	8005018 <__sfp_lock_release>
 80050ec:	2208      	movs	r2, #8
 80050ee:	4629      	mov	r1, r5
 80050f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050f8:	6025      	str	r5, [r4, #0]
 80050fa:	61a5      	str	r5, [r4, #24]
 80050fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005100:	f7fe ffea 	bl	80040d8 <memset>
 8005104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800510c:	4620      	mov	r0, r4
 800510e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005110:	3468      	adds	r4, #104	; 0x68
 8005112:	e7d9      	b.n	80050c8 <__sfp+0x1c>
 8005114:	2104      	movs	r1, #4
 8005116:	4638      	mov	r0, r7
 8005118:	f7ff ff62 	bl	8004fe0 <__sfmoreglue>
 800511c:	4604      	mov	r4, r0
 800511e:	6030      	str	r0, [r6, #0]
 8005120:	2800      	cmp	r0, #0
 8005122:	d1d5      	bne.n	80050d0 <__sfp+0x24>
 8005124:	f7ff ff78 	bl	8005018 <__sfp_lock_release>
 8005128:	230c      	movs	r3, #12
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	e7ee      	b.n	800510c <__sfp+0x60>
 800512e:	bf00      	nop
 8005130:	0800cd50 	.word	0x0800cd50
 8005134:	ffff0001 	.word	0xffff0001

08005138 <_fwalk_reent>:
 8005138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800513c:	4606      	mov	r6, r0
 800513e:	4688      	mov	r8, r1
 8005140:	2700      	movs	r7, #0
 8005142:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005146:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800514a:	f1b9 0901 	subs.w	r9, r9, #1
 800514e:	d505      	bpl.n	800515c <_fwalk_reent+0x24>
 8005150:	6824      	ldr	r4, [r4, #0]
 8005152:	2c00      	cmp	r4, #0
 8005154:	d1f7      	bne.n	8005146 <_fwalk_reent+0xe>
 8005156:	4638      	mov	r0, r7
 8005158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515c:	89ab      	ldrh	r3, [r5, #12]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d907      	bls.n	8005172 <_fwalk_reent+0x3a>
 8005162:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005166:	3301      	adds	r3, #1
 8005168:	d003      	beq.n	8005172 <_fwalk_reent+0x3a>
 800516a:	4629      	mov	r1, r5
 800516c:	4630      	mov	r0, r6
 800516e:	47c0      	blx	r8
 8005170:	4307      	orrs	r7, r0
 8005172:	3568      	adds	r5, #104	; 0x68
 8005174:	e7e9      	b.n	800514a <_fwalk_reent+0x12>

08005176 <__retarget_lock_init_recursive>:
 8005176:	4770      	bx	lr

08005178 <__retarget_lock_acquire_recursive>:
 8005178:	4770      	bx	lr

0800517a <__retarget_lock_release_recursive>:
 800517a:	4770      	bx	lr

0800517c <__swhatbuf_r>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	460e      	mov	r6, r1
 8005180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005184:	4614      	mov	r4, r2
 8005186:	2900      	cmp	r1, #0
 8005188:	461d      	mov	r5, r3
 800518a:	b096      	sub	sp, #88	; 0x58
 800518c:	da08      	bge.n	80051a0 <__swhatbuf_r+0x24>
 800518e:	2200      	movs	r2, #0
 8005190:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	061a      	lsls	r2, r3, #24
 8005198:	d410      	bmi.n	80051bc <__swhatbuf_r+0x40>
 800519a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519e:	e00e      	b.n	80051be <__swhatbuf_r+0x42>
 80051a0:	466a      	mov	r2, sp
 80051a2:	f000 f95f 	bl	8005464 <_fstat_r>
 80051a6:	2800      	cmp	r0, #0
 80051a8:	dbf1      	blt.n	800518e <__swhatbuf_r+0x12>
 80051aa:	9a01      	ldr	r2, [sp, #4]
 80051ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051b4:	425a      	negs	r2, r3
 80051b6:	415a      	adcs	r2, r3
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	e7ee      	b.n	800519a <__swhatbuf_r+0x1e>
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	2000      	movs	r0, #0
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	b016      	add	sp, #88	; 0x58
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080051c8 <__smakebuf_r>:
 80051c8:	898b      	ldrh	r3, [r1, #12]
 80051ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051cc:	079d      	lsls	r5, r3, #30
 80051ce:	4606      	mov	r6, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	d507      	bpl.n	80051e4 <__smakebuf_r+0x1c>
 80051d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	6123      	str	r3, [r4, #16]
 80051dc:	2301      	movs	r3, #1
 80051de:	6163      	str	r3, [r4, #20]
 80051e0:	b002      	add	sp, #8
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	466a      	mov	r2, sp
 80051e6:	ab01      	add	r3, sp, #4
 80051e8:	f7ff ffc8 	bl	800517c <__swhatbuf_r>
 80051ec:	9900      	ldr	r1, [sp, #0]
 80051ee:	4605      	mov	r5, r0
 80051f0:	4630      	mov	r0, r6
 80051f2:	f7ff f877 	bl	80042e4 <_malloc_r>
 80051f6:	b948      	cbnz	r0, 800520c <__smakebuf_r+0x44>
 80051f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fc:	059a      	lsls	r2, r3, #22
 80051fe:	d4ef      	bmi.n	80051e0 <__smakebuf_r+0x18>
 8005200:	f023 0303 	bic.w	r3, r3, #3
 8005204:	f043 0302 	orr.w	r3, r3, #2
 8005208:	81a3      	strh	r3, [r4, #12]
 800520a:	e7e3      	b.n	80051d4 <__smakebuf_r+0xc>
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <__smakebuf_r+0x7c>)
 800520e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	6020      	str	r0, [r4, #0]
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	9b00      	ldr	r3, [sp, #0]
 800521c:	6120      	str	r0, [r4, #16]
 800521e:	6163      	str	r3, [r4, #20]
 8005220:	9b01      	ldr	r3, [sp, #4]
 8005222:	b15b      	cbz	r3, 800523c <__smakebuf_r+0x74>
 8005224:	4630      	mov	r0, r6
 8005226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800522a:	f000 f92d 	bl	8005488 <_isatty_r>
 800522e:	b128      	cbz	r0, 800523c <__smakebuf_r+0x74>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	89a0      	ldrh	r0, [r4, #12]
 800523e:	4305      	orrs	r5, r0
 8005240:	81a5      	strh	r5, [r4, #12]
 8005242:	e7cd      	b.n	80051e0 <__smakebuf_r+0x18>
 8005244:	08004fd5 	.word	0x08004fd5

08005248 <memchr>:
 8005248:	4603      	mov	r3, r0
 800524a:	b510      	push	{r4, lr}
 800524c:	b2c9      	uxtb	r1, r1
 800524e:	4402      	add	r2, r0
 8005250:	4293      	cmp	r3, r2
 8005252:	4618      	mov	r0, r3
 8005254:	d101      	bne.n	800525a <memchr+0x12>
 8005256:	2000      	movs	r0, #0
 8005258:	e003      	b.n	8005262 <memchr+0x1a>
 800525a:	7804      	ldrb	r4, [r0, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	428c      	cmp	r4, r1
 8005260:	d1f6      	bne.n	8005250 <memchr+0x8>
 8005262:	bd10      	pop	{r4, pc}

08005264 <memmove>:
 8005264:	4288      	cmp	r0, r1
 8005266:	b510      	push	{r4, lr}
 8005268:	eb01 0402 	add.w	r4, r1, r2
 800526c:	d902      	bls.n	8005274 <memmove+0x10>
 800526e:	4284      	cmp	r4, r0
 8005270:	4623      	mov	r3, r4
 8005272:	d807      	bhi.n	8005284 <memmove+0x20>
 8005274:	1e43      	subs	r3, r0, #1
 8005276:	42a1      	cmp	r1, r4
 8005278:	d008      	beq.n	800528c <memmove+0x28>
 800527a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005282:	e7f8      	b.n	8005276 <memmove+0x12>
 8005284:	4601      	mov	r1, r0
 8005286:	4402      	add	r2, r0
 8005288:	428a      	cmp	r2, r1
 800528a:	d100      	bne.n	800528e <memmove+0x2a>
 800528c:	bd10      	pop	{r4, pc}
 800528e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005296:	e7f7      	b.n	8005288 <memmove+0x24>

08005298 <__malloc_lock>:
 8005298:	4801      	ldr	r0, [pc, #4]	; (80052a0 <__malloc_lock+0x8>)
 800529a:	f7ff bf6d 	b.w	8005178 <__retarget_lock_acquire_recursive>
 800529e:	bf00      	nop
 80052a0:	20002740 	.word	0x20002740

080052a4 <__malloc_unlock>:
 80052a4:	4801      	ldr	r0, [pc, #4]	; (80052ac <__malloc_unlock+0x8>)
 80052a6:	f7ff bf68 	b.w	800517a <__retarget_lock_release_recursive>
 80052aa:	bf00      	nop
 80052ac:	20002740 	.word	0x20002740

080052b0 <_realloc_r>:
 80052b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b4:	4680      	mov	r8, r0
 80052b6:	4614      	mov	r4, r2
 80052b8:	460e      	mov	r6, r1
 80052ba:	b921      	cbnz	r1, 80052c6 <_realloc_r+0x16>
 80052bc:	4611      	mov	r1, r2
 80052be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c2:	f7ff b80f 	b.w	80042e4 <_malloc_r>
 80052c6:	b92a      	cbnz	r2, 80052d4 <_realloc_r+0x24>
 80052c8:	f7fe ffa4 	bl	8004214 <_free_r>
 80052cc:	4625      	mov	r5, r4
 80052ce:	4628      	mov	r0, r5
 80052d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d4:	f000 f8fa 	bl	80054cc <_malloc_usable_size_r>
 80052d8:	4284      	cmp	r4, r0
 80052da:	4607      	mov	r7, r0
 80052dc:	d802      	bhi.n	80052e4 <_realloc_r+0x34>
 80052de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052e2:	d812      	bhi.n	800530a <_realloc_r+0x5a>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4640      	mov	r0, r8
 80052e8:	f7fe fffc 	bl	80042e4 <_malloc_r>
 80052ec:	4605      	mov	r5, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d0ed      	beq.n	80052ce <_realloc_r+0x1e>
 80052f2:	42bc      	cmp	r4, r7
 80052f4:	4622      	mov	r2, r4
 80052f6:	4631      	mov	r1, r6
 80052f8:	bf28      	it	cs
 80052fa:	463a      	movcs	r2, r7
 80052fc:	f7fe fede 	bl	80040bc <memcpy>
 8005300:	4631      	mov	r1, r6
 8005302:	4640      	mov	r0, r8
 8005304:	f7fe ff86 	bl	8004214 <_free_r>
 8005308:	e7e1      	b.n	80052ce <_realloc_r+0x1e>
 800530a:	4635      	mov	r5, r6
 800530c:	e7df      	b.n	80052ce <_realloc_r+0x1e>

0800530e <_raise_r>:
 800530e:	291f      	cmp	r1, #31
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4604      	mov	r4, r0
 8005314:	460d      	mov	r5, r1
 8005316:	d904      	bls.n	8005322 <_raise_r+0x14>
 8005318:	2316      	movs	r3, #22
 800531a:	6003      	str	r3, [r0, #0]
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	bd38      	pop	{r3, r4, r5, pc}
 8005322:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005324:	b112      	cbz	r2, 800532c <_raise_r+0x1e>
 8005326:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800532a:	b94b      	cbnz	r3, 8005340 <_raise_r+0x32>
 800532c:	4620      	mov	r0, r4
 800532e:	f000 f831 	bl	8005394 <_getpid_r>
 8005332:	462a      	mov	r2, r5
 8005334:	4601      	mov	r1, r0
 8005336:	4620      	mov	r0, r4
 8005338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800533c:	f000 b818 	b.w	8005370 <_kill_r>
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00a      	beq.n	800535a <_raise_r+0x4c>
 8005344:	1c59      	adds	r1, r3, #1
 8005346:	d103      	bne.n	8005350 <_raise_r+0x42>
 8005348:	2316      	movs	r3, #22
 800534a:	6003      	str	r3, [r0, #0]
 800534c:	2001      	movs	r0, #1
 800534e:	e7e7      	b.n	8005320 <_raise_r+0x12>
 8005350:	2400      	movs	r4, #0
 8005352:	4628      	mov	r0, r5
 8005354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005358:	4798      	blx	r3
 800535a:	2000      	movs	r0, #0
 800535c:	e7e0      	b.n	8005320 <_raise_r+0x12>
	...

08005360 <raise>:
 8005360:	4b02      	ldr	r3, [pc, #8]	; (800536c <raise+0xc>)
 8005362:	4601      	mov	r1, r0
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f7ff bfd2 	b.w	800530e <_raise_r>
 800536a:	bf00      	nop
 800536c:	2000001c 	.word	0x2000001c

08005370 <_kill_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	2300      	movs	r3, #0
 8005374:	4d06      	ldr	r5, [pc, #24]	; (8005390 <_kill_r+0x20>)
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	f7fb fe16 	bl	8000fae <_kill>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	d102      	bne.n	800538c <_kill_r+0x1c>
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	b103      	cbz	r3, 800538c <_kill_r+0x1c>
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	bd38      	pop	{r3, r4, r5, pc}
 800538e:	bf00      	nop
 8005390:	20002744 	.word	0x20002744

08005394 <_getpid_r>:
 8005394:	f7fb be04 	b.w	8000fa0 <_getpid>

08005398 <__sread>:
 8005398:	b510      	push	{r4, lr}
 800539a:	460c      	mov	r4, r1
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	f000 f89c 	bl	80054dc <_read_r>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	bfab      	itete	ge
 80053a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053aa:	89a3      	ldrhlt	r3, [r4, #12]
 80053ac:	181b      	addge	r3, r3, r0
 80053ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053b2:	bfac      	ite	ge
 80053b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053b6:	81a3      	strhlt	r3, [r4, #12]
 80053b8:	bd10      	pop	{r4, pc}

080053ba <__swrite>:
 80053ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053be:	461f      	mov	r7, r3
 80053c0:	898b      	ldrh	r3, [r1, #12]
 80053c2:	4605      	mov	r5, r0
 80053c4:	05db      	lsls	r3, r3, #23
 80053c6:	460c      	mov	r4, r1
 80053c8:	4616      	mov	r6, r2
 80053ca:	d505      	bpl.n	80053d8 <__swrite+0x1e>
 80053cc:	2302      	movs	r3, #2
 80053ce:	2200      	movs	r2, #0
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	f000 f868 	bl	80054a8 <_lseek_r>
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	4632      	mov	r2, r6
 80053dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	4628      	mov	r0, r5
 80053e4:	463b      	mov	r3, r7
 80053e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ee:	f000 b817 	b.w	8005420 <_write_r>

080053f2 <__sseek>:
 80053f2:	b510      	push	{r4, lr}
 80053f4:	460c      	mov	r4, r1
 80053f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fa:	f000 f855 	bl	80054a8 <_lseek_r>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	bf15      	itete	ne
 8005404:	6560      	strne	r0, [r4, #84]	; 0x54
 8005406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800540a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800540e:	81a3      	strheq	r3, [r4, #12]
 8005410:	bf18      	it	ne
 8005412:	81a3      	strhne	r3, [r4, #12]
 8005414:	bd10      	pop	{r4, pc}

08005416 <__sclose>:
 8005416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541a:	f000 b813 	b.w	8005444 <_close_r>
	...

08005420 <_write_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	2200      	movs	r2, #0
 800542a:	4d05      	ldr	r5, [pc, #20]	; (8005440 <_write_r+0x20>)
 800542c:	602a      	str	r2, [r5, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f7fb fdf4 	bl	800101c <_write>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_write_r+0x1e>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_write_r+0x1e>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	20002744 	.word	0x20002744

08005444 <_close_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	2300      	movs	r3, #0
 8005448:	4d05      	ldr	r5, [pc, #20]	; (8005460 <_close_r+0x1c>)
 800544a:	4604      	mov	r4, r0
 800544c:	4608      	mov	r0, r1
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	f7fb fe00 	bl	8001054 <_close>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_close_r+0x1a>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_close_r+0x1a>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	20002744 	.word	0x20002744

08005464 <_fstat_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	2300      	movs	r3, #0
 8005468:	4d06      	ldr	r5, [pc, #24]	; (8005484 <_fstat_r+0x20>)
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	602b      	str	r3, [r5, #0]
 8005472:	f7fb fdfa 	bl	800106a <_fstat>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d102      	bne.n	8005480 <_fstat_r+0x1c>
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	b103      	cbz	r3, 8005480 <_fstat_r+0x1c>
 800547e:	6023      	str	r3, [r4, #0]
 8005480:	bd38      	pop	{r3, r4, r5, pc}
 8005482:	bf00      	nop
 8005484:	20002744 	.word	0x20002744

08005488 <_isatty_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	2300      	movs	r3, #0
 800548c:	4d05      	ldr	r5, [pc, #20]	; (80054a4 <_isatty_r+0x1c>)
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb fdf8 	bl	8001088 <_isatty>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_isatty_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_isatty_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	20002744 	.word	0x20002744

080054a8 <_lseek_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	4608      	mov	r0, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	2200      	movs	r2, #0
 80054b2:	4d05      	ldr	r5, [pc, #20]	; (80054c8 <_lseek_r+0x20>)
 80054b4:	602a      	str	r2, [r5, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f7fb fdf0 	bl	800109c <_lseek>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_lseek_r+0x1e>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_lseek_r+0x1e>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20002744 	.word	0x20002744

080054cc <_malloc_usable_size_r>:
 80054cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d0:	1f18      	subs	r0, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bfbc      	itt	lt
 80054d6:	580b      	ldrlt	r3, [r1, r0]
 80054d8:	18c0      	addlt	r0, r0, r3
 80054da:	4770      	bx	lr

080054dc <_read_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	2200      	movs	r2, #0
 80054e6:	4d05      	ldr	r5, [pc, #20]	; (80054fc <_read_r+0x20>)
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fb fd79 	bl	8000fe2 <_read>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_read_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_read_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20002744 	.word	0x20002744

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
