
F103_VGA256.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005d28  08006064  08006064  00016064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd8c  0800bd8c  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd8c  0800bd8c  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd8c  0800bd8c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800bd94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ba0  200000c0  0800be54  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c60  0800be54  00022c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acc6  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbd  00000000  00000000  0002adaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f6  00000000  00000000  0002e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd48  00000000  00000000  00046de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a618  00000000  00000000  00053b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b44  00000000  00000000  000de198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800604c 	.word	0x0800604c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	0800604c 	.word	0x0800604c

0800014c <VGA_update>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void VGA_update(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	vga_voff[0]=VOFFSET;
 8000152:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <VGA_update+0x44>)
 8000154:	881a      	ldrh	r2, [r3, #0]
 8000156:	4b0f      	ldr	r3, [pc, #60]	; (8000194 <VGA_update+0x48>)
 8000158:	801a      	strh	r2, [r3, #0]
	for(int i=1;i<16;i++){
 800015a:	2301      	movs	r3, #1
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	e00d      	b.n	800017c <VGA_update+0x30>
		vga_voff[i]=vga_voff[i-1]+VGA_LBUFFERSIZE;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3b01      	subs	r3, #1
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <VGA_update+0x48>)
 8000166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800016a:	3380      	adds	r3, #128	; 0x80
 800016c:	b299      	uxth	r1, r3
 800016e:	4a09      	ldr	r2, [pc, #36]	; (8000194 <VGA_update+0x48>)
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=1;i<16;i++){
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3301      	adds	r3, #1
 800017a:	607b      	str	r3, [r7, #4]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b0f      	cmp	r3, #15
 8000180:	ddee      	ble.n	8000160 <VGA_update+0x14>
	}
}
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	200001f8 	.word	0x200001f8
 8000194:	20000200 	.word	0x20000200

08000198 <tetrisDelay>:

extern void tetrisDelay(int ms){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fa42 	bl	800262c <HAL_Delay>
}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}

080001b0 <tetrisSeed>:

extern uint32_t tetrisSeed(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return TIM1->CNT+TIM2->CNT+TIM4->CNT;
 80001b4:	4b06      	ldr	r3, [pc, #24]	; (80001d0 <tetrisSeed+0x20>)
 80001b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001be:	441a      	add	r2, r3
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <tetrisSeed+0x24>)
 80001c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001c4:	4413      	add	r3, r2
}
 80001c6:	4618      	mov	r0, r3
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	40012c00 	.word	0x40012c00
 80001d4:	40000800 	.word	0x40000800

080001d8 <getch>:

extern uint8_t getch(uint8_t *ch){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	for(int i=0;i<4;i++){
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]
 80001e4:	e00c      	b.n	8000200 <getch+0x28>
		//Prime row output for ready to bring col to ground
		HAL_GPIO_WritePin(keyPort,keyRowPin[i],0);
 80001e6:	4b31      	ldr	r3, [pc, #196]	; (80002ac <getch+0xd4>)
 80001e8:	6818      	ldr	r0, [r3, #0]
 80001ea:	4a31      	ldr	r2, [pc, #196]	; (80002b0 <getch+0xd8>)
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001f2:	2200      	movs	r2, #0
 80001f4:	4619      	mov	r1, r3
 80001f6:	f002 ffcc 	bl	8003192 <HAL_GPIO_WritePin>
	for(int i=0;i<4;i++){
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	3301      	adds	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	697b      	ldr	r3, [r7, #20]
 8000202:	2b03      	cmp	r3, #3
 8000204:	ddef      	ble.n	80001e6 <getch+0xe>
	}
	//Detect column pressed
	int i,j;
	for(i=0;i<3;i++){
 8000206:	2300      	movs	r3, #0
 8000208:	613b      	str	r3, [r7, #16]
 800020a:	e034      	b.n	8000276 <getch+0x9e>
		if(HAL_GPIO_ReadPin(keyPort,keyColPin[i])==0){
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <getch+0xd4>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4928      	ldr	r1, [pc, #160]	; (80002b4 <getch+0xdc>)
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000218:	4619      	mov	r1, r3
 800021a:	4610      	mov	r0, r2
 800021c:	f002 ffa2 	bl	8003164 <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d121      	bne.n	800026a <getch+0x92>
			//Testing for row
			for(j=0;j<4;j++){
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e019      	b.n	8000260 <getch+0x88>
				HAL_GPIO_WritePin(keyPort,keyRowPin[j],1);
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <getch+0xd4>)
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <getch+0xd8>)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000238:	2201      	movs	r2, #1
 800023a:	4619      	mov	r1, r3
 800023c:	f002 ffa9 	bl	8003192 <HAL_GPIO_WritePin>
				if(HAL_GPIO_ReadPin(keyPort,keyColPin[i]))
 8000240:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <getch+0xd4>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	491b      	ldr	r1, [pc, #108]	; (80002b4 <getch+0xdc>)
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800024c:	4619      	mov	r1, r3
 800024e:	4610      	mov	r0, r2
 8000250:	f002 ff88 	bl	8003164 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d106      	bne.n	8000268 <getch+0x90>
			for(j=0;j<4;j++){
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	2b03      	cmp	r3, #3
 8000264:	dde2      	ble.n	800022c <getch+0x54>
 8000266:	e000      	b.n	800026a <getch+0x92>
					break;
 8000268:	bf00      	nop
			}
	    }
		if(j<4)break;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	2b03      	cmp	r3, #3
 800026e:	dd06      	ble.n	800027e <getch+0xa6>
	for(i=0;i<3;i++){
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	3301      	adds	r3, #1
 8000274:	613b      	str	r3, [r7, #16]
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b02      	cmp	r3, #2
 800027a:	ddc7      	ble.n	800020c <getch+0x34>
 800027c:	e000      	b.n	8000280 <getch+0xa8>
		if(j<4)break;
 800027e:	bf00      	nop
	}
    if(i<3){  //a key is pressed
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	2b02      	cmp	r3, #2
 8000284:	dc0d      	bgt.n	80002a2 <getch+0xca>
    	*ch = keyMap[j][i];
 8000286:	490c      	ldr	r1, [pc, #48]	; (80002b8 <getch+0xe0>)
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	4613      	mov	r3, r2
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	4413      	add	r3, r2
 8000290:	693a      	ldr	r2, [r7, #16]
 8000292:	4413      	add	r3, r2
 8000294:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	701a      	strb	r2, [r3, #0]
    	return 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <getch+0xcc>
    }
    return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000004 	.word	0x20000004
 80002b0:	20000008 	.word	0x20000008
 80002b4:	20000010 	.word	0x20000010
 80002b8:	20000018 	.word	0x20000018

080002bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
     if(htim==&htim2){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a19      	ldr	r2, [pc, #100]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d12b      	bne.n	8000324 <HAL_TIM_PeriodElapsedCallback+0x68>
     //V-sync detected
		line=-4;
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80002ce:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80002d2:	801a      	strh	r2, [r3, #0]
		if(firstTrig){
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d023      	beq.n	8000324 <HAL_TIM_PeriodElapsedCallback+0x68>
			for(int i=0;i<preVoffset;i++);
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	e002      	b.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0x2c>
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	461a      	mov	r2, r3
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	4293      	cmp	r3, r2
 80002f2:	dbf6      	blt.n	80002e2 <HAL_TIM_PeriodElapsedCallback+0x26>
			if(
            HAL_DMA_Start_IT(&hdma_tim4_up,(uint32_t)VGA_obuffer,GPIOB_ODR,VGA_FULL)
 80002f4:	4911      	ldr	r1, [pc, #68]	; (800033c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002fe:	4811      	ldr	r0, [pc, #68]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000300:	f002 fb20 	bl	8002944 <HAL_DMA_Start_IT>
 8000304:	4603      	mov	r3, r0
			if(
 8000306:	2b00      	cmp	r3, #0
 8000308:	d009      	beq.n	800031e <HAL_TIM_PeriodElapsedCallback+0x62>
			!= HAL_OK){
				while(1){
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800030a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030e:	480e      	ldr	r0, [pc, #56]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000310:	f002 ff57 	bl	80031c2 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 8000314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000318:	f002 f988 	bl	800262c <HAL_Delay>
					HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800031c:	e7f5      	b.n	800030a <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
			}
			firstTrig=0;
 800031e:	4b05      	ldr	r3, [pc, #20]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000320:	2200      	movs	r2, #0
 8000322:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000124 	.word	0x20000124
 8000330:	200001fc 	.word	0x200001fc
 8000334:	20000002 	.word	0x20000002
 8000338:	20000000 	.word	0x20000000
 800033c:	200006fc 	.word	0x200006fc
 8000340:	20000220 	.word	0x20000220
 8000344:	200001b4 	.word	0x200001b4
 8000348:	40011000 	.word	0x40011000

0800034c <DMA_HalfCpltCallback>:

static void DMA_HalfCpltCallback(DMA_HandleTypeDef *hdma){
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
     //fill in line1
	if((line<0)||(line>=VGA_VBUFFER)){
 8000354:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <DMA_HalfCpltCallback+0xbc>)
 8000356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800035a:	2b00      	cmp	r3, #0
 800035c:	db04      	blt.n	8000368 <DMA_HalfCpltCallback+0x1c>
 800035e:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <DMA_HalfCpltCallback+0xbc>)
 8000360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000364:	2b4a      	cmp	r3, #74	; 0x4a
 8000366:	dd06      	ble.n	8000376 <DMA_HalfCpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800036c:	2100      	movs	r1, #0
 800036e:	4827      	ldr	r0, [pc, #156]	; (800040c <DMA_HalfCpltCallback+0xc0>)
 8000370:	f004 fc2a 	bl	8004bc8 <memset>
 8000374:	e01c      	b.n	80003b0 <DMA_HalfCpltCallback+0x64>
	}else{
		for(int i=0;i<8;i++){
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	e016      	b.n	80003aa <DMA_HalfCpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 800037c:	4a24      	ldr	r2, [pc, #144]	; (8000410 <DMA_HalfCpltCallback+0xc4>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000384:	461a      	mov	r2, r3
 8000386:	4b21      	ldr	r3, [pc, #132]	; (800040c <DMA_HalfCpltCallback+0xc0>)
 8000388:	18d0      	adds	r0, r2, r3
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <DMA_HalfCpltCallback+0xbc>)
 800038c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000390:	461a      	mov	r2, r3
 8000392:	2364      	movs	r3, #100	; 0x64
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <DMA_HalfCpltCallback+0xc8>)
 800039a:	4413      	add	r3, r2
 800039c:	2264      	movs	r2, #100	; 0x64
 800039e:	4619      	mov	r1, r3
 80003a0:	f004 fc04 	bl	8004bac <memcpy>
		for(int i=0;i<8;i++){
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	dde5      	ble.n	800037c <DMA_HalfCpltCallback+0x30>
		}
	}
	line++;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <DMA_HalfCpltCallback+0xbc>)
 80003b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	3301      	adds	r3, #1
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	b21a      	sxth	r2, r3
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <DMA_HalfCpltCallback+0xbc>)
 80003c0:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 80003c2:	4b15      	ldr	r3, [pc, #84]	; (8000418 <DMA_HalfCpltCallback+0xcc>)
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00a      	beq.n	80003e0 <DMA_HalfCpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003ca:	4814      	ldr	r0, [pc, #80]	; (800041c <DMA_HalfCpltCallback+0xd0>)
 80003cc:	f002 fb54 	bl	8002a78 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003d0:	4b13      	ldr	r3, [pc, #76]	; (8000420 <DMA_HalfCpltCallback+0xd4>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <DMA_HalfCpltCallback+0xcc>)
 80003d8:	2200      	movs	r2, #0
 80003da:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80003dc:	f7ff feb6 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <DMA_HalfCpltCallback+0xbc>)
 80003e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003e6:	2b4a      	cmp	r3, #74	; 0x4a
 80003e8:	dd09      	ble.n	80003fe <DMA_HalfCpltCallback+0xb2>
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <DMA_HalfCpltCallback+0xd4>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d105      	bne.n	80003fe <DMA_HalfCpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80003f2:	480a      	ldr	r0, [pc, #40]	; (800041c <DMA_HalfCpltCallback+0xd0>)
 80003f4:	f002 fb40 	bl	8002a78 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <DMA_HalfCpltCallback+0xd4>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	801a      	strh	r2, [r3, #0]
	}
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200001fc 	.word	0x200001fc
 800040c:	200006fc 	.word	0x200006fc
 8000410:	20000200 	.word	0x20000200
 8000414:	20000efc 	.word	0x20000efc
 8000418:	200001fa 	.word	0x200001fa
 800041c:	200001b4 	.word	0x200001b4
 8000420:	20000002 	.word	0x20000002

08000424 <DMA_CpltCallback>:

static void DMA_CpltCallback(DMA_HandleTypeDef *hdma){
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    //fill in line2 (later half)
	if((line<0)||(line>=VGA_VBUFFER)){
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <DMA_CpltCallback+0xbc>)
 800042e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000432:	2b00      	cmp	r3, #0
 8000434:	db04      	blt.n	8000440 <DMA_CpltCallback+0x1c>
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <DMA_CpltCallback+0xbc>)
 8000438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800043c:	2b4a      	cmp	r3, #74	; 0x4a
 800043e:	dd06      	ble.n	800044e <DMA_CpltCallback+0x2a>
		memset((uint8_t *)VGA_obuffer,0,VGA_FULL);
 8000440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000444:	2100      	movs	r1, #0
 8000446:	4827      	ldr	r0, [pc, #156]	; (80004e4 <DMA_CpltCallback+0xc0>)
 8000448:	f004 fbbe 	bl	8004bc8 <memset>
 800044c:	e01c      	b.n	8000488 <DMA_CpltCallback+0x64>
	}else{
		for(int i=8;i<16;i++){
 800044e:	2308      	movs	r3, #8
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	e016      	b.n	8000482 <DMA_CpltCallback+0x5e>
			memcpy((uint8_t *)VGA_obuffer + vga_voff[i],VGA_buffer[line],VGA_LBUFFER);
 8000454:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <DMA_CpltCallback+0xc4>)
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800045c:	461a      	mov	r2, r3
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <DMA_CpltCallback+0xc0>)
 8000460:	18d0      	adds	r0, r2, r3
 8000462:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <DMA_CpltCallback+0xbc>)
 8000464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000468:	461a      	mov	r2, r3
 800046a:	2364      	movs	r3, #100	; 0x64
 800046c:	fb02 f303 	mul.w	r3, r2, r3
 8000470:	4a1e      	ldr	r2, [pc, #120]	; (80004ec <DMA_CpltCallback+0xc8>)
 8000472:	4413      	add	r3, r2
 8000474:	2264      	movs	r2, #100	; 0x64
 8000476:	4619      	mov	r1, r3
 8000478:	f004 fb98 	bl	8004bac <memcpy>
		for(int i=8;i<16;i++){
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3301      	adds	r3, #1
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	2b0f      	cmp	r3, #15
 8000486:	dde5      	ble.n	8000454 <DMA_CpltCallback+0x30>
		}
	}
	line++;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <DMA_CpltCallback+0xbc>)
 800048a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800048e:	b29b      	uxth	r3, r3
 8000490:	3301      	adds	r3, #1
 8000492:	b29b      	uxth	r3, r3
 8000494:	b21a      	sxth	r2, r3
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <DMA_CpltCallback+0xbc>)
 8000498:	801a      	strh	r2, [r3, #0]
	if(vga_stop){
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <DMA_CpltCallback+0xcc>)
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00a      	beq.n	80004b8 <DMA_CpltCallback+0x94>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80004a2:	4814      	ldr	r0, [pc, #80]	; (80004f4 <DMA_CpltCallback+0xd0>)
 80004a4:	f002 fae8 	bl	8002a78 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <DMA_CpltCallback+0xd4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	801a      	strh	r2, [r3, #0]
		vga_stop=0;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <DMA_CpltCallback+0xcc>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	801a      	strh	r2, [r3, #0]
		VGA_update();
 80004b4:	f7ff fe4a 	bl	800014c <VGA_update>
	}
	if(line>=VGA_VBUFFER && !firstTrig){
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <DMA_CpltCallback+0xbc>)
 80004ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004be:	2b4a      	cmp	r3, #74	; 0x4a
 80004c0:	dd09      	ble.n	80004d6 <DMA_CpltCallback+0xb2>
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <DMA_CpltCallback+0xd4>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d105      	bne.n	80004d6 <DMA_CpltCallback+0xb2>
		HAL_DMA_Abort_IT(&hdma_tim4_up);
 80004ca:	480a      	ldr	r0, [pc, #40]	; (80004f4 <DMA_CpltCallback+0xd0>)
 80004cc:	f002 fad4 	bl	8002a78 <HAL_DMA_Abort_IT>
		firstTrig=1;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <DMA_CpltCallback+0xd4>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	801a      	strh	r2, [r3, #0]
	}
}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200001fc 	.word	0x200001fc
 80004e4:	200006fc 	.word	0x200006fc
 80004e8:	20000200 	.word	0x20000200
 80004ec:	20000efc 	.word	0x20000efc
 80004f0:	200001fa 	.word	0x200001fa
 80004f4:	200001b4 	.word	0x200001b4
 80004f8:	20000002 	.word	0x20000002

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b093      	sub	sp, #76	; 0x4c
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  VGA_update();
 8000502:	f7ff fe23 	bl	800014c <VGA_update>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f002 f82f 	bl	8002568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 fa5d 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fc23 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000512:	f000 fc03 	bl	8000d1c <MX_DMA_Init>
  MX_TIM1_Init();
 8000516:	f000 fa9d 	bl	8000a54 <MX_TIM1_Init>
  MX_TIM2_Init();
 800051a:	f000 fb3b 	bl	8000b94 <MX_TIM2_Init>
  MX_TIM4_Init();
 800051e:	f000 fbb1 	bl	8000c84 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_Abort(&hdma_tim4_up);
 8000522:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0x74>)
 8000524:	f002 fa6d 	bl	8002a02 <HAL_DMA_Abort>
    if(
    	  HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_HALFCPLT_CB_ID,DMA_HalfCpltCallback)
 8000528:	4a12      	ldr	r2, [pc, #72]	; (8000574 <main+0x78>)
 800052a:	2101      	movs	r1, #1
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0x74>)
 800052e:	f002 fc1f 	bl	8002d70 <HAL_DMA_RegisterCallback>
 8000532:	4603      	mov	r3, r0
    if(
 8000534:	2b00      	cmp	r3, #0
 8000536:	d009      	beq.n	800054c <main+0x50>
    	  !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	480e      	ldr	r0, [pc, #56]	; (8000578 <main+0x7c>)
 800053e:	f002 fe40 	bl	80031c2 <HAL_GPIO_TogglePin>
    		  HAL_Delay(500);
 8000542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000546:	f002 f871 	bl	800262c <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800054a:	e7f5      	b.n	8000538 <main+0x3c>
    	  }
    }
    if(
          HAL_DMA_RegisterCallback(&hdma_tim4_up,HAL_DMA_XFER_CPLT_CB_ID,DMA_CpltCallback)
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <main+0x80>)
 800054e:	2100      	movs	r1, #0
 8000550:	4807      	ldr	r0, [pc, #28]	; (8000570 <main+0x74>)
 8000552:	f002 fc0d 	bl	8002d70 <HAL_DMA_RegisterCallback>
 8000556:	4603      	mov	r3, r0
    if(
 8000558:	2b00      	cmp	r3, #0
 800055a:	d011      	beq.n	8000580 <main+0x84>
          !=HAL_OK){
    	  while(1){
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <main+0x7c>)
 8000562:	f002 fe2e 	bl	80031c2 <HAL_GPIO_TogglePin>
    		  HAL_Delay(250);
 8000566:	20fa      	movs	r0, #250	; 0xfa
 8000568:	f002 f860 	bl	800262c <HAL_Delay>
    		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800056c:	e7f6      	b.n	800055c <main+0x60>
 800056e:	bf00      	nop
 8000570:	200001b4 	.word	0x200001b4
 8000574:	0800034d 	.word	0x0800034d
 8000578:	40011000 	.word	0x40011000
 800057c:	08000425 	.word	0x08000425
    	  }
    }
    GPIOB_ODR = (uint32_t)&(GPIOB->ODR)+1;
 8000580:	4bc1      	ldr	r3, [pc, #772]	; (8000888 <main+0x38c>)
 8000582:	4ac2      	ldr	r2, [pc, #776]	; (800088c <main+0x390>)
 8000584:	601a      	str	r2, [r3, #0]

    //Start GPIO-DMA output
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_TC);
 8000586:	4bc2      	ldr	r3, [pc, #776]	; (8000890 <main+0x394>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4bc0      	ldr	r3, [pc, #768]	; (8000890 <main+0x394>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f042 0202 	orr.w	r2, r2, #2
 8000594:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE_IT(&hdma_tim4_up,DMA_IT_HT);
 8000596:	4bbe      	ldr	r3, [pc, #760]	; (8000890 <main+0x394>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4bbc      	ldr	r3, [pc, #752]	; (8000890 <main+0x394>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f042 0204 	orr.w	r2, r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
    __HAL_TIM_ENABLE_DMA(&htim4, TIM_DMA_UPDATE);
 80005a6:	4bbb      	ldr	r3, [pc, #748]	; (8000894 <main+0x398>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68da      	ldr	r2, [r3, #12]
 80005ac:	4bb9      	ldr	r3, [pc, #740]	; (8000894 <main+0x398>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b4:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start(&htim4);
 80005b6:	48b7      	ldr	r0, [pc, #732]	; (8000894 <main+0x398>)
 80005b8:	f003 fa54 	bl	8003a64 <HAL_TIM_Base_Start>

    //Start H-sync
    HAL_TIM_Base_Start_IT(&htim1);
 80005bc:	48b6      	ldr	r0, [pc, #728]	; (8000898 <main+0x39c>)
 80005be:	f003 fa9b 	bl	8003af8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	48b4      	ldr	r0, [pc, #720]	; (8000898 <main+0x39c>)
 80005c6:	f003 fb41 	bl	8003c4c <HAL_TIM_PWM_Start>

    //Start V-sync
    HAL_TIM_Base_Start_IT(&htim2);
 80005ca:	48b4      	ldr	r0, [pc, #720]	; (800089c <main+0x3a0>)
 80005cc:	f003 fa94 	bl	8003af8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80005d0:	2100      	movs	r1, #0
 80005d2:	48b2      	ldr	r0, [pc, #712]	; (800089c <main+0x3a0>)
 80005d4:	f003 fb3a 	bl	8003c4c <HAL_TIM_PWM_Start>



    HAL_Delay(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f002 f827 	bl	800262c <HAL_Delay>
    vga_stop=1;
 80005de:	4bb0      	ldr	r3, [pc, #704]	; (80008a0 <main+0x3a4>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	801a      	strh	r2, [r3, #0]

    ClearScreen(VGA_BLACK);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f001 fb03 	bl	8001bf0 <ClearScreen>
    DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 80005ea:	23ff      	movs	r3, #255	; 0xff
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2348      	movs	r3, #72	; 0x48
 80005f0:	2263      	movs	r2, #99	; 0x63
 80005f2:	2100      	movs	r1, #0
 80005f4:	2000      	movs	r0, #0
 80005f6:	f001 fdc7 	bl	8002188 <DrawRectangle>
    char msg[32]="Testing";
 80005fa:	4aaa      	ldr	r2, [pc, #680]	; (80008a4 <main+0x3a8>)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000602:	e883 0003 	stmia.w	r3, {r0, r1}
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	615a      	str	r2, [r3, #20]
    SetCursor(3,3);
 8000618:	2103      	movs	r1, #3
 800061a:	2003      	movs	r0, #3
 800061c:	f001 fcf4 	bl	8002008 <SetCursor>
    WriteString(msg,Font_7x10,VGA_GREEN);
 8000620:	4aa1      	ldr	r2, [pc, #644]	; (80008a8 <main+0x3ac>)
 8000622:	1d38      	adds	r0, r7, #4
 8000624:	231c      	movs	r3, #28
 8000626:	ca06      	ldmia	r2, {r1, r2}
 8000628:	f001 fcc8 	bl	8001fbc <WriteString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int r,x,y,w,h,z=0,c;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  {
// If you want to only try Tetris, uncomment here
//	  tetris();
//	  continue;

	  r = rand()%25;
 8000630:	f004 fb00 	bl	8004c34 <rand>
 8000634:	4602      	mov	r2, r0
 8000636:	4b9d      	ldr	r3, [pc, #628]	; (80008ac <main+0x3b0>)
 8000638:	fb83 1302 	smull	r1, r3, r3, r2
 800063c:	10d9      	asrs	r1, r3, #3
 800063e:	17d3      	asrs	r3, r2, #31
 8000640:	1ac9      	subs	r1, r1, r3
 8000642:	460b      	mov	r3, r1
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	440b      	add	r3, r1
 8000648:	0099      	lsls	r1, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 8000650:	f004 faf0 	bl	8004c34 <rand>
 8000654:	4603      	mov	r3, r0
 8000656:	4a95      	ldr	r2, [pc, #596]	; (80008ac <main+0x3b0>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	1151      	asrs	r1, r2, #5
 800065e:	17da      	asrs	r2, r3, #31
 8000660:	1a8a      	subs	r2, r1, r2
 8000662:	2164      	movs	r1, #100	; 0x64
 8000664:	fb01 f202 	mul.w	r2, r1, r2
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 800066c:	f004 fae2 	bl	8004c34 <rand>
 8000670:	4602      	mov	r2, r0
 8000672:	4b8f      	ldr	r3, [pc, #572]	; (80008b0 <main+0x3b4>)
 8000674:	fb83 1302 	smull	r1, r3, r3, r2
 8000678:	4413      	add	r3, r2
 800067a:	1199      	asrs	r1, r3, #6
 800067c:	17d3      	asrs	r3, r2, #31
 800067e:	1ac9      	subs	r1, r1, r3
 8000680:	460b      	mov	r3, r1
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	440b      	add	r3, r1
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	440b      	add	r3, r1
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 800068e:	f004 fad1 	bl	8004c34 <rand>
 8000692:	4603      	mov	r3, r0
 8000694:	425a      	negs	r2, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	bf58      	it	pl
 800069c:	4253      	negpl	r3, r2
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawCircle(x,y,r,c);
 80006a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a2:	b218      	sxth	r0, r3
 80006a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a6:	b219      	sxth	r1, r3
 80006a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f001 fcd8 	bl	8002064 <DrawCircle>
	  r = rand()%25;
 80006b4:	f004 fabe 	bl	8004c34 <rand>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b7c      	ldr	r3, [pc, #496]	; (80008ac <main+0x3b0>)
 80006bc:	fb83 1302 	smull	r1, r3, r3, r2
 80006c0:	10d9      	asrs	r1, r3, #3
 80006c2:	17d3      	asrs	r3, r2, #31
 80006c4:	1ac9      	subs	r1, r1, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	0099      	lsls	r1, r3, #2
 80006ce:	440b      	add	r3, r1
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
	  x = rand()%VGA_WIDTH;
 80006d4:	f004 faae 	bl	8004c34 <rand>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a74      	ldr	r2, [pc, #464]	; (80008ac <main+0x3b0>)
 80006dc:	fb82 1203 	smull	r1, r2, r2, r3
 80006e0:	1151      	asrs	r1, r2, #5
 80006e2:	17da      	asrs	r2, r3, #31
 80006e4:	1a8a      	subs	r2, r1, r2
 80006e6:	2164      	movs	r1, #100	; 0x64
 80006e8:	fb01 f202 	mul.w	r2, r1, r2
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 80006f0:	f004 faa0 	bl	8004c34 <rand>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b6e      	ldr	r3, [pc, #440]	; (80008b0 <main+0x3b4>)
 80006f8:	fb83 1302 	smull	r1, r3, r3, r2
 80006fc:	4413      	add	r3, r2
 80006fe:	1199      	asrs	r1, r3, #6
 8000700:	17d3      	asrs	r3, r2, #31
 8000702:	1ac9      	subs	r1, r1, r3
 8000704:	460b      	mov	r3, r1
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	440b      	add	r3, r1
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	440b      	add	r3, r1
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
	  c = rand()%256;
 8000712:	f004 fa8f 	bl	8004c34 <rand>
 8000716:	4603      	mov	r3, r0
 8000718:	425a      	negs	r2, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	bf58      	it	pl
 8000720:	4253      	negpl	r3, r2
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillCircle(x,y,r,c);
 8000724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000726:	b218      	sxth	r0, r3
 8000728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800072a:	b219      	sxth	r1, r3
 800072c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800072e:	b21a      	sxth	r2, r3
 8000730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f001 fdb1 	bl	800229a <FillCircle>
	  x = rand()%VGA_WIDTH;
 8000738:	f004 fa7c 	bl	8004c34 <rand>
 800073c:	4603      	mov	r3, r0
 800073e:	4a5b      	ldr	r2, [pc, #364]	; (80008ac <main+0x3b0>)
 8000740:	fb82 1203 	smull	r1, r2, r2, r3
 8000744:	1151      	asrs	r1, r2, #5
 8000746:	17da      	asrs	r2, r3, #31
 8000748:	1a8a      	subs	r2, r1, r2
 800074a:	2164      	movs	r1, #100	; 0x64
 800074c:	fb01 f202 	mul.w	r2, r1, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000754:	f004 fa6e 	bl	8004c34 <rand>
 8000758:	4602      	mov	r2, r0
 800075a:	4b55      	ldr	r3, [pc, #340]	; (80008b0 <main+0x3b4>)
 800075c:	fb83 1302 	smull	r1, r3, r3, r2
 8000760:	4413      	add	r3, r2
 8000762:	1199      	asrs	r1, r3, #6
 8000764:	17d3      	asrs	r3, r2, #31
 8000766:	1ac9      	subs	r1, r1, r3
 8000768:	460b      	mov	r3, r1
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	440b      	add	r3, r1
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	440b      	add	r3, r1
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 8000776:	f004 fa5d 	bl	8004c34 <rand>
 800077a:	4602      	mov	r2, r0
 800077c:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <main+0x3b8>)
 800077e:	fb83 1302 	smull	r1, r3, r3, r2
 8000782:	4413      	add	r3, r2
 8000784:	1119      	asrs	r1, r3, #4
 8000786:	17d3      	asrs	r3, r2, #31
 8000788:	1ac9      	subs	r1, r1, r3
 800078a:	460b      	mov	r3, r1
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	1a5b      	subs	r3, r3, r1
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 8000796:	f004 fa4d 	bl	8004c34 <rand>
 800079a:	4602      	mov	r2, r0
 800079c:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <main+0x3b8>)
 800079e:	fb83 1302 	smull	r1, r3, r3, r2
 80007a2:	4413      	add	r3, r2
 80007a4:	1119      	asrs	r1, r3, #4
 80007a6:	17d3      	asrs	r3, r2, #31
 80007a8:	1ac9      	subs	r1, r1, r3
 80007aa:	460b      	mov	r3, r1
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	1a5b      	subs	r3, r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 80007b6:	f004 fa3d 	bl	8004c34 <rand>
 80007ba:	4603      	mov	r3, r0
 80007bc:	425a      	negs	r2, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	bf58      	it	pl
 80007c4:	4253      	negpl	r3, r2
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  DrawRectangle(x,y,x+w,y+h,c);
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	b218      	sxth	r0, r3
 80007cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ce:	b219      	sxth	r1, r3
 80007d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4413      	add	r3, r2
 80007da:	b29b      	uxth	r3, r3
 80007dc:	b21c      	sxth	r4, r3
 80007de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	4413      	add	r3, r2
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	4613      	mov	r3, r2
 80007f4:	4622      	mov	r2, r4
 80007f6:	f001 fcc7 	bl	8002188 <DrawRectangle>
	  x = rand()%VGA_WIDTH;
 80007fa:	f004 fa1b 	bl	8004c34 <rand>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <main+0x3b0>)
 8000802:	fb82 1203 	smull	r1, r2, r2, r3
 8000806:	1151      	asrs	r1, r2, #5
 8000808:	17da      	asrs	r2, r3, #31
 800080a:	1a8a      	subs	r2, r1, r2
 800080c:	2164      	movs	r1, #100	; 0x64
 800080e:	fb01 f202 	mul.w	r2, r1, r2
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
	  y = rand()%VGA_HEIGHT;
 8000816:	f004 fa0d 	bl	8004c34 <rand>
 800081a:	4602      	mov	r2, r0
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <main+0x3b4>)
 800081e:	fb83 1302 	smull	r1, r3, r3, r2
 8000822:	4413      	add	r3, r2
 8000824:	1199      	asrs	r1, r3, #6
 8000826:	17d3      	asrs	r3, r2, #31
 8000828:	1ac9      	subs	r1, r1, r3
 800082a:	460b      	mov	r3, r1
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	00db      	lsls	r3, r3, #3
 8000832:	440b      	add	r3, r1
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
	  w = rand()%30;
 8000838:	f004 f9fc 	bl	8004c34 <rand>
 800083c:	4602      	mov	r2, r0
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <main+0x3b8>)
 8000840:	fb83 1302 	smull	r1, r3, r3, r2
 8000844:	4413      	add	r3, r2
 8000846:	1119      	asrs	r1, r3, #4
 8000848:	17d3      	asrs	r3, r2, #31
 800084a:	1ac9      	subs	r1, r1, r3
 800084c:	460b      	mov	r3, r1
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	1a5b      	subs	r3, r3, r1
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
	  h = rand()%30;
 8000858:	f004 f9ec 	bl	8004c34 <rand>
 800085c:	4602      	mov	r2, r0
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <main+0x3b8>)
 8000860:	fb83 1302 	smull	r1, r3, r3, r2
 8000864:	4413      	add	r3, r2
 8000866:	1119      	asrs	r1, r3, #4
 8000868:	17d3      	asrs	r3, r2, #31
 800086a:	1ac9      	subs	r1, r1, r3
 800086c:	460b      	mov	r3, r1
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	1a5b      	subs	r3, r3, r1
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
	  c = rand()%256;
 8000878:	f004 f9dc 	bl	8004c34 <rand>
 800087c:	4603      	mov	r3, r0
 800087e:	425a      	negs	r2, r3
 8000880:	b2db      	uxtb	r3, r3
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	e018      	b.n	80008b8 <main+0x3bc>
 8000886:	bf00      	nop
 8000888:	20000220 	.word	0x20000220
 800088c:	40010c0d 	.word	0x40010c0d
 8000890:	200001b4 	.word	0x200001b4
 8000894:	2000016c 	.word	0x2000016c
 8000898:	200000dc 	.word	0x200000dc
 800089c:	20000124 	.word	0x20000124
 80008a0:	200001fa 	.word	0x200001fa
 80008a4:	08006070 	.word	0x08006070
 80008a8:	2000004c 	.word	0x2000004c
 80008ac:	51eb851f 	.word	0x51eb851f
 80008b0:	e070381d 	.word	0xe070381d
 80008b4:	88888889 	.word	0x88888889
 80008b8:	bf58      	it	pl
 80008ba:	4253      	negpl	r3, r2
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  FillRectangle(x,y,w,h,c);
 80008be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c0:	b218      	sxth	r0, r3
 80008c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c4:	b219      	sxth	r1, r3
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	b21c      	sxth	r4, r3
 80008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4623      	mov	r3, r4
 80008d6:	f001 fc9e 	bl	8002216 <FillRectangle>
	      }
	  }
	  HAL_Delay(100);
	  continue;
	  */
	  z=z+1;
 80008da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008dc:	3301      	adds	r3, #1
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(z>=100){
 80008e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008e2:	2b63      	cmp	r3, #99	; 0x63
 80008e4:	dd5c      	ble.n	80009a0 <main+0x4a4>
		  /////////
		  ClearScreen(VGA_BLACK);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f001 f982 	bl	8001bf0 <ClearScreen>
		  ShowImage((uint8_t *)colors,100,75,0,0);
 80008ec:	2300      	movs	r3, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	224b      	movs	r2, #75	; 0x4b
 80008f4:	2164      	movs	r1, #100	; 0x64
 80008f6:	482c      	ldr	r0, [pc, #176]	; (80009a8 <main+0x4ac>)
 80008f8:	f001 fdc6 	bl	8002488 <ShowImage>
		  HAL_Delay(5000);
 80008fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8000900:	f001 fe94 	bl	800262c <HAL_Delay>
		  ShowImage((uint8_t *)flower,100,63,0,0);
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2300      	movs	r3, #0
 800090a:	223f      	movs	r2, #63	; 0x3f
 800090c:	2164      	movs	r1, #100	; 0x64
 800090e:	4827      	ldr	r0, [pc, #156]	; (80009ac <main+0x4b0>)
 8000910:	f001 fdba 	bl	8002488 <ShowImage>
		  HAL_Delay(5000);
 8000914:	f241 3088 	movw	r0, #5000	; 0x1388
 8000918:	f001 fe88 	bl	800262c <HAL_Delay>
		  ShowImage((uint8_t *)rgb,100,75,0,0);
 800091c:	2300      	movs	r3, #0
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	224b      	movs	r2, #75	; 0x4b
 8000924:	2164      	movs	r1, #100	; 0x64
 8000926:	4822      	ldr	r0, [pc, #136]	; (80009b0 <main+0x4b4>)
 8000928:	f001 fdae 	bl	8002488 <ShowImage>
		  HAL_Delay(5000);
 800092c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000930:	f001 fe7c 	bl	800262c <HAL_Delay>

		  tetris();
 8000934:	f000 fca4 	bl	8001280 <tetris>
		  //////////
		  z=0;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  ClearScreen(VGA_BLACK);
 800093c:	2000      	movs	r0, #0
 800093e:	f001 f957 	bl	8001bf0 <ClearScreen>
		  HAL_Delay(100);
 8000942:	2064      	movs	r0, #100	; 0x64
 8000944:	f001 fe72 	bl	800262c <HAL_Delay>
		  vga_stop=1;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <main+0x4b8>)
 800094a:	2201      	movs	r2, #1
 800094c:	801a      	strh	r2, [r3, #0]
		  sprintf(msg,"Testing");
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4919      	ldr	r1, [pc, #100]	; (80009b8 <main+0x4bc>)
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f9ac 	bl	8004cb0 <siprintf>
		  DrawRectangle(0,0,VGA_WIDTH-1,VGA_HEIGHT-1,VGA_WHITE);
 8000958:	23ff      	movs	r3, #255	; 0xff
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2348      	movs	r3, #72	; 0x48
 800095e:	2263      	movs	r2, #99	; 0x63
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f001 fc10 	bl	8002188 <DrawRectangle>
		  SetCursor(3,3);
 8000968:	2103      	movs	r1, #3
 800096a:	2003      	movs	r0, #3
 800096c:	f001 fb4c 	bl	8002008 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_GREEN);
 8000970:	4a12      	ldr	r2, [pc, #72]	; (80009bc <main+0x4c0>)
 8000972:	1d38      	adds	r0, r7, #4
 8000974:	231c      	movs	r3, #28
 8000976:	ca06      	ldmia	r2, {r1, r2}
 8000978:	f001 fb20 	bl	8001fbc <WriteString>
		  sprintf(msg,"%d ",VOFFSET);
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <main+0x4c4>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	490f      	ldr	r1, [pc, #60]	; (80009c4 <main+0x4c8>)
 8000986:	4618      	mov	r0, r3
 8000988:	f004 f992 	bl	8004cb0 <siprintf>
		  SetCursor(3,50);
 800098c:	2132      	movs	r1, #50	; 0x32
 800098e:	2003      	movs	r0, #3
 8000990:	f001 fb3a 	bl	8002008 <SetCursor>
		  WriteString(msg,Font_7x10,VGA_WHITE);
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <main+0x4c0>)
 8000996:	1d38      	adds	r0, r7, #4
 8000998:	23ff      	movs	r3, #255	; 0xff
 800099a:	ca06      	ldmia	r2, {r1, r2}
 800099c:	f001 fb0e 	bl	8001fbc <WriteString>
	  }
	  HAL_Delay(100);
 80009a0:	2064      	movs	r0, #100	; 0x64
 80009a2:	f001 fe43 	bl	800262c <HAL_Delay>
	  r = rand()%25;
 80009a6:	e643      	b.n	8000630 <main+0x134>
 80009a8:	080060ac 	.word	0x080060ac
 80009ac:	08007df8 	.word	0x08007df8
 80009b0:	08009694 	.word	0x08009694
 80009b4:	200001fa 	.word	0x200001fa
 80009b8:	08006064 	.word	0x08006064
 80009bc:	2000004c 	.word	0x2000004c
 80009c0:	200001f8 	.word	0x200001f8
 80009c4:	0800606c 	.word	0x0800606c

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b090      	sub	sp, #64	; 0x40
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0318 	add.w	r3, r7, #24
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 f8f6 	bl	8004bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fc:	2302      	movs	r3, #2
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fbef 	bl	80031f4 <HAL_RCC_OscConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a1c:	f000 fa2e 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fe5c 	bl	80036f8 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a46:	f000 fa19 	bl	8000e7c <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3740      	adds	r7, #64	; 0x40
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	; 0x58
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	615a      	str	r2, [r3, #20]
 8000a84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2220      	movs	r2, #32
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f89b 	bl	8004bc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a92:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000a94:	4a3e      	ldr	r2, [pc, #248]	; (8000b90 <MX_TIM1_Init+0x13c>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8000a98:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000aa6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000aaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab2:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab8:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000abe:	4833      	ldr	r0, [pc, #204]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000ac0:	f002 ff80 	bl	80039c4 <HAL_TIM_Base_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000aca:	f000 f9d7 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482c      	ldr	r0, [pc, #176]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000adc:	f003 fb1e 	bl	800411c <HAL_TIM_ConfigClockSource>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ae6:	f000 f9c9 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aea:	4828      	ldr	r0, [pc, #160]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000aec:	f003 f856 	bl	8003b9c <HAL_TIM_PWM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000af6:	f000 f9c1 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000afa:	2320      	movs	r3, #32
 8000afc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b06:	4619      	mov	r1, r3
 8000b08:	4820      	ldr	r0, [pc, #128]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000b0a:	f003 ff63 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b14:	f000 f9b2 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 72-1;
 8000b1c:	2347      	movs	r3, #71	; 0x47
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000b3e:	f003 fa2f 	bl	8003fa0 <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b48:	f000 f998 	bl	8000e7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000b70:	f003 ff8e 	bl	8004a90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b7a:	f000 f97f 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <MX_TIM1_Init+0x138>)
 8000b80:	f000 fa2a 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000b84:	bf00      	nop
 8000b86:	3758      	adds	r7, #88	; 0x58
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000dc 	.word	0x200000dc
 8000b90:	40012c00 	.word	0x40012c00

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08e      	sub	sp, #56	; 0x38
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-2;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000bdc:	f240 226f 	movw	r2, #623	; 0x26f
 8000be0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bee:	4824      	ldr	r0, [pc, #144]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000bf0:	f002 fee8 	bl	80039c4 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 f93f 	bl	8000e7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bfe:	4820      	ldr	r0, [pc, #128]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000c00:	f002 ffcc 	bl	8003b9c <HAL_TIM_PWM_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c0a:	f000 f937 	bl	8000e7c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4818      	ldr	r0, [pc, #96]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000c1e:	f003 fb41 	bl	80042a4 <HAL_TIM_SlaveConfigSynchro>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c28:	f000 f928 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000c3c:	f003 feca 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c46:	f000 f919 	bl	8000e7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4a:	2360      	movs	r3, #96	; 0x60
 8000c4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000c62:	f003 f99d 	bl	8003fa0 <HAL_TIM_PWM_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c6c:	f000 f906 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM2_Init+0xec>)
 8000c72:	f000 f9b1 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000c76:	bf00      	nop
 8000c78:	3738      	adds	r7, #56	; 0x38
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000124 	.word	0x20000124

08000c84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000ca2:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <MX_TIM4_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000cc6:	f002 fe7d 	bl	80039c4 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000cd0:	f000 f8d4 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000ce2:	f003 fa1b 	bl	800411c <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000cec:	f000 f8c6 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM4_Init+0x90>)
 8000cfe:	f003 fe69 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000d08:	f000 f8b8 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000016c 	.word	0x2000016c
 8000d18:	40000800 	.word	0x40000800

08000d1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_DMA_Init+0x38>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2011      	movs	r0, #17
 8000d40:	f001 fd6f 	bl	8002822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d44:	2011      	movs	r0, #17
 8000d46:	f001 fd88 	bl	800285a <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a3e      	ldr	r2, [pc, #248]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0310 	and.w	r3, r3, #16
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a38      	ldr	r2, [pc, #224]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d8a:	f043 0320 	orr.w	r3, r3, #32
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0320 	and.w	r3, r3, #32
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_GPIO_Init+0x114>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0308 	and.w	r3, r3, #8
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	4827      	ldr	r0, [pc, #156]	; (8000e70 <MX_GPIO_Init+0x118>)
 8000dd4:	f002 f9dd 	bl	8003192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000dde:	4825      	ldr	r0, [pc, #148]	; (8000e74 <MX_GPIO_Init+0x11c>)
 8000de0:	f002 f9d7 	bl	8003192 <HAL_GPIO_WritePin>
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <MX_GPIO_Init+0x120>)
 8000dec:	f002 f9d1 	bl	8003192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	4819      	ldr	r0, [pc, #100]	; (8000e70 <MX_GPIO_Init+0x118>)
 8000e0a:	f002 f827 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
 8000e0e:	23e0      	movs	r3, #224	; 0xe0
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4815      	ldr	r0, [pc, #84]	; (8000e78 <MX_GPIO_Init+0x120>)
 8000e22:	f002 f81b 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : G0_Pin G1_Pin G2_Pin R0_Pin
                           R1_Pin R2_Pin B0_Pin B1_Pin */
  GPIO_InitStruct.Pin = G0_Pin|G1_Pin|G2_Pin|R0_Pin
 8000e26:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e2a:	613b      	str	r3, [r7, #16]
                          |R1_Pin|R2_Pin|B0_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_GPIO_Init+0x11c>)
 8000e40:	f002 f80c 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000e44:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_GPIO_Init+0x120>)
 8000e5e:	f001 fffd 	bl	8002e5c <HAL_GPIO_Init>

}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40011000 	.word	0x40011000
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	40010800 	.word	0x40010800

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6193      	str	r3, [r2, #24]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x5c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_MspInit+0x60>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000

08000eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a32      	ldr	r2, [pc, #200]	; (8000fc4 <HAL_TIM_Base_MspInit+0xd8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10c      	bne.n	8000f18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f08:	6193      	str	r3, [r2, #24]
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f16:	e051      	b.n	8000fbc <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f20:	d114      	bne.n	8000f4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201c      	movs	r0, #28
 8000f40:	f001 fc6f 	bl	8002822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f44:	201c      	movs	r0, #28
 8000f46:	f001 fc88 	bl	800285a <HAL_NVIC_EnableIRQ>
}
 8000f4a:	e037      	b.n	8000fbc <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1e      	ldr	r2, [pc, #120]	; (8000fcc <HAL_TIM_Base_MspInit+0xe0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d132      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_TIM_Base_MspInit+0xdc>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_up.Instance = DMA1_Channel7;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_TIM_Base_MspInit+0xe8>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f94:	2220      	movs	r2, #32
 8000f96:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000f9a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000fa2:	f001 fc75 	bl	8002890 <HAL_DMA_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_TIM_Base_MspInit+0xc4>
      Error_Handler();
 8000fac:	f7ff ff66 	bl	8000e7c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000fb4:	621a      	str	r2, [r3, #32]
 8000fb6:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_TIM_Base_MspInit+0xe4>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40000800 	.word	0x40000800
 8000fd0:	200001b4 	.word	0x200001b4
 8000fd4:	40020080 	.word	0x40020080

08000fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_TIM_MspPostInit+0x98>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d119      	bne.n	800102c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_TIM_MspPostInit+0x9c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_TIM_MspPostInit+0x9c>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_TIM_MspPostInit+0x9c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4619      	mov	r1, r3
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <HAL_TIM_MspPostInit+0xa0>)
 8001026:	f001 ff19 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800102a:	e01c      	b.n	8001066 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001034:	d117      	bne.n	8001066 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_TIM_MspPostInit+0x9c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_TIM_MspPostInit+0x9c>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_TIM_MspPostInit+0x9c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104e:	2301      	movs	r3, #1
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_TIM_MspPostInit+0xa0>)
 8001062:	f001 fefb 	bl	8002e5c <HAL_GPIO_Init>
}
 8001066:	bf00      	nop
 8001068:	3720      	adds	r7, #32
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012c00 	.word	0x40012c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c2:	f001 fa97 	bl	80025f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <DMA1_Channel7_IRQHandler+0x10>)
 80010d2:	f001 fd47 	bl	8002b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001b4 	.word	0x200001b4

080010e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <TIM2_IRQHandler+0x10>)
 80010e6:	f002 fe53 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000124 	.word	0x20000124

080010f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <_kill>:

int _kill(int pid, int sig)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800110c:	f003 fd24 	bl	8004b58 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	2216      	movs	r2, #22
 8001114:	601a      	str	r2, [r3, #0]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_exit>:

void _exit (int status)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800112a:	f04f 31ff 	mov.w	r1, #4294967295
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffe7 	bl	8001102 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001134:	e7fe      	b.n	8001134 <_exit+0x12>

08001136 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e00a      	b.n	800115e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001148:	f3af 8000 	nop.w
 800114c:	4601      	mov	r1, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	60ba      	str	r2, [r7, #8]
 8001154:	b2ca      	uxtb	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	dbf0      	blt.n	8001148 <_read+0x12>
	}

return len;
 8001166:	687b      	ldr	r3, [r7, #4]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e009      	b.n	8001196 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	60ba      	str	r2, [r7, #8]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3301      	adds	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	dbf1      	blt.n	8001182 <_write+0x12>
	}
	return len;
 800119e:	687b      	ldr	r3, [r7, #4]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_close>:

int _close(int file)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	return -1;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ce:	605a      	str	r2, [r3, #4]
	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <_isatty>:

int _isatty(int file)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
	return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001210:	4a14      	ldr	r2, [pc, #80]	; (8001264 <_sbrk+0x5c>)
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <_sbrk+0x60>)
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <_sbrk+0x64>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <_sbrk+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	429a      	cmp	r2, r3
 8001236:	d207      	bcs.n	8001248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001238:	f003 fc8e 	bl	8004b58 <__errno>
 800123c:	4603      	mov	r3, r0
 800123e:	220c      	movs	r2, #12
 8001240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e009      	b.n	800125c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_sbrk+0x64>)
 8001258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800125a:	68fb      	ldr	r3, [r7, #12]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20005000 	.word	0x20005000
 8001268:	00000400 	.word	0x00000400
 800126c:	20000224 	.word	0x20000224
 8001270:	20002c60 	.word	0x20002c60

08001274 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <tetris>:
void drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color);
void drawBoard();
void checkRows();


void tetris(){
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af02      	add	r7, sp, #8
	int x,y;
	uint8_t ch;
	//Initial values
	srand(tetrisSeed());
 8001286:	f7fe ff93 	bl	80001b0 <tetrisSeed>
 800128a:	4603      	mov	r3, r0
 800128c:	4618      	mov	r0, r3
 800128e:	f003 fca3 	bl	8004bd8 <srand>
	fallDelay = NUMLEVEL;
 8001292:	4b96      	ldr	r3, [pc, #600]	; (80014ec <tetris+0x26c>)
 8001294:	220a      	movs	r2, #10
 8001296:	601a      	str	r2, [r3, #0]
	curDelay=0;
 8001298:	4b95      	ldr	r3, [pc, #596]	; (80014f0 <tetris+0x270>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
	curX = WIDTH/2;
 800129e:	4b95      	ldr	r3, [pc, #596]	; (80014f4 <tetris+0x274>)
 80012a0:	2205      	movs	r2, #5
 80012a2:	601a      	str	r2, [r3, #0]
	curY = 0;
 80012a4:	4b94      	ldr	r3, [pc, #592]	; (80014f8 <tetris+0x278>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
	curR = 0;
 80012aa:	4b94      	ldr	r3, [pc, #592]	; (80014fc <tetris+0x27c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
	curPiece = rand()%7;
 80012b0:	f003 fcc0 	bl	8004c34 <rand>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b92      	ldr	r3, [pc, #584]	; (8001500 <tetris+0x280>)
 80012b8:	fb83 1302 	smull	r1, r3, r3, r2
 80012bc:	4413      	add	r3, r2
 80012be:	1099      	asrs	r1, r3, #2
 80012c0:	17d3      	asrs	r3, r2, #31
 80012c2:	1ac9      	subs	r1, r1, r3
 80012c4:	460b      	mov	r3, r1
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	1a5b      	subs	r3, r3, r1
 80012ca:	1ad1      	subs	r1, r2, r3
 80012cc:	4b8d      	ldr	r3, [pc, #564]	; (8001504 <tetris+0x284>)
 80012ce:	6019      	str	r1, [r3, #0]
	score=0;
 80012d0:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <tetris+0x288>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
	running = 1;
 80012d6:	4b8d      	ldr	r3, [pc, #564]	; (800150c <tetris+0x28c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
    //Initialize board
	for(y=0;y<HEIGHT;y++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	e016      	b.n	8001310 <tetris+0x90>
		for(x=0;x<WIDTH;x++){
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e00d      	b.n	8001304 <tetris+0x84>
			tetrisBoard[y][x]=V_BGND;
 80012e8:	4989      	ldr	r1, [pc, #548]	; (8001510 <tetris+0x290>)
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	2200      	movs	r2, #0
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(x=0;x<WIDTH;x++){
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b09      	cmp	r3, #9
 8001308:	ddee      	ble.n	80012e8 <tetris+0x68>
	for(y=0;y<HEIGHT;y++){
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3301      	adds	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b1d      	cmp	r3, #29
 8001314:	dde5      	ble.n	80012e2 <tetris+0x62>
		}
	}
	//Clear screen and draw borders
	ClearScreen(V_BGND);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 fc6a 	bl	8001bf0 <ClearScreen>
	FillRectangle(BOARD_X,BOARD_Y,
 800131c:	23ff      	movs	r3, #255	; 0xff
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	2202      	movs	r2, #2
 8001324:	2101      	movs	r1, #1
 8001326:	2001      	movs	r0, #1
 8001328:	f000 ff75 	bl	8002216 <FillRectangle>
			      BOARD_X+SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+(WIDTH+1)*SIZE,BOARD_Y,
 800132c:	23ff      	movs	r3, #255	; 0xff
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2340      	movs	r3, #64	; 0x40
 8001332:	2218      	movs	r2, #24
 8001334:	2101      	movs	r1, #1
 8001336:	2017      	movs	r0, #23
 8001338:	f000 ff6d 	bl	8002216 <FillRectangle>
			      BOARD_X+(WIDTH+2)*SIZE-1,BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y,
 800133c:	23ff      	movs	r3, #255	; 0xff
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2302      	movs	r3, #2
 8001342:	2216      	movs	r2, #22
 8001344:	2101      	movs	r1, #1
 8001346:	2003      	movs	r0, #3
 8001348:	f000 ff65 	bl	8002216 <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,BOARD_Y+SIZE-1,V_BORD);
	FillRectangle(BOARD_X+SIZE,BOARD_Y+(HEIGHT+1)*SIZE,
 800134c:	23ff      	movs	r3, #255	; 0xff
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2340      	movs	r3, #64	; 0x40
 8001352:	2216      	movs	r2, #22
 8001354:	213f      	movs	r1, #63	; 0x3f
 8001356:	2003      	movs	r0, #3
 8001358:	f000 ff5d 	bl	8002216 <FillRectangle>
			      BOARD_X+(WIDTH+1)*SIZE-1,
				  BOARD_Y+(HEIGHT+2)*SIZE-1,V_BORD);

	//Main Game Loop
	while(running){
 800135c:	e1d0      	b.n	8001700 <tetris+0x480>
		//Checking for key pressed and move current piece
		if(getch(&ch)){
 800135e:	1cfb      	adds	r3, r7, #3
 8001360:	4618      	mov	r0, r3
 8001362:	f7fe ff39 	bl	80001d8 <getch>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8105 	beq.w	8001578 <tetris+0x2f8>
			switch(ch){
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	3b02      	subs	r3, #2
 8001372:	2b08      	cmp	r3, #8
 8001374:	f200 8109 	bhi.w	800158a <tetris+0x30a>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <tetris+0x100>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	080013ad 	.word	0x080013ad
 8001384:	0800158b 	.word	0x0800158b
 8001388:	0800142b 	.word	0x0800142b
 800138c:	0800158b 	.word	0x0800158b
 8001390:	0800148d 	.word	0x0800148d
 8001394:	0800158b 	.word	0x0800158b
 8001398:	08001519 	.word	0x08001519
 800139c:	0800158b 	.word	0x0800158b
 80013a0:	080013a5 	.word	0x080013a5
			case 10: // Exit Tetris
				running = 0;
 80013a4:	4b59      	ldr	r3, [pc, #356]	; (800150c <tetris+0x28c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
				continue;
 80013aa:	e1a9      	b.n	8001700 <tetris+0x480>
			case 2: // rotate
				if(rotateAble(curPiece,(curR+1)%4,curX,curY)){
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <tetris+0x284>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	4b52      	ldr	r3, [pc, #328]	; (80014fc <tetris+0x27c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	425a      	negs	r2, r3
 80013b8:	f003 0103 	and.w	r1, r3, #3
 80013bc:	f002 0303 	and.w	r3, r2, #3
 80013c0:	bf58      	it	pl
 80013c2:	4259      	negpl	r1, r3
 80013c4:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <tetris+0x274>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b4b      	ldr	r3, [pc, #300]	; (80014f8 <tetris+0x278>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f000 f9f2 	bl	80017b4 <rotateAble>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80d2 	beq.w	800157c <tetris+0x2fc>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <tetris+0x284>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <tetris+0x27c>)
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <tetris+0x274>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <tetris+0x278>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2400      	movs	r4, #0
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	f000 fae0 	bl	80019b0 <drawPiece>
					//rotate piece and re-draw
					curR = (curR+1)%4;
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <tetris+0x27c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	425a      	negs	r2, r3
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	bf58      	it	pl
 8001402:	4253      	negpl	r3, r2
 8001404:	4a3d      	ldr	r2, [pc, #244]	; (80014fc <tetris+0x27c>)
 8001406:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <tetris+0x284>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <tetris+0x27c>)
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <tetris+0x274>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <tetris+0x278>)
 8001416:	681c      	ldr	r4, [r3, #0]
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <tetris+0x284>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4d3d      	ldr	r5, [pc, #244]	; (8001514 <tetris+0x294>)
 800141e:	5ceb      	ldrb	r3, [r5, r3]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	4623      	mov	r3, r4
 8001424:	f000 fac4 	bl	80019b0 <drawPiece>
			    }
				break;
 8001428:	e0a8      	b.n	800157c <tetris+0x2fc>
			case 4: // move left
				if(rotateAble(curPiece,curR,curX-1,curY)){
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <tetris+0x284>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <tetris+0x27c>)
 8001430:	6819      	ldr	r1, [r3, #0]
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <tetris+0x274>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1e5a      	subs	r2, r3, #1
 8001438:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <tetris+0x278>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f000 f9ba 	bl	80017b4 <rotateAble>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 809c 	beq.w	8001580 <tetris+0x300>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <tetris+0x284>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <tetris+0x27c>)
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <tetris+0x274>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <tetris+0x278>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2400      	movs	r4, #0
 800145a:	9400      	str	r4, [sp, #0]
 800145c:	f000 faa8 	bl	80019b0 <drawPiece>
					//rotate piece and re-draw
					curX = curX-1;
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <tetris+0x274>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3b01      	subs	r3, #1
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <tetris+0x274>)
 8001468:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <tetris+0x284>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <tetris+0x27c>)
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <tetris+0x274>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <tetris+0x278>)
 8001478:	681c      	ldr	r4, [r3, #0]
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <tetris+0x284>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4d25      	ldr	r5, [pc, #148]	; (8001514 <tetris+0x294>)
 8001480:	5ceb      	ldrb	r3, [r5, r3]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	4623      	mov	r3, r4
 8001486:	f000 fa93 	bl	80019b0 <drawPiece>
				}
				break;
 800148a:	e079      	b.n	8001580 <tetris+0x300>
			case 6: // move right
				if(rotateAble(curPiece,curR,curX+1,curY)){
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <tetris+0x284>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <tetris+0x27c>)
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <tetris+0x274>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <tetris+0x278>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f000 f989 	bl	80017b4 <rotateAble>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d06d      	beq.n	8001584 <tetris+0x304>
				    //remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <tetris+0x284>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <tetris+0x27c>)
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <tetris+0x274>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <tetris+0x278>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2400      	movs	r4, #0
 80014ba:	9400      	str	r4, [sp, #0]
 80014bc:	f000 fa78 	bl	80019b0 <drawPiece>
					//rotate piece and re-draw
					curX = curX+1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <tetris+0x274>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <tetris+0x274>)
 80014c8:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <tetris+0x284>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <tetris+0x27c>)
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <tetris+0x274>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <tetris+0x278>)
 80014d8:	681c      	ldr	r4, [r3, #0]
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <tetris+0x284>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4d0d      	ldr	r5, [pc, #52]	; (8001514 <tetris+0x294>)
 80014e0:	5ceb      	ldrb	r3, [r5, r3]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4623      	mov	r3, r4
 80014e6:	f000 fa63 	bl	80019b0 <drawPiece>
				}
				break;
 80014ea:	e04b      	b.n	8001584 <tetris+0x304>
 80014ec:	200006dc 	.word	0x200006dc
 80014f0:	200006e0 	.word	0x200006e0
 80014f4:	200006e4 	.word	0x200006e4
 80014f8:	200006e8 	.word	0x200006e8
 80014fc:	200006ec 	.word	0x200006ec
 8001500:	92492493 	.word	0x92492493
 8001504:	200006f0 	.word	0x200006f0
 8001508:	200006d8 	.word	0x200006d8
 800150c:	200006f4 	.word	0x200006f4
 8001510:	20000228 	.word	0x20000228
 8001514:	0800b4d0 	.word	0x0800b4d0
			case 8: // move down
				if(rotateAble(curPiece,curR,curX,curY+1)){
 8001518:	4b7e      	ldr	r3, [pc, #504]	; (8001714 <tetris+0x494>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	4b7e      	ldr	r3, [pc, #504]	; (8001718 <tetris+0x498>)
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	4b7e      	ldr	r3, [pc, #504]	; (800171c <tetris+0x49c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <tetris+0x4a0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	f000 f943 	bl	80017b4 <rotateAble>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d029      	beq.n	8001588 <tetris+0x308>
					//remove old piece
					drawPiece(curPiece,curR,curX,curY,V_BGND);
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <tetris+0x494>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	4b77      	ldr	r3, [pc, #476]	; (8001718 <tetris+0x498>)
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	4b77      	ldr	r3, [pc, #476]	; (800171c <tetris+0x49c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b77      	ldr	r3, [pc, #476]	; (8001720 <tetris+0x4a0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2400      	movs	r4, #0
 8001546:	9400      	str	r4, [sp, #0]
 8001548:	f000 fa32 	bl	80019b0 <drawPiece>
					//rotate piece and re-draw
					curY = curY+1;
 800154c:	4b74      	ldr	r3, [pc, #464]	; (8001720 <tetris+0x4a0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a73      	ldr	r2, [pc, #460]	; (8001720 <tetris+0x4a0>)
 8001554:	6013      	str	r3, [r2, #0]
					drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 8001556:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <tetris+0x494>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	4b6f      	ldr	r3, [pc, #444]	; (8001718 <tetris+0x498>)
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <tetris+0x49c>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b6f      	ldr	r3, [pc, #444]	; (8001720 <tetris+0x4a0>)
 8001564:	681c      	ldr	r4, [r3, #0]
 8001566:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <tetris+0x494>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4d6e      	ldr	r5, [pc, #440]	; (8001724 <tetris+0x4a4>)
 800156c:	5ceb      	ldrb	r3, [r5, r3]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4623      	mov	r3, r4
 8001572:	f000 fa1d 	bl	80019b0 <drawPiece>
				}
				break;
 8001576:	e007      	b.n	8001588 <tetris+0x308>
		}
		}
 8001578:	bf00      	nop
 800157a:	e006      	b.n	800158a <tetris+0x30a>
				break;
 800157c:	bf00      	nop
 800157e:	e004      	b.n	800158a <tetris+0x30a>
				break;
 8001580:	bf00      	nop
 8001582:	e002      	b.n	800158a <tetris+0x30a>
				break;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <tetris+0x30a>
				break;
 8001588:	bf00      	nop
		curDelay--;
 800158a:	4b67      	ldr	r3, [pc, #412]	; (8001728 <tetris+0x4a8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a65      	ldr	r2, [pc, #404]	; (8001728 <tetris+0x4a8>)
 8001592:	6013      	str	r3, [r2, #0]
		if(curDelay<0){
 8001594:	4b64      	ldr	r3, [pc, #400]	; (8001728 <tetris+0x4a8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f280 80ae 	bge.w	80016fa <tetris+0x47a>
			Round++;
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <tetris+0x4ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a61      	ldr	r2, [pc, #388]	; (800172c <tetris+0x4ac>)
 80015a6:	6013      	str	r3, [r2, #0]
			if(Round>UPSPEED){
 80015a8:	4b60      	ldr	r3, [pc, #384]	; (800172c <tetris+0x4ac>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b64      	cmp	r3, #100	; 0x64
 80015ae:	dd0b      	ble.n	80015c8 <tetris+0x348>
				Round = 0;
 80015b0:	4b5e      	ldr	r3, [pc, #376]	; (800172c <tetris+0x4ac>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
				if(fallDelay>0)
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <tetris+0x4b0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dd04      	ble.n	80015c8 <tetris+0x348>
					fallDelay--;
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <tetris+0x4b0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <tetris+0x4b0>)
 80015c6:	6013      	str	r3, [r2, #0]
			}
			curDelay=fallDelay;
 80015c8:	4b59      	ldr	r3, [pc, #356]	; (8001730 <tetris+0x4b0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a56      	ldr	r2, [pc, #344]	; (8001728 <tetris+0x4a8>)
 80015ce:	6013      	str	r3, [r2, #0]
		    // Check if current piece can move further down
		    if(moveAble(curPiece,curR,curX,curY)){
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <tetris+0x494>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <tetris+0x498>)
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <tetris+0x49c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <tetris+0x4a0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f000 f93e 	bl	8001860 <moveAble>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d021      	beq.n	800162e <tetris+0x3ae>
			    //remove old piece
		    	drawPiece(curPiece,curR,curX,curY,V_BGND);
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <tetris+0x494>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <tetris+0x498>)
 80015f0:	6819      	ldr	r1, [r3, #0]
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <tetris+0x49c>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <tetris+0x4a0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2400      	movs	r4, #0
 80015fc:	9400      	str	r4, [sp, #0]
 80015fe:	f000 f9d7 	bl	80019b0 <drawPiece>
		    	//rotate piece and re-draw
		    	curY = curY+1;
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <tetris+0x4a0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <tetris+0x4a0>)
 800160a:	6013      	str	r3, [r2, #0]
		    	drawPiece(curPiece,curR,curX,curY,pieceColor[curPiece]);
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <tetris+0x494>)
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <tetris+0x498>)
 8001612:	6819      	ldr	r1, [r3, #0]
 8001614:	4b41      	ldr	r3, [pc, #260]	; (800171c <tetris+0x49c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <tetris+0x4a0>)
 800161a:	681c      	ldr	r4, [r3, #0]
 800161c:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <tetris+0x494>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4d40      	ldr	r5, [pc, #256]	; (8001724 <tetris+0x4a4>)
 8001622:	5ceb      	ldrb	r3, [r5, r3]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4623      	mov	r3, r4
 8001628:	f000 f9c2 	bl	80019b0 <drawPiece>
 800162c:	e065      	b.n	80016fa <tetris+0x47a>
		    }else{
		    	// struck here
		    	//Assign value to the board
		    	for(int i=0;i<4;i++){
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	e034      	b.n	800169e <tetris+0x41e>
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001634:	4b37      	ldr	r3, [pc, #220]	; (8001714 <tetris+0x494>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <tetris+0x4a4>)
 800163a:	5cd5      	ldrb	r5, [r2, r3]
		    		tetrisBoard[curY+piece[curPiece][curR][i*2+1]]
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <tetris+0x494>)
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <tetris+0x498>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	3301      	adds	r3, #1
 800164a:	483a      	ldr	r0, [pc, #232]	; (8001734 <tetris+0x4b4>)
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	440a      	add	r2, r1
 8001650:	00d2      	lsls	r2, r2, #3
 8001652:	4402      	add	r2, r0
 8001654:	4413      	add	r3, r2
 8001656:	f993 3000 	ldrsb.w	r3, [r3]
 800165a:	461a      	mov	r2, r3
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <tetris+0x4a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	441a      	add	r2, r3
							   [curX+piece[curPiece][curR][i*2]] = pieceColor[curPiece];
 8001662:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <tetris+0x494>)
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <tetris+0x498>)
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4c31      	ldr	r4, [pc, #196]	; (8001734 <tetris+0x4b4>)
 8001670:	0080      	lsls	r0, r0, #2
 8001672:	4401      	add	r1, r0
 8001674:	00c9      	lsls	r1, r1, #3
 8001676:	4421      	add	r1, r4
 8001678:	440b      	add	r3, r1
 800167a:	f993 3000 	ldrsb.w	r3, [r3]
 800167e:	4619      	mov	r1, r3
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <tetris+0x49c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4419      	add	r1, r3
 8001686:	462c      	mov	r4, r5
 8001688:	482b      	ldr	r0, [pc, #172]	; (8001738 <tetris+0x4b8>)
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	440b      	add	r3, r1
 8001694:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		    	for(int i=0;i<4;i++){
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3301      	adds	r3, #1
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	ddc7      	ble.n	8001634 <tetris+0x3b4>
		        }
		    	score = score+4; // Add score of placing new piece in the board
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <tetris+0x4bc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3304      	adds	r3, #4
 80016aa:	4a24      	ldr	r2, [pc, #144]	; (800173c <tetris+0x4bc>)
 80016ac:	6013      	str	r3, [r2, #0]

		    	//Check for completed rows
		    	checkRows();
 80016ae:	f000 fa25 	bl	8001afc <checkRows>
		    	showScore();
 80016b2:	f000 f849 	bl	8001748 <showScore>
			    //Generate new piece
			    curPiece = rand()%7;
 80016b6:	f003 fabd 	bl	8004c34 <rand>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <tetris+0x4c0>)
 80016be:	fb83 1302 	smull	r1, r3, r3, r2
 80016c2:	4413      	add	r3, r2
 80016c4:	1099      	asrs	r1, r3, #2
 80016c6:	17d3      	asrs	r3, r2, #31
 80016c8:	1ac9      	subs	r1, r1, r3
 80016ca:	460b      	mov	r3, r1
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	1a5b      	subs	r3, r3, r1
 80016d0:	1ad1      	subs	r1, r2, r3
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <tetris+0x494>)
 80016d4:	6019      	str	r1, [r3, #0]
			    curX = WIDTH/2;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <tetris+0x49c>)
 80016d8:	2205      	movs	r2, #5
 80016da:	601a      	str	r2, [r3, #0]
			    curY = 0;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <tetris+0x4a0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
			    curR = 0;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <tetris+0x498>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

			    if(pieceOverlapped()){
 80016e8:	f000 f90a 	bl	8001900 <pieceOverlapped>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <tetris+0x47a>
			    	// Can not place new piece
			    	running = 0;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <tetris+0x4c4>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
			    	continue;
 80016f8:	e002      	b.n	8001700 <tetris+0x480>
			    }
		    }
		}
		tetrisDelay(100); //Delay one unit
 80016fa:	2064      	movs	r0, #100	; 0x64
 80016fc:	f7fe fd4c 	bl	8000198 <tetrisDelay>
	while(running){
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <tetris+0x4c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae2a 	bne.w	800135e <tetris+0xde>
	}
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	200006f0 	.word	0x200006f0
 8001718:	200006ec 	.word	0x200006ec
 800171c:	200006e4 	.word	0x200006e4
 8001720:	200006e8 	.word	0x200006e8
 8001724:	0800b4d0 	.word	0x0800b4d0
 8001728:	200006e0 	.word	0x200006e0
 800172c:	200006f8 	.word	0x200006f8
 8001730:	200006dc 	.word	0x200006dc
 8001734:	0800b3f0 	.word	0x0800b3f0
 8001738:	20000228 	.word	0x20000228
 800173c:	200006d8 	.word	0x200006d8
 8001740:	92492493 	.word	0x92492493
 8001744:	200006f4 	.word	0x200006f4

08001748 <showScore>:


void showScore(){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
	char msg[16];
	sprintf(msg,"%6d",score);
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <showScore+0x58>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	463b      	mov	r3, r7
 8001754:	4913      	ldr	r1, [pc, #76]	; (80017a4 <showScore+0x5c>)
 8001756:	4618      	mov	r0, r3
 8001758:	f003 faaa 	bl	8004cb0 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE);
 800175c:	2103      	movs	r1, #3
 800175e:	201a      	movs	r0, #26
 8001760:	f000 fc52 	bl	8002008 <SetCursor>
	WriteString(msg,Font_7x10,VGA_YELLOW);
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <showScore+0x60>)
 8001766:	4638      	mov	r0, r7
 8001768:	23fc      	movs	r3, #252	; 0xfc
 800176a:	ca06      	ldmia	r2, {r1, r2}
 800176c:	f000 fc26 	bl	8001fbc <WriteString>
	sprintf(msg,"L%2d",NUMLEVEL-fallDelay+1);
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <showScore+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1c3 020b 	rsb	r2, r3, #11
 8001778:	463b      	mov	r3, r7
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <showScore+0x68>)
 800177c:	4618      	mov	r0, r3
 800177e:	f003 fa97 	bl	8004cb0 <siprintf>
	SetCursor((BOARD_X+WIDTH+2)*SIZE,BOARD_Y+SIZE+12);
 8001782:	210f      	movs	r1, #15
 8001784:	201a      	movs	r0, #26
 8001786:	f000 fc3f 	bl	8002008 <SetCursor>
	WriteString(msg,Font_7x10,VGA_GREEN);
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <showScore+0x60>)
 800178c:	4638      	mov	r0, r7
 800178e:	231c      	movs	r3, #28
 8001790:	ca06      	ldmia	r2, {r1, r2}
 8001792:	f000 fc13 	bl	8001fbc <WriteString>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200006d8 	.word	0x200006d8
 80017a4:	08006090 	.word	0x08006090
 80017a8:	2000004c 	.word	0x2000004c
 80017ac:	200006dc 	.word	0x200006dc
 80017b0:	08006094 	.word	0x08006094

080017b4 <rotateAble>:
int  rotateAble(int pieceNum,int pieceTargetRotation,int locX,int locY){
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
    for(int i=0;i<4;i++){
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e03e      	b.n	8001846 <rotateAble+0x92>
    	int x = piece[pieceNum][pieceTargetRotation][i*2]+locX;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4822      	ldr	r0, [pc, #136]	; (8001858 <rotateAble+0xa4>)
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	0091      	lsls	r1, r2, #2
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	440a      	add	r2, r1
 80017d6:	00d2      	lsls	r2, r2, #3
 80017d8:	4402      	add	r2, r0
 80017da:	4413      	add	r3, r2
 80017dc:	f993 3000 	ldrsb.w	r3, [r3]
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceTargetRotation][i*2+1]+locY;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3301      	adds	r3, #1
 80017ee:	481a      	ldr	r0, [pc, #104]	; (8001858 <rotateAble+0xa4>)
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	0091      	lsls	r1, r2, #2
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	440a      	add	r2, r1
 80017f8:	00d2      	lsls	r2, r2, #3
 80017fa:	4402      	add	r2, r0
 80017fc:	4413      	add	r3, r2
 80017fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001802:	461a      	mov	r2, r3
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
    	if(x<0) return 0; // Out of board
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da01      	bge.n	8001814 <rotateAble+0x60>
 8001810:	2300      	movs	r3, #0
 8001812:	e01c      	b.n	800184e <rotateAble+0x9a>
    	if((x>=WIDTH) || (y>=HEIGHT)) return 0; // Out of board
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2b09      	cmp	r3, #9
 8001818:	dc02      	bgt.n	8001820 <rotateAble+0x6c>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b1d      	cmp	r3, #29
 800181e:	dd01      	ble.n	8001824 <rotateAble+0x70>
 8001820:	2300      	movs	r3, #0
 8001822:	e014      	b.n	800184e <rotateAble+0x9a>
    	if(tetrisBoard[y][x]!=V_BGND) return 0; // Overlapped other pieces
 8001824:	490d      	ldr	r1, [pc, #52]	; (800185c <rotateAble+0xa8>)
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4413      	add	r3, r2
 8001834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <rotateAble+0x8c>
 800183c:	2300      	movs	r3, #0
 800183e:	e006      	b.n	800184e <rotateAble+0x9a>
    for(int i=0;i<4;i++){
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b03      	cmp	r3, #3
 800184a:	ddbd      	ble.n	80017c8 <rotateAble+0x14>
    }
    return 1;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	0800b3f0 	.word	0x0800b3f0
 800185c:	20000228 	.word	0x20000228

08001860 <moveAble>:

int  moveAble(int pieceNum,int pieceRotation,int locX,int locY){
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e037      	b.n	80018e4 <moveAble+0x84>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	481f      	ldr	r0, [pc, #124]	; (80018f8 <moveAble+0x98>)
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	0091      	lsls	r1, r2, #2
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	440a      	add	r2, r1
 8001882:	00d2      	lsls	r2, r2, #3
 8001884:	4402      	add	r2, r0
 8001886:	4413      	add	r3, r2
 8001888:	f993 3000 	ldrsb.w	r3, [r3]
 800188c:	461a      	mov	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	3301      	adds	r3, #1
 800189a:	4817      	ldr	r0, [pc, #92]	; (80018f8 <moveAble+0x98>)
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	0091      	lsls	r1, r2, #2
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	440a      	add	r2, r1
 80018a4:	00d2      	lsls	r2, r2, #3
 80018a6:	4402      	add	r2, r0
 80018a8:	4413      	add	r3, r2
 80018aa:	f993 3000 	ldrsb.w	r3, [r3]
 80018ae:	461a      	mov	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
    	//check if it is at the buttom
    	if(y>=(HEIGHT-1)) return 0;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b1c      	cmp	r3, #28
 80018ba:	dd01      	ble.n	80018c0 <moveAble+0x60>
 80018bc:	2300      	movs	r3, #0
 80018be:	e015      	b.n	80018ec <moveAble+0x8c>
    	//check if there is another piece under the current one
    	if(tetrisBoard[y+1][x]!=V_BGND)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	490d      	ldr	r1, [pc, #52]	; (80018fc <moveAble+0x9c>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4413      	add	r3, r2
 80018d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <moveAble+0x7e>
    		return 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	e006      	b.n	80018ec <moveAble+0x8c>
	for(int i=0;i<4;i++){
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3301      	adds	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	ddc4      	ble.n	8001874 <moveAble+0x14>
	}
	return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3724      	adds	r7, #36	; 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	0800b3f0 	.word	0x0800b3f0
 80018fc:	20000228 	.word	0x20000228

08001900 <pieceOverlapped>:

int  pieceOverlapped(){
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e03c      	b.n	8001986 <pieceOverlapped+0x86>
    	int x = piece[curPiece][curR][i*2]+curX;
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <pieceOverlapped+0x98>)
 800190e:	6819      	ldr	r1, [r3, #0]
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <pieceOverlapped+0x9c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4821      	ldr	r0, [pc, #132]	; (80019a0 <pieceOverlapped+0xa0>)
 800191a:	0089      	lsls	r1, r1, #2
 800191c:	440a      	add	r2, r1
 800191e:	00d2      	lsls	r2, r2, #3
 8001920:	4402      	add	r2, r0
 8001922:	4413      	add	r3, r2
 8001924:	f993 3000 	ldrsb.w	r3, [r3]
 8001928:	461a      	mov	r2, r3
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <pieceOverlapped+0xa4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
    	int y = piece[curPiece][curR][i*2+1]+curY;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <pieceOverlapped+0x98>)
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <pieceOverlapped+0x9c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	3301      	adds	r3, #1
 8001940:	4817      	ldr	r0, [pc, #92]	; (80019a0 <pieceOverlapped+0xa0>)
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	440a      	add	r2, r1
 8001946:	00d2      	lsls	r2, r2, #3
 8001948:	4402      	add	r2, r0
 800194a:	4413      	add	r3, r2
 800194c:	f993 3000 	ldrsb.w	r3, [r3]
 8001950:	461a      	mov	r2, r3
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <pieceOverlapped+0xa8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	607b      	str	r3, [r7, #4]
    	//check if there is another piece under the current one
    	if(y<0) continue;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0e      	blt.n	800197e <pieceOverlapped+0x7e>
    	if(tetrisBoard[y+1][x]!=V_BGND)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4911      	ldr	r1, [pc, #68]	; (80019ac <pieceOverlapped+0xac>)
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4413      	add	r3, r2
 8001972:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <pieceOverlapped+0x80>
    		return 1;
 800197a:	2301      	movs	r3, #1
 800197c:	e007      	b.n	800198e <pieceOverlapped+0x8e>
    	if(y<0) continue;
 800197e:	bf00      	nop
	for(int i=0;i<4;i++){
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b03      	cmp	r3, #3
 800198a:	ddbf      	ble.n	800190c <pieceOverlapped+0xc>
	}
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	200006f0 	.word	0x200006f0
 800199c:	200006ec 	.word	0x200006ec
 80019a0:	0800b3f0 	.word	0x0800b3f0
 80019a4:	200006e4 	.word	0x200006e4
 80019a8:	200006e8 	.word	0x200006e8
 80019ac:	20000228 	.word	0x20000228

080019b0 <drawPiece>:

void  drawPiece(int pieceNum,int pieceRotation,int locX,int locY,int color){
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b08b      	sub	sp, #44	; 0x2c
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++){
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e048      	b.n	8001a56 <drawPiece+0xa6>
    	int x = piece[pieceNum][pieceRotation][i*2]+locX;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4827      	ldr	r0, [pc, #156]	; (8001a68 <drawPiece+0xb8>)
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	0091      	lsls	r1, r2, #2
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	440a      	add	r2, r1
 80019d2:	00d2      	lsls	r2, r2, #3
 80019d4:	4402      	add	r2, r0
 80019d6:	4413      	add	r3, r2
 80019d8:	f993 3000 	ldrsb.w	r3, [r3]
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
    	int y = piece[pieceNum][pieceRotation][i*2+1]+locY;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	3301      	adds	r3, #1
 80019ea:	481f      	ldr	r0, [pc, #124]	; (8001a68 <drawPiece+0xb8>)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	0091      	lsls	r1, r2, #2
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	440a      	add	r2, r1
 80019f4:	00d2      	lsls	r2, r2, #3
 80019f6:	4402      	add	r2, r0
 80019f8:	4413      	add	r3, r2
 80019fa:	f993 3000 	ldrsb.w	r3, [r3]
 80019fe:	461a      	mov	r2, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
    	if(y>=0){
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db21      	blt.n	8001a50 <drawPiece+0xa0>
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b218      	sxth	r0, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b219      	sxth	r1, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b21a      	sxth	r2, r3
    	    		      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,color);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	3302      	adds	r3, #2
    	    FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b21c      	sxth	r4, r3
 8001a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	f000 fbe3 	bl	8002216 <FillRectangle>
	for(int i=0;i<4;i++){
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	3301      	adds	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	ddb3      	ble.n	80019c4 <drawPiece+0x14>
    	}
	}
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	0800b3f0 	.word	0x0800b3f0

08001a6c <drawBoard>:

void drawBoard(){
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af02      	add	r7, sp, #8
	for(int y=0;y<HEIGHT;y++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e037      	b.n	8001ae8 <drawBoard+0x7c>
		for(int x=0;x<WIDTH;x++){
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	e02e      	b.n	8001adc <drawBoard+0x70>
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b218      	sxth	r0, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b219      	sxth	r1, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b21c      	sxth	r4, r3
					      BOARD_X+(x+2)*SIZE-1,BOARD_Y+(y+2)*SIZE-1,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3302      	adds	r3, #2
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21d      	sxth	r5, r3
					       tetrisBoard[y][x]);
 8001ab6:	4e10      	ldr	r6, [pc, #64]	; (8001af8 <drawBoard+0x8c>)
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
			FillRectangle(BOARD_X+(x+1)*SIZE,BOARD_Y+(y+1)*SIZE,
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	462b      	mov	r3, r5
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	f000 fba0 	bl	8002216 <FillRectangle>
		for(int x=0;x<WIDTH;x++){
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	ddcd      	ble.n	8001a7e <drawBoard+0x12>
	for(int y=0;y<HEIGHT;y++){
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b1d      	cmp	r3, #29
 8001aec:	ddc4      	ble.n	8001a78 <drawBoard+0xc>
		}
	}
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	20000228 	.word	0x20000228

08001afc <checkRows>:

void checkRows(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
	int addedScore = 100;
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	617b      	str	r3, [r7, #20]
	int y,x,yy;
	int flag;

	for(y=HEIGHT-1;y>=0;y--){
 8001b06:	231d      	movs	r3, #29
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	e065      	b.n	8001bd8 <checkRows+0xdc>
		flag = 1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	607b      	str	r3, [r7, #4]
		//check current row if all filled
		for(x=0;x<WIDTH;x++){
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e011      	b.n	8001b3a <checkRows+0x3e>
			if(tetrisBoard[y][x]==V_BGND){
 8001b16:	4934      	ldr	r1, [pc, #208]	; (8001be8 <checkRows+0xec>)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <checkRows+0x38>
				flag = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
				break;
 8001b32:	e005      	b.n	8001b40 <checkRows+0x44>
		for(x=0;x<WIDTH;x++){
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3301      	adds	r3, #1
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	ddea      	ble.n	8001b16 <checkRows+0x1a>
			}
		}
		if(flag){
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d045      	beq.n	8001bd2 <checkRows+0xd6>
			score += addedScore;  //increase score
 8001b46:	4b29      	ldr	r3, [pc, #164]	; (8001bec <checkRows+0xf0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a27      	ldr	r2, [pc, #156]	; (8001bec <checkRows+0xf0>)
 8001b50:	6013      	str	r3, [r2, #0]
			addedScore *=2;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
			//Bunch pieces down
			for(yy=y-1;yy>=0;yy--){
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	e020      	b.n	8001ba2 <checkRows+0xa6>
			   for(x=0;x<WIDTH;x++){
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e017      	b.n	8001b96 <checkRows+0x9a>
				   tetrisBoard[yy+1][x] = tetrisBoard[yy][x];
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	481f      	ldr	r0, [pc, #124]	; (8001be8 <checkRows+0xec>)
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	440b      	add	r3, r1
 8001b7a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001b7e:	481a      	ldr	r0, [pc, #104]	; (8001be8 <checkRows+0xec>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			   for(x=0;x<WIDTH;x++){
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	dde4      	ble.n	8001b66 <checkRows+0x6a>
			for(yy=y-1;yy>=0;yy--){
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	dadb      	bge.n	8001b60 <checkRows+0x64>
			   }
			}
			for(x=0;x<WIDTH;x++){
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e007      	b.n	8001bbe <checkRows+0xc2>
				   tetrisBoard[0][x] = V_BGND;
 8001bae:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <checkRows+0xec>)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(x=0;x<WIDTH;x++){
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	ddf4      	ble.n	8001bae <checkRows+0xb2>
			}
			y = HEIGHT; // recheck from bottom
 8001bc4:	231e      	movs	r3, #30
 8001bc6:	613b      	str	r3, [r7, #16]
			drawBoard();
 8001bc8:	f7ff ff50 	bl	8001a6c <drawBoard>
			tetrisDelay(200);
 8001bcc:	20c8      	movs	r0, #200	; 0xc8
 8001bce:	f7fe fae3 	bl	8000198 <tetrisDelay>
	for(y=HEIGHT-1;y>=0;y--){
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da96      	bge.n	8001b0c <checkRows+0x10>
		}
	}
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000228 	.word	0x20000228
 8001bec:	200006d8 	.word	0x200006d8

08001bf0 <ClearScreen>:

uint8_t VGA_obuffer[VGA_FULL];
uint8_t VGA_buffer[VGA_VBUFFER][VGA_LBUFFER];
VGA_t VGA;

void ClearScreen(VGA_COLOR color){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
	int i,j;
	for(j=0;j<VGA_VBUFFER;j++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	e015      	b.n	8001c2c <ClearScreen+0x3c>
		for(i=0;i<VGA_LBUFFER;i++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	e00c      	b.n	8001c20 <ClearScreen+0x30>
			VGA_buffer[j][i]= color;
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <ClearScreen+0x50>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2164      	movs	r1, #100	; 0x64
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	441a      	add	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4413      	add	r3, r2
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	701a      	strb	r2, [r3, #0]
		for(i=0;i<VGA_LBUFFER;i++){
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b63      	cmp	r3, #99	; 0x63
 8001c24:	ddef      	ble.n	8001c06 <ClearScreen+0x16>
	for(j=0;j<VGA_VBUFFER;j++)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b4a      	cmp	r3, #74	; 0x4a
 8001c30:	dde6      	ble.n	8001c00 <ClearScreen+0x10>
	}
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000efc 	.word	0x20000efc

08001c44 <DrawPixel>:

void DrawPixel(int16_t x, int16_t y, VGA_COLOR color) {
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	70fb      	strb	r3, [r7, #3]
	if ((x <0) || (y <0)||
 8001c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db18      	blt.n	8001c90 <DrawPixel+0x4c>
 8001c5e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db14      	blt.n	8001c90 <DrawPixel+0x4c>
 8001c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6a:	2b63      	cmp	r3, #99	; 0x63
 8001c6c:	dc10      	bgt.n	8001c90 <DrawPixel+0x4c>
	    (x >= VGA_WIDTH) || (y >= VGA_HEIGHT)) {
 8001c6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c72:	2b48      	cmp	r3, #72	; 0x48
 8001c74:	dc0c      	bgt.n	8001c90 <DrawPixel+0x4c>
		/* Error */
		return;
	}
	/* Set color */
	VGA_buffer[y][x]=color;
 8001c76:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c7e:	4907      	ldr	r1, [pc, #28]	; (8001c9c <DrawPixel+0x58>)
 8001c80:	2064      	movs	r0, #100	; 0x64
 8001c82:	fb00 f202 	mul.w	r2, r0, r2
 8001c86:	440a      	add	r2, r1
 8001c88:	4413      	add	r3, r2
 8001c8a:	78fa      	ldrb	r2, [r7, #3]
 8001c8c:	701a      	strb	r2, [r3, #0]
 8001c8e:	e000      	b.n	8001c92 <DrawPixel+0x4e>
		return;
 8001c90:	bf00      	nop
}
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000efc 	.word	0x20000efc

08001ca0 <DrawLine>:

void DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, VGA_COLOR c) {
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	80fb      	strh	r3, [r7, #6]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80bb      	strh	r3, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	803b      	strh	r3, [r7, #0]
	}
	if (y1 >= VGA_HEIGHT) {
		y1 = VGA_HEIGHT - 1;
	}
*/
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001cbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	da05      	bge.n	8001cd6 <DrawLine+0x36>
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	e004      	b.n	8001ce0 <DrawLine+0x40>
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001ce2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ce6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	da05      	bge.n	8001cfa <DrawLine+0x5a>
 8001cee:	883a      	ldrh	r2, [r7, #0]
 8001cf0:	88bb      	ldrh	r3, [r7, #4]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	e004      	b.n	8001d04 <DrawLine+0x64>
 8001cfa:	88ba      	ldrh	r2, [r7, #4]
 8001cfc:	883b      	ldrh	r3, [r7, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8001d06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	da01      	bge.n	8001d16 <DrawLine+0x76>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e001      	b.n	8001d1a <DrawLine+0x7a>
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8001d1c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d20:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	da01      	bge.n	8001d2c <DrawLine+0x8c>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e001      	b.n	8001d30 <DrawLine+0x90>
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8001d32:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dd06      	ble.n	8001d4c <DrawLine+0xac>
 8001d3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d42:	0fda      	lsrs	r2, r3, #31
 8001d44:	4413      	add	r3, r2
 8001d46:	105b      	asrs	r3, r3, #1
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	e006      	b.n	8001d5a <DrawLine+0xba>
 8001d4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d50:	0fda      	lsrs	r2, r3, #31
 8001d52:	4413      	add	r3, r2
 8001d54:	105b      	asrs	r3, r3, #1
 8001d56:	425b      	negs	r3, r3
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001d5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d130      	bne.n	8001dc6 <DrawLine+0x126>
		if (y1 < y0) {
 8001d64:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	da05      	bge.n	8001d7c <DrawLine+0xdc>
			tmp = y1;
 8001d70:	883b      	ldrh	r3, [r7, #0]
 8001d72:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001d74:	88bb      	ldrh	r3, [r7, #4]
 8001d76:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001d78:	893b      	ldrh	r3, [r7, #8]
 8001d7a:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001d7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	da05      	bge.n	8001d94 <DrawLine+0xf4>
			tmp = x1;
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001d90:	893b      	ldrh	r3, [r7, #8]
 8001d92:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	82bb      	strh	r3, [r7, #20]
 8001d98:	e00e      	b.n	8001db8 <DrawLine+0x118>
			DrawPixel(x0, i, c);
 8001d9a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d9e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff4c 	bl	8001c44 <DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001dac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	82bb      	strh	r3, [r7, #20]
 8001db8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001dbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	ddea      	ble.n	8001d9a <DrawLine+0xfa>
		}

		/* Return from function */
		return;
 8001dc4:	e06e      	b.n	8001ea4 <DrawLine+0x204>
	}

	if (dy == 0) {
 8001dc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d130      	bne.n	8001e30 <DrawLine+0x190>
		if (y1 < y0) {
 8001dce:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001dd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	da05      	bge.n	8001de6 <DrawLine+0x146>
			tmp = y1;
 8001dda:	883b      	ldrh	r3, [r7, #0]
 8001ddc:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001de2:	893b      	ldrh	r3, [r7, #8]
 8001de4:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001de6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001dea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	da05      	bge.n	8001dfe <DrawLine+0x15e>
			tmp = x1;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dfa:	893b      	ldrh	r3, [r7, #8]
 8001dfc:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	82bb      	strh	r3, [r7, #20]
 8001e02:	e00e      	b.n	8001e22 <DrawLine+0x182>
			DrawPixel(i, y0, c);
 8001e04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff17 	bl	8001c44 <DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	82bb      	strh	r3, [r7, #20]
 8001e22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	ddea      	ble.n	8001e04 <DrawLine+0x164>
		}

		/* Return from function */
		return;
 8001e2e:	e039      	b.n	8001ea4 <DrawLine+0x204>
	}

	while (1) {
		DrawPixel(x0, y0, c);
 8001e30:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001e34:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff01 	bl	8001c44 <DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001e42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d105      	bne.n	8001e5a <DrawLine+0x1ba>
 8001e4e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e52:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d023      	beq.n	8001ea2 <DrawLine+0x202>
			break;
		}
		e2 = err;
 8001e5a:	8afb      	ldrh	r3, [r7, #22]
 8001e5c:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001e5e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e66:	425b      	negs	r3, r3
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dd09      	ble.n	8001e80 <DrawLine+0x1e0>
			err -= dy;
 8001e6c:	8afa      	ldrh	r2, [r7, #22]
 8001e6e:	8a3b      	ldrh	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001e76:	88fa      	ldrh	r2, [r7, #6]
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8001e80:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dad1      	bge.n	8001e30 <DrawLine+0x190>
			err += dx;
 8001e8c:	8afa      	ldrh	r2, [r7, #22]
 8001e8e:	8a7b      	ldrh	r3, [r7, #18]
 8001e90:	4413      	add	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001e96:	88ba      	ldrh	r2, [r7, #4]
 8001e98:	89bb      	ldrh	r3, [r7, #12]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	80bb      	strh	r3, [r7, #4]
		DrawPixel(x0, y0, c);
 8001ea0:	e7c6      	b.n	8001e30 <DrawLine+0x190>
			break;
 8001ea2:	bf00      	nop
		}
	}
}
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
	...

08001eac <WriteChar>:

char WriteChar(char ch, FontDef Font, VGA_COLOR color) {
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	1d38      	adds	r0, r7, #4
 8001eb6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4623      	mov	r3, r4
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	2b1f      	cmp	r3, #31
 8001ec8:	d902      	bls.n	8001ed0 <WriteChar+0x24>
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b7e      	cmp	r3, #126	; 0x7e
 8001ece:	d901      	bls.n	8001ed4 <WriteChar+0x28>
        return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e06d      	b.n	8001fb0 <WriteChar+0x104>

    // Check remaining space on current line
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <WriteChar+0x10c>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	793b      	ldrb	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	dc06      	bgt.n	8001ef0 <WriteChar+0x44>
        VGA_HEIGHT < (VGA.CurrentY + Font.FontHeight))
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <WriteChar+0x10c>)
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	797b      	ldrb	r3, [r7, #5]
 8001eea:	4413      	add	r3, r2
    if (VGA_WIDTH < (VGA.CurrentX + Font.FontWidth) ||
 8001eec:	2b49      	cmp	r3, #73	; 0x49
 8001eee:	dd01      	ble.n	8001ef4 <WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e05d      	b.n	8001fb0 <WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e04c      	b.n	8001f94 <WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	3b20      	subs	r3, #32
 8001f00:	7979      	ldrb	r1, [r7, #5]
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4619      	mov	r1, r3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	e034      	b.n	8001f84 <WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d012      	beq.n	8001f50 <WriteChar+0xa4>
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR) color);
 8001f2a:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <WriteChar+0x10c>)
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b218      	sxth	r0, r3
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <WriteChar+0x10c>)
 8001f3a:	885a      	ldrh	r2, [r3, #2]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	7bba      	ldrb	r2, [r7, #14]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7ff fe7b 	bl	8001c44 <DrawPixel>
 8001f4e:	e016      	b.n	8001f7e <WriteChar+0xd2>
            } else {
                DrawPixel(VGA.CurrentX + j, (VGA.CurrentY + i), (VGA_COLOR)!color);
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <WriteChar+0x10c>)
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	b218      	sxth	r0, r3
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <WriteChar+0x10c>)
 8001f60:	885a      	ldrh	r2, [r3, #2]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	b219      	sxth	r1, r3
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f7ff fe63 	bl	8001c44 <DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	793b      	ldrb	r3, [r7, #4]
 8001f86:	461a      	mov	r2, r3
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d3c5      	bcc.n	8001f1a <WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	797b      	ldrb	r3, [r7, #5]
 8001f96:	461a      	mov	r2, r3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d3ad      	bcc.n	8001efa <WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    VGA.CurrentX += Font.FontWidth;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <WriteChar+0x10c>)
 8001fa0:	881a      	ldrh	r2, [r3, #0]
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <WriteChar+0x10c>)
 8001fac:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3724      	adds	r7, #36	; 0x24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	20002c48 	.word	0x20002c48

08001fbc <WriteString>:

char WriteString(char* str, FontDef Font, VGA_COLOR color) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	1d38      	adds	r0, r7, #4
 8001fc6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001fca:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001fcc:	e012      	b.n	8001ff4 <WriteString+0x38>
        if (WriteChar(*str, Font, color) != *str) {
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	7818      	ldrb	r0, [r3, #0]
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	1d3a      	adds	r2, r7, #4
 8001fd6:	ca06      	ldmia	r2, {r1, r2}
 8001fd8:	f7ff ff68 	bl	8001eac <WriteChar>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d002      	beq.n	8001fee <WriteString+0x32>
            // Char could not be written
            return *str;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	e008      	b.n	8002000 <WriteString+0x44>
        }

        // Next char
        str++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e8      	bne.n	8001fce <WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <SetCursor>:

// Position the cursor
void SetCursor(int16_t x, int16_t y) {
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	80fb      	strh	r3, [r7, #6]
 8002014:	4613      	mov	r3, r2
 8002016:	80bb      	strh	r3, [r7, #4]
	if((x<0)||(x>=VGA_WIDTH))
 8002018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db03      	blt.n	8002028 <SetCursor+0x20>
 8002020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002024:	2b63      	cmp	r3, #99	; 0x63
 8002026:	dd03      	ble.n	8002030 <SetCursor+0x28>
	    VGA.CurrentX = 0;
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <SetCursor+0x58>)
 800202a:	2200      	movs	r2, #0
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	e002      	b.n	8002036 <SetCursor+0x2e>
	else
		VGA.CurrentX = x;
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <SetCursor+0x58>)
 8002034:	801a      	strh	r2, [r3, #0]
	if((y<0)||(y>=VGA_HEIGHT))
 8002036:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db03      	blt.n	8002046 <SetCursor+0x3e>
 800203e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002042:	2b48      	cmp	r3, #72	; 0x48
 8002044:	dd03      	ble.n	800204e <SetCursor+0x46>
	    VGA.CurrentY = 0;
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <SetCursor+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	805a      	strh	r2, [r3, #2]
 800204c:	e003      	b.n	8002056 <SetCursor+0x4e>
	else
        VGA.CurrentY = y;
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <SetCursor+0x58>)
 8002052:	805a      	strh	r2, [r3, #2]
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20002c48 	.word	0x20002c48

08002064 <DrawCircle>:
    }

    return;
}

void DrawCircle(int16_t par_x,int16_t par_y,int16_t par_r,VGA_COLOR par_color) {
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	4604      	mov	r4, r0
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	80fb      	strh	r3, [r7, #6]
 8002076:	4603      	mov	r3, r0
 8002078:	80bb      	strh	r3, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
 800207e:	4613      	mov	r3, r2
 8002080:	707b      	strb	r3, [r7, #1]
  int32_t x = -par_r;
 8002082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002086:	425b      	negs	r3, r3
 8002088:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 800208e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002092:	f1c3 0301 	rsb	r3, r3, #1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= VGA_WIDTH || par_y >= VGA_HEIGHT) {
 800209a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800209e:	2b63      	cmp	r3, #99	; 0x63
 80020a0:	dc6e      	bgt.n	8002180 <DrawCircle+0x11c>
 80020a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020a6:	2b48      	cmp	r3, #72	; 0x48
 80020a8:	dc6a      	bgt.n	8002180 <DrawCircle+0x11c>
    return;
  }

    do {
      DrawPixel(par_x - x, par_y + y, par_color);
 80020aa:	88fa      	ldrh	r2, [r7, #6]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b218      	sxth	r0, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	787a      	ldrb	r2, [r7, #1]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f7ff fdbd 	bl	8001c44 <DrawPixel>
      DrawPixel(par_x + x, par_y + y, par_color);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4413      	add	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	b218      	sxth	r0, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	787a      	ldrb	r2, [r7, #1]
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7ff fdad 	bl	8001c44 <DrawPixel>
      DrawPixel(par_x + x, par_y - y, par_color);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b218      	sxth	r0, r3
 80020f6:	88ba      	ldrh	r2, [r7, #4]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b21b      	sxth	r3, r3
 8002102:	787a      	ldrb	r2, [r7, #1]
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff fd9d 	bl	8001c44 <DrawPixel>
      DrawPixel(par_x - x, par_y - y, par_color);
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	b29b      	uxth	r3, r3
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b29b      	uxth	r3, r3
 8002114:	b218      	sxth	r0, r3
 8002116:	88ba      	ldrh	r2, [r7, #4]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	b29b      	uxth	r3, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	b29b      	uxth	r3, r3
 8002120:	b21b      	sxth	r3, r3
 8002122:	787a      	ldrb	r2, [r7, #1]
 8002124:	4619      	mov	r1, r3
 8002126:	f7ff fd8d 	bl	8001c44 <DrawPixel>
        e2 = err;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	429a      	cmp	r2, r3
 8002134:	dc13      	bgt.n	800215e <DrawCircle+0xfa>
            y++;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	3301      	adds	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	3301      	adds	r3, #1
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	425b      	negs	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	429a      	cmp	r2, r3
 8002150:	d105      	bne.n	800215e <DrawCircle+0xfa>
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	429a      	cmp	r2, r3
 8002158:	dc01      	bgt.n	800215e <DrawCircle+0xfa>
              e2 = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	429a      	cmp	r2, r3
 8002164:	dd08      	ble.n	8002178 <DrawCircle+0x114>
          x++;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	3301      	adds	r3, #1
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	dd95      	ble.n	80020aa <DrawCircle+0x46>

    return;
 800217e:	e000      	b.n	8002182 <DrawCircle+0x11e>
    return;
 8002180:	bf00      	nop
}
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <DrawRectangle>:

void DrawRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af02      	add	r7, sp, #8
 800218e:	4604      	mov	r4, r0
 8002190:	4608      	mov	r0, r1
 8002192:	4611      	mov	r1, r2
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	80fb      	strh	r3, [r7, #6]
 800219a:	4603      	mov	r3, r0
 800219c:	80bb      	strh	r3, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
 80021a2:	4613      	mov	r3, r2
 80021a4:	803b      	strh	r3, [r7, #0]
  DrawLine(x1,y1,x2,y1,color);
 80021a6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80021aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80021b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80021b6:	7e3b      	ldrb	r3, [r7, #24]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4623      	mov	r3, r4
 80021bc:	f7ff fd70 	bl	8001ca0 <DrawLine>
  DrawLine(x2,y1,x2,y2,color);
 80021c0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80021c4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80021cc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80021d0:	7e3b      	ldrb	r3, [r7, #24]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	4623      	mov	r3, r4
 80021d6:	f7ff fd63 	bl	8001ca0 <DrawLine>
  DrawLine(x2,y2,x1,y2,color);
 80021da:	f9b7 4000 	ldrsh.w	r4, [r7]
 80021de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021e2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80021e6:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80021ea:	7e3b      	ldrb	r3, [r7, #24]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4623      	mov	r3, r4
 80021f0:	f7ff fd56 	bl	8001ca0 <DrawLine>
  DrawLine(x1,y2,x1,y1,color);
 80021f4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80021f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021fc:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002200:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002204:	7e3b      	ldrb	r3, [r7, #24]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	4623      	mov	r3, r4
 800220a:	f7ff fd49 	bl	8001ca0 <DrawLine>
  return;
 800220e:	bf00      	nop
}
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}

08002216 <FillRectangle>:

void FillRectangle(int16_t x1, int16_t y1, int16_t x2, int16_t y2, VGA_COLOR color) {
 8002216:	b590      	push	{r4, r7, lr}
 8002218:	b087      	sub	sp, #28
 800221a:	af02      	add	r7, sp, #8
 800221c:	4604      	mov	r4, r0
 800221e:	4608      	mov	r0, r1
 8002220:	4611      	mov	r1, r2
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	80fb      	strh	r3, [r7, #6]
 8002228:	4603      	mov	r3, r0
 800222a:	80bb      	strh	r3, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002238:	2b63      	cmp	r3, #99	; 0x63
 800223a:	dc2a      	bgt.n	8002292 <FillRectangle+0x7c>
 800223c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002240:	2b48      	cmp	r3, #72	; 0x48
 8002242:	dc26      	bgt.n	8002292 <FillRectangle+0x7c>
    if(x2 >= VGA_WIDTH) x2 = VGA_WIDTH-1;
 8002244:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002248:	2b63      	cmp	r3, #99	; 0x63
 800224a:	dd01      	ble.n	8002250 <FillRectangle+0x3a>
 800224c:	2363      	movs	r3, #99	; 0x63
 800224e:	807b      	strh	r3, [r7, #2]
    if(y2 >= VGA_HEIGHT) y2 = VGA_HEIGHT-1;
 8002250:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002254:	2b48      	cmp	r3, #72	; 0x48
 8002256:	dd01      	ble.n	800225c <FillRectangle+0x46>
 8002258:	2348      	movs	r3, #72	; 0x48
 800225a:	803b      	strh	r3, [r7, #0]
    for(int yy = y1; yy <= y2; yy++) {
 800225c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e010      	b.n	8002286 <FillRectangle+0x70>
    	DrawLine(x1,yy,x2,yy,color);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	b219      	sxth	r1, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	b21c      	sxth	r4, r3
 800226c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002270:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002274:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	4623      	mov	r3, r4
 800227c:	f7ff fd10 	bl	8001ca0 <DrawLine>
    for(int yy = y1; yy <= y2; yy++) {
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	f9b7 3000 	ldrsh.w	r3, [r7]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	dde9      	ble.n	8002264 <FillRectangle+0x4e>
 8002290:	e000      	b.n	8002294 <FillRectangle+0x7e>
    if((x1 >= VGA_WIDTH) || (y1 >= VGA_HEIGHT)) return;
 8002292:	bf00      	nop
    }
}
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bd90      	pop	{r4, r7, pc}

0800229a <FillCircle>:

void FillCircle(int16_t x0, int16_t y0, int16_t r, VGA_COLOR c) {
 800229a:	b590      	push	{r4, r7, lr}
 800229c:	b089      	sub	sp, #36	; 0x24
 800229e:	af02      	add	r7, sp, #8
 80022a0:	4604      	mov	r4, r0
 80022a2:	4608      	mov	r0, r1
 80022a4:	4611      	mov	r1, r2
 80022a6:	461a      	mov	r2, r3
 80022a8:	4623      	mov	r3, r4
 80022aa:	80fb      	strh	r3, [r7, #6]
 80022ac:	4603      	mov	r3, r0
 80022ae:	80bb      	strh	r3, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80022b8:	887b      	ldrh	r3, [r7, #2]
 80022ba:	f1c3 0301 	rsb	r3, r3, #1
 80022be:	b29b      	uxth	r3, r3
 80022c0:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	461a      	mov	r2, r3
 80022ca:	03d2      	lsls	r2, r2, #15
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	81fb      	strh	r3, [r7, #14]

    DrawPixel(x0, y0 + r, c);
 80022dc:	88ba      	ldrh	r2, [r7, #4]
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	4413      	add	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	b219      	sxth	r1, r3
 80022e6:	787a      	ldrb	r2, [r7, #1]
 80022e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fca9 	bl	8001c44 <DrawPixel>
    DrawPixel(x0, y0 - r, c);
 80022f2:	88ba      	ldrh	r2, [r7, #4]
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b219      	sxth	r1, r3
 80022fc:	787a      	ldrb	r2, [r7, #1]
 80022fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fc9e 	bl	8001c44 <DrawPixel>
    DrawPixel(x0 + r, y0, c);
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	4413      	add	r3, r2
 800230e:	b29b      	uxth	r3, r3
 8002310:	b21b      	sxth	r3, r3
 8002312:	787a      	ldrb	r2, [r7, #1]
 8002314:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fc93 	bl	8001c44 <DrawPixel>
    DrawPixel(x0 - r, y0, c);
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b29b      	uxth	r3, r3
 8002326:	b21b      	sxth	r3, r3
 8002328:	787a      	ldrb	r2, [r7, #1]
 800232a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fc88 	bl	8001c44 <DrawPixel>
    DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b29b      	uxth	r3, r3
 800233c:	b218      	sxth	r0, r3
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	4413      	add	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	b21a      	sxth	r2, r3
 8002348:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800234c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	4623      	mov	r3, r4
 8002356:	f7ff fca3 	bl	8001ca0 <DrawLine>

    while (x < y) {
 800235a:	e089      	b.n	8002470 <FillCircle+0x1d6>
        if (f >= 0) {
 800235c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0e      	blt.n	8002382 <FillCircle+0xe8>
            y--;
 8002364:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29b      	uxth	r3, r3
 800236e:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8002370:	8a7b      	ldrh	r3, [r7, #18]
 8002372:	3302      	adds	r3, #2
 8002374:	b29b      	uxth	r3, r3
 8002376:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002378:	8afa      	ldrh	r2, [r7, #22]
 800237a:	8a7b      	ldrh	r3, [r7, #18]
 800237c:	4413      	add	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8002382:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002386:	b29b      	uxth	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	b29b      	uxth	r3, r3
 800238c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800238e:	8abb      	ldrh	r3, [r7, #20]
 8002390:	3302      	adds	r3, #2
 8002392:	b29b      	uxth	r3, r3
 8002394:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002396:	8afa      	ldrh	r2, [r7, #22]
 8002398:	8abb      	ldrh	r3, [r7, #20]
 800239a:	4413      	add	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	82fb      	strh	r3, [r7, #22]

        DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	8a3b      	ldrh	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b218      	sxth	r0, r3
 80023aa:	88ba      	ldrh	r2, [r7, #4]
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	4413      	add	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b219      	sxth	r1, r3
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	8a3b      	ldrh	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b21c      	sxth	r4, r3
 80023be:	88ba      	ldrh	r2, [r7, #4]
 80023c0:	89fb      	ldrh	r3, [r7, #14]
 80023c2:	4413      	add	r3, r2
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4613      	mov	r3, r2
 80023ce:	4622      	mov	r2, r4
 80023d0:	f7ff fc66 	bl	8001ca0 <DrawLine>
        DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	8a3b      	ldrh	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	b218      	sxth	r0, r3
 80023de:	88ba      	ldrh	r2, [r7, #4]
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b219      	sxth	r1, r3
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	8a3b      	ldrh	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	b21c      	sxth	r4, r3
 80023f2:	88ba      	ldrh	r2, [r7, #4]
 80023f4:	89fb      	ldrh	r3, [r7, #14]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b21a      	sxth	r2, r3
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	4622      	mov	r2, r4
 8002404:	f7ff fc4c 	bl	8001ca0 <DrawLine>

        DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	4413      	add	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	b218      	sxth	r0, r3
 8002412:	88ba      	ldrh	r2, [r7, #4]
 8002414:	8a3b      	ldrh	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	b219      	sxth	r1, r3
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	89fb      	ldrh	r3, [r7, #14]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	b21c      	sxth	r4, r3
 8002426:	88ba      	ldrh	r2, [r7, #4]
 8002428:	8a3b      	ldrh	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21a      	sxth	r2, r3
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	4622      	mov	r2, r4
 8002438:	f7ff fc32 	bl	8001ca0 <DrawLine>
        DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 800243c:	88fa      	ldrh	r2, [r7, #6]
 800243e:	89fb      	ldrh	r3, [r7, #14]
 8002440:	4413      	add	r3, r2
 8002442:	b29b      	uxth	r3, r3
 8002444:	b218      	sxth	r0, r3
 8002446:	88ba      	ldrh	r2, [r7, #4]
 8002448:	8a3b      	ldrh	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	b219      	sxth	r1, r3
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	b29b      	uxth	r3, r3
 8002458:	b21c      	sxth	r4, r3
 800245a:	88ba      	ldrh	r2, [r7, #4]
 800245c:	8a3b      	ldrh	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b29b      	uxth	r3, r3
 8002462:	b21a      	sxth	r2, r3
 8002464:	787b      	ldrb	r3, [r7, #1]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	4622      	mov	r2, r4
 800246c:	f7ff fc18 	bl	8001ca0 <DrawLine>
    while (x < y) {
 8002470:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002474:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002478:	429a      	cmp	r2, r3
 800247a:	f6ff af6f 	blt.w	800235c <FillCircle+0xc2>
    }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <ShowImage>:

void ShowImage(uint8_t *image,int16_t x,int16_t y,int16_t locX,int16_t locY){
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4603      	mov	r3, r0
 8002498:	817b      	strh	r3, [r7, #10]
 800249a:	460b      	mov	r3, r1
 800249c:	813b      	strh	r3, [r7, #8]
 800249e:	4613      	mov	r3, r2
 80024a0:	80fb      	strh	r3, [r7, #6]
    int16_t j,i;

    for(j=0;j<y;j++){
 80024a2:	2300      	movs	r3, #0
 80024a4:	82fb      	strh	r3, [r7, #22]
 80024a6:	e02e      	b.n	8002506 <ShowImage+0x7e>
    	for(i=0;i<x;i++){
 80024a8:	2300      	movs	r3, #0
 80024aa:	82bb      	strh	r3, [r7, #20]
 80024ac:	e01f      	b.n	80024ee <ShowImage+0x66>
    		DrawPixel(i+locX,j+locY,image[j*x+i]);
 80024ae:	8aba      	ldrh	r2, [r7, #20]
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4413      	add	r3, r2
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	b218      	sxth	r0, r3
 80024b8:	8afa      	ldrh	r2, [r7, #22]
 80024ba:	8c3b      	ldrh	r3, [r7, #32]
 80024bc:	4413      	add	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b219      	sxth	r1, r3
 80024c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024d2:	4413      	add	r3, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	f7ff fbb1 	bl	8001c44 <DrawPixel>
    	for(i=0;i<x;i++){
 80024e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	82bb      	strh	r3, [r7, #20]
 80024ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80024f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbd9      	blt.n	80024ae <ShowImage+0x26>
    for(j=0;j<y;j++){
 80024fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	b29b      	uxth	r3, r3
 8002504:	82fb      	strh	r3, [r7, #22]
 8002506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800250a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbca      	blt.n	80024a8 <ShowImage+0x20>
    	}
    }
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800251e:	490d      	ldr	r1, [pc, #52]	; (8002554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002534:	4c0a      	ldr	r4, [pc, #40]	; (8002560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002542:	f7fe fe97 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002546:	f002 fb0d 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800254a:	f7fd ffd7 	bl	80004fc <main>
  bx lr
 800254e:	4770      	bx	lr
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002558:	0800bd94 	.word	0x0800bd94
  ldr r2, =_sbss
 800255c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002560:	20002c60 	.word	0x20002c60

08002564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_2_IRQHandler>
	...

08002568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_Init+0x28>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <HAL_Init+0x28>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f000 f947 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	200f      	movs	r0, #15
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7fe fc80 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000

08002594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f95f 	bl	8002876 <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f000 f927 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000048 	.word	0x20000048
 80025ec:	20000058 	.word	0x20000058
 80025f0:	20000054 	.word	0x20000054

080025f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_IncTick+0x1c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_IncTick+0x20>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a03      	ldr	r2, [pc, #12]	; (8002614 <HAL_IncTick+0x20>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000058 	.word	0x20000058
 8002614:	20002c4c 	.word	0x20002c4c

08002618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <HAL_GetTick+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20002c4c 	.word	0x20002c4c

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff fff0 	bl	8002618 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffe0 	bl	8002618 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000058 	.word	0x20000058

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4906      	ldr	r1, [pc, #24]	; (800270c <__NVIC_EnableIRQ+0x34>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100

08002710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	; (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	; (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002764:	b480      	push	{r7}
 8002766:	b089      	sub	sp, #36	; 0x24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f1c3 0307 	rsb	r3, r3, #7
 800277e:	2b04      	cmp	r3, #4
 8002780:	bf28      	it	cs
 8002782:	2304      	movcs	r3, #4
 8002784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3304      	adds	r3, #4
 800278a:	2b06      	cmp	r3, #6
 800278c:	d902      	bls.n	8002794 <NVIC_EncodePriority+0x30>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3b03      	subs	r3, #3
 8002792:	e000      	b.n	8002796 <NVIC_EncodePriority+0x32>
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ac:	f04f 31ff 	mov.w	r1, #4294967295
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	43d9      	mvns	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027bc:	4313      	orrs	r3, r2
         );
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff90 	bl	8002710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff2d 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff42 	bl	80026bc <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff90 	bl	8002764 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5f 	bl	8002710 <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff35 	bl	80026d8 <__NVIC_EnableIRQ>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff ffa2 	bl	80027c8 <SysTick_Config>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e043      	b.n	800292e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_DMA_Init+0xa8>)
 80028ae:	4413      	add	r3, r2
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_DMA_Init+0xac>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <HAL_DMA_Init+0xb0>)
 80028c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	bffdfff8 	.word	0xbffdfff8
 800293c:	cccccccd 	.word	0xcccccccd
 8002940:	40020000 	.word	0x40020000

08002944 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_DMA_Start_IT+0x20>
 8002960:	2302      	movs	r3, #2
 8002962:	e04a      	b.n	80029fa <HAL_DMA_Start_IT+0xb6>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002972:	2b01      	cmp	r3, #1
 8002974:	d13a      	bne.n	80029ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fa30 	bl	8002e00 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 020e 	orr.w	r2, r2, #14
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0204 	bic.w	r2, r2, #4
 80029c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 020a 	orr.w	r2, r2, #10
 80029d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e005      	b.n	80029f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d008      	beq.n	8002a2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e020      	b.n	8002a6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 020e 	bic.w	r2, r2, #14
 8002a38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0201 	bic.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d005      	beq.n	8002a9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2204      	movs	r2, #4
 8002a92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	e051      	b.n	8002b3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 020e 	bic.w	r2, r2, #14
 8002aa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_DMA_Abort_IT+0xd0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d029      	beq.n	8002b18 <HAL_DMA_Abort_IT+0xa0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <HAL_DMA_Abort_IT+0xd4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d022      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x9c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <HAL_DMA_Abort_IT+0xd8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d01a      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x96>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_DMA_Abort_IT+0xdc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d012      	beq.n	8002b08 <HAL_DMA_Abort_IT+0x90>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_DMA_Abort_IT+0xe0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00a      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x8a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_DMA_Abort_IT+0xe4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d102      	bne.n	8002afc <HAL_DMA_Abort_IT+0x84>
 8002af6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002afa:	e00e      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b00:	e00b      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b06:	e008      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0c:	e005      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b12:	e002      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b14:	2310      	movs	r3, #16
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_Abort_IT+0xa2>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_DMA_Abort_IT+0xe8>)
 8002b1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
    } 
  }
  return status;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40020008 	.word	0x40020008
 8002b4c:	4002001c 	.word	0x4002001c
 8002b50:	40020030 	.word	0x40020030
 8002b54:	40020044 	.word	0x40020044
 8002b58:	40020058 	.word	0x40020058
 8002b5c:	4002006c 	.word	0x4002006c
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2204      	movs	r2, #4
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d04f      	beq.n	8002c2c <HAL_DMA_IRQHandler+0xc8>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04a      	beq.n	8002c2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a66      	ldr	r2, [pc, #408]	; (8002d54 <HAL_DMA_IRQHandler+0x1f0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d029      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xae>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <HAL_DMA_IRQHandler+0x1f4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xaa>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a63      	ldr	r2, [pc, #396]	; (8002d5c <HAL_DMA_IRQHandler+0x1f8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01a      	beq.n	8002c08 <HAL_DMA_IRQHandler+0xa4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a62      	ldr	r2, [pc, #392]	; (8002d60 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d012      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x9e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a60      	ldr	r2, [pc, #384]	; (8002d64 <HAL_DMA_IRQHandler+0x200>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00a      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x98>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5f      	ldr	r2, [pc, #380]	; (8002d68 <HAL_DMA_IRQHandler+0x204>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x92>
 8002bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bf4:	e00e      	b.n	8002c14 <HAL_DMA_IRQHandler+0xb0>
 8002bf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002bfa:	e00b      	b.n	8002c14 <HAL_DMA_IRQHandler+0xb0>
 8002bfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c00:	e008      	b.n	8002c14 <HAL_DMA_IRQHandler+0xb0>
 8002c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c06:	e005      	b.n	8002c14 <HAL_DMA_IRQHandler+0xb0>
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	e002      	b.n	8002c14 <HAL_DMA_IRQHandler+0xb0>
 8002c0e:	2340      	movs	r3, #64	; 0x40
 8002c10:	e000      	b.n	8002c14 <HAL_DMA_IRQHandler+0xb0>
 8002c12:	2304      	movs	r3, #4
 8002c14:	4a55      	ldr	r2, [pc, #340]	; (8002d6c <HAL_DMA_IRQHandler+0x208>)
 8002c16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8094 	beq.w	8002d4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c2a:	e08e      	b.n	8002d4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2202      	movs	r2, #2
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d056      	beq.n	8002cea <HAL_DMA_IRQHandler+0x186>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d051      	beq.n	8002cea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 020a 	bic.w	r2, r2, #10
 8002c62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a38      	ldr	r2, [pc, #224]	; (8002d54 <HAL_DMA_IRQHandler+0x1f0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d029      	beq.n	8002cca <HAL_DMA_IRQHandler+0x166>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a37      	ldr	r2, [pc, #220]	; (8002d58 <HAL_DMA_IRQHandler+0x1f4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d022      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x162>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <HAL_DMA_IRQHandler+0x1f8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d01a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x15c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <HAL_DMA_IRQHandler+0x1fc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d012      	beq.n	8002cba <HAL_DMA_IRQHandler+0x156>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <HAL_DMA_IRQHandler+0x200>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x150>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <HAL_DMA_IRQHandler+0x204>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d102      	bne.n	8002cae <HAL_DMA_IRQHandler+0x14a>
 8002ca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cac:	e00e      	b.n	8002ccc <HAL_DMA_IRQHandler+0x168>
 8002cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb2:	e00b      	b.n	8002ccc <HAL_DMA_IRQHandler+0x168>
 8002cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb8:	e008      	b.n	8002ccc <HAL_DMA_IRQHandler+0x168>
 8002cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cbe:	e005      	b.n	8002ccc <HAL_DMA_IRQHandler+0x168>
 8002cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc4:	e002      	b.n	8002ccc <HAL_DMA_IRQHandler+0x168>
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e000      	b.n	8002ccc <HAL_DMA_IRQHandler+0x168>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_DMA_IRQHandler+0x208>)
 8002cce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ce8:	e02f      	b.n	8002d4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	2208      	movs	r2, #8
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x1e8>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d023      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 020e 	bic.w	r2, r2, #14
 8002d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    }
  }
  return;
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
}
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40020008 	.word	0x40020008
 8002d58:	4002001c 	.word	0x4002001c
 8002d5c:	40020030 	.word	0x40020030
 8002d60:	40020044 	.word	0x40020044
 8002d64:	40020058 	.word	0x40020058
 8002d68:	4002006c 	.word	0x4002006c
 8002d6c:	40020000 	.word	0x40020000

08002d70 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_RegisterCallback+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e031      	b.n	8002df4 <HAL_DMA_RegisterCallback+0x84>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d121      	bne.n	8002de6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d81b      	bhi.n	8002de0 <HAL_DMA_RegisterCallback+0x70>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_DMA_RegisterCallback+0x40>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dc9 	.word	0x08002dc9
 8002db8:	08002dd1 	.word	0x08002dd1
 8002dbc:	08002dd9 	.word	0x08002dd9
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002dc6:	e010      	b.n	8002dea <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8002dce:	e00c      	b.n	8002dea <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8002dd6:	e008      	b.n	8002dea <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8002dde:	e004      	b.n	8002dea <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8002de4:	e001      	b.n	8002dea <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d108      	bne.n	8002e40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e3e:	e007      	b.n	8002e50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b08b      	sub	sp, #44	; 0x2c
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6e:	e169      	b.n	8003144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e70:	2201      	movs	r2, #1
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f040 8158 	bne.w	800313e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a9a      	ldr	r2, [pc, #616]	; (80030fc <HAL_GPIO_Init+0x2a0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d05e      	beq.n	8002f56 <HAL_GPIO_Init+0xfa>
 8002e98:	4a98      	ldr	r2, [pc, #608]	; (80030fc <HAL_GPIO_Init+0x2a0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d875      	bhi.n	8002f8a <HAL_GPIO_Init+0x12e>
 8002e9e:	4a98      	ldr	r2, [pc, #608]	; (8003100 <HAL_GPIO_Init+0x2a4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d058      	beq.n	8002f56 <HAL_GPIO_Init+0xfa>
 8002ea4:	4a96      	ldr	r2, [pc, #600]	; (8003100 <HAL_GPIO_Init+0x2a4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d86f      	bhi.n	8002f8a <HAL_GPIO_Init+0x12e>
 8002eaa:	4a96      	ldr	r2, [pc, #600]	; (8003104 <HAL_GPIO_Init+0x2a8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d052      	beq.n	8002f56 <HAL_GPIO_Init+0xfa>
 8002eb0:	4a94      	ldr	r2, [pc, #592]	; (8003104 <HAL_GPIO_Init+0x2a8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d869      	bhi.n	8002f8a <HAL_GPIO_Init+0x12e>
 8002eb6:	4a94      	ldr	r2, [pc, #592]	; (8003108 <HAL_GPIO_Init+0x2ac>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d04c      	beq.n	8002f56 <HAL_GPIO_Init+0xfa>
 8002ebc:	4a92      	ldr	r2, [pc, #584]	; (8003108 <HAL_GPIO_Init+0x2ac>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d863      	bhi.n	8002f8a <HAL_GPIO_Init+0x12e>
 8002ec2:	4a92      	ldr	r2, [pc, #584]	; (800310c <HAL_GPIO_Init+0x2b0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d046      	beq.n	8002f56 <HAL_GPIO_Init+0xfa>
 8002ec8:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_GPIO_Init+0x2b0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d85d      	bhi.n	8002f8a <HAL_GPIO_Init+0x12e>
 8002ece:	2b12      	cmp	r3, #18
 8002ed0:	d82a      	bhi.n	8002f28 <HAL_GPIO_Init+0xcc>
 8002ed2:	2b12      	cmp	r3, #18
 8002ed4:	d859      	bhi.n	8002f8a <HAL_GPIO_Init+0x12e>
 8002ed6:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <HAL_GPIO_Init+0x80>)
 8002ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002edc:	08002f57 	.word	0x08002f57
 8002ee0:	08002f31 	.word	0x08002f31
 8002ee4:	08002f43 	.word	0x08002f43
 8002ee8:	08002f85 	.word	0x08002f85
 8002eec:	08002f8b 	.word	0x08002f8b
 8002ef0:	08002f8b 	.word	0x08002f8b
 8002ef4:	08002f8b 	.word	0x08002f8b
 8002ef8:	08002f8b 	.word	0x08002f8b
 8002efc:	08002f8b 	.word	0x08002f8b
 8002f00:	08002f8b 	.word	0x08002f8b
 8002f04:	08002f8b 	.word	0x08002f8b
 8002f08:	08002f8b 	.word	0x08002f8b
 8002f0c:	08002f8b 	.word	0x08002f8b
 8002f10:	08002f8b 	.word	0x08002f8b
 8002f14:	08002f8b 	.word	0x08002f8b
 8002f18:	08002f8b 	.word	0x08002f8b
 8002f1c:	08002f8b 	.word	0x08002f8b
 8002f20:	08002f39 	.word	0x08002f39
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	4a79      	ldr	r2, [pc, #484]	; (8003110 <HAL_GPIO_Init+0x2b4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f2e:	e02c      	b.n	8002f8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	623b      	str	r3, [r7, #32]
          break;
 8002f36:	e029      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	623b      	str	r3, [r7, #32]
          break;
 8002f40:	e024      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	3308      	adds	r3, #8
 8002f48:	623b      	str	r3, [r7, #32]
          break;
 8002f4a:	e01f      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	330c      	adds	r3, #12
 8002f52:	623b      	str	r3, [r7, #32]
          break;
 8002f54:	e01a      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	623b      	str	r3, [r7, #32]
          break;
 8002f62:	e013      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	611a      	str	r2, [r3, #16]
          break;
 8002f76:	e009      	b.n	8002f8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	615a      	str	r2, [r3, #20]
          break;
 8002f82:	e003      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
          break;
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x130>
          break;
 8002f8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2bff      	cmp	r3, #255	; 0xff
 8002f90:	d801      	bhi.n	8002f96 <HAL_GPIO_Init+0x13a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	e001      	b.n	8002f9a <HAL_GPIO_Init+0x13e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2bff      	cmp	r3, #255	; 0xff
 8002fa0:	d802      	bhi.n	8002fa8 <HAL_GPIO_Init+0x14c>
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	e002      	b.n	8002fae <HAL_GPIO_Init+0x152>
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	3b08      	subs	r3, #8
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	6a39      	ldr	r1, [r7, #32]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80b1 	beq.w	800313e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fdc:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <HAL_GPIO_Init+0x2b8>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <HAL_GPIO_Init+0x2b8>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6193      	str	r3, [r2, #24]
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_GPIO_Init+0x2b8>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ff4:	4a48      	ldr	r2, [pc, #288]	; (8003118 <HAL_GPIO_Init+0x2bc>)
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003000:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	220f      	movs	r2, #15
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a40      	ldr	r2, [pc, #256]	; (800311c <HAL_GPIO_Init+0x2c0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_GPIO_Init+0x1ec>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a3f      	ldr	r2, [pc, #252]	; (8003120 <HAL_GPIO_Init+0x2c4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00d      	beq.n	8003044 <HAL_GPIO_Init+0x1e8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3e      	ldr	r2, [pc, #248]	; (8003124 <HAL_GPIO_Init+0x2c8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <HAL_GPIO_Init+0x1e4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3d      	ldr	r2, [pc, #244]	; (8003128 <HAL_GPIO_Init+0x2cc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_GPIO_Init+0x1e0>
 8003038:	2303      	movs	r3, #3
 800303a:	e006      	b.n	800304a <HAL_GPIO_Init+0x1ee>
 800303c:	2304      	movs	r3, #4
 800303e:	e004      	b.n	800304a <HAL_GPIO_Init+0x1ee>
 8003040:	2302      	movs	r3, #2
 8003042:	e002      	b.n	800304a <HAL_GPIO_Init+0x1ee>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <HAL_GPIO_Init+0x1ee>
 8003048:	2300      	movs	r3, #0
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	f002 0203 	and.w	r2, r2, #3
 8003050:	0092      	lsls	r2, r2, #2
 8003052:	4093      	lsls	r3, r2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800305a:	492f      	ldr	r1, [pc, #188]	; (8003118 <HAL_GPIO_Init+0x2bc>)
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	3302      	adds	r3, #2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <HAL_GPIO_Init+0x2d0>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	492c      	ldr	r1, [pc, #176]	; (800312c <HAL_GPIO_Init+0x2d0>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003082:	4b2a      	ldr	r3, [pc, #168]	; (800312c <HAL_GPIO_Init+0x2d0>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	43db      	mvns	r3, r3
 800308a:	4928      	ldr	r1, [pc, #160]	; (800312c <HAL_GPIO_Init+0x2d0>)
 800308c:	4013      	ands	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <HAL_GPIO_Init+0x2d0>)
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4922      	ldr	r1, [pc, #136]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	491e      	ldr	r1, [pc, #120]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030c4:	4b19      	ldr	r3, [pc, #100]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	4918      	ldr	r1, [pc, #96]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	43db      	mvns	r3, r3
 80030da:	4914      	ldr	r1, [pc, #80]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d021      	beq.n	8003130 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	490e      	ldr	r1, [pc, #56]	; (800312c <HAL_GPIO_Init+0x2d0>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60cb      	str	r3, [r1, #12]
 80030f8:	e021      	b.n	800313e <HAL_GPIO_Init+0x2e2>
 80030fa:	bf00      	nop
 80030fc:	10320000 	.word	0x10320000
 8003100:	10310000 	.word	0x10310000
 8003104:	10220000 	.word	0x10220000
 8003108:	10210000 	.word	0x10210000
 800310c:	10120000 	.word	0x10120000
 8003110:	10110000 	.word	0x10110000
 8003114:	40021000 	.word	0x40021000
 8003118:	40010000 	.word	0x40010000
 800311c:	40010800 	.word	0x40010800
 8003120:	40010c00 	.word	0x40010c00
 8003124:	40011000 	.word	0x40011000
 8003128:	40011400 	.word	0x40011400
 800312c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_GPIO_Init+0x304>)
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	43db      	mvns	r3, r3
 8003138:	4909      	ldr	r1, [pc, #36]	; (8003160 <HAL_GPIO_Init+0x304>)
 800313a:	4013      	ands	r3, r2
 800313c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	3301      	adds	r3, #1
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	f47f ae8e 	bne.w	8002e70 <HAL_GPIO_Init+0x14>
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	372c      	adds	r7, #44	; 0x2c
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	40010400 	.word	0x40010400

08003164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]
 800319e:	4613      	mov	r3, r2
 80031a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a2:	787b      	ldrb	r3, [r7, #1]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a8:	887a      	ldrh	r2, [r7, #2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ae:	e003      	b.n	80031b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d4:	887a      	ldrh	r2, [r7, #2]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	041a      	lsls	r2, r3, #16
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43d9      	mvns	r1, r3
 80031e0:	887b      	ldrh	r3, [r7, #2]
 80031e2:	400b      	ands	r3, r1
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	611a      	str	r2, [r3, #16]
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e272      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8087 	beq.w	8003322 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b04      	cmp	r3, #4
 800321e:	d00c      	beq.n	800323a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003220:	4b8f      	ldr	r3, [pc, #572]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 030c 	and.w	r3, r3, #12
 8003228:	2b08      	cmp	r3, #8
 800322a:	d112      	bne.n	8003252 <HAL_RCC_OscConfig+0x5e>
 800322c:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d10b      	bne.n	8003252 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d06c      	beq.n	8003320 <HAL_RCC_OscConfig+0x12c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d168      	bne.n	8003320 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e24c      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x76>
 800325c:	4b80      	ldr	r3, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7f      	ldr	r2, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e02e      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0x98>
 8003272:	4b7b      	ldr	r3, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a7a      	ldr	r2, [pc, #488]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b78      	ldr	r3, [pc, #480]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a77      	ldr	r2, [pc, #476]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0xbc>
 8003296:	4b72      	ldr	r3, [pc, #456]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a71      	ldr	r2, [pc, #452]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xd4>
 80032b0:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a67      	ldr	r2, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff f9a2 	bl	8002618 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7ff f99e 	bl	8002618 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e200      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b5d      	ldr	r3, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xe4>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7ff f98e 	bl	8002618 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003300:	f7ff f98a 	bl	8002618 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1ec      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x10c>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d063      	beq.n	80033f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800333a:	4b49      	ldr	r3, [pc, #292]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x18c>
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d116      	bne.n	8003380 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	4b43      	ldr	r3, [pc, #268]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x176>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1c0      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4939      	ldr	r1, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	e03a      	b.n	80033f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7ff f943 	bl	8002618 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003396:	f7ff f93f 	bl	8002618 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e1a1      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4927      	ldr	r1, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	e015      	b.n	80033f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b26      	ldr	r3, [pc, #152]	; (8003464 <HAL_RCC_OscConfig+0x270>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f922 	bl	8002618 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d8:	f7ff f91e 	bl	8002618 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e180      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03a      	beq.n	8003478 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d019      	beq.n	800343e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003410:	f7ff f902 	bl	8002618 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003418:	f7ff f8fe 	bl	8002618 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e160      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_RCC_OscConfig+0x26c>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003436:	2001      	movs	r0, #1
 8003438:	f000 faa6 	bl	8003988 <RCC_Delay>
 800343c:	e01c      	b.n	8003478 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_OscConfig+0x274>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7ff f8e8 	bl	8002618 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800344a:	e00f      	b.n	800346c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7ff f8e4 	bl	8002618 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d908      	bls.n	800346c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e146      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000
 8003464:	42420000 	.word	0x42420000
 8003468:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e9      	bne.n	800344c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80a6 	beq.w	80035d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800348a:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a87      	ldr	r2, [pc, #540]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	4b85      	ldr	r3, [pc, #532]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b2:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d118      	bne.n	80034f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034be:	4b7f      	ldr	r3, [pc, #508]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a7e      	ldr	r2, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ca:	f7ff f8a5 	bl	8002618 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d2:	f7ff f8a1 	bl	8002618 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	; 0x64
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e103      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	4b75      	ldr	r3, [pc, #468]	; (80036bc <HAL_RCC_OscConfig+0x4c8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x312>
 80034f8:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	4a6e      	ldr	r2, [pc, #440]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	6213      	str	r3, [r2, #32]
 8003504:	e02d      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCC_OscConfig+0x334>
 800350e:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a69      	ldr	r2, [pc, #420]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6213      	str	r3, [r2, #32]
 800351a:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a66      	ldr	r2, [pc, #408]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	6213      	str	r3, [r2, #32]
 8003526:	e01c      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b05      	cmp	r3, #5
 800352e:	d10c      	bne.n	800354a <HAL_RCC_OscConfig+0x356>
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4a60      	ldr	r2, [pc, #384]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6213      	str	r3, [r2, #32]
 800353c:	4b5e      	ldr	r3, [pc, #376]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4a5d      	ldr	r2, [pc, #372]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6213      	str	r3, [r2, #32]
 8003548:	e00b      	b.n	8003562 <HAL_RCC_OscConfig+0x36e>
 800354a:	4b5b      	ldr	r3, [pc, #364]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a5a      	ldr	r2, [pc, #360]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	4b58      	ldr	r3, [pc, #352]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a57      	ldr	r2, [pc, #348]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	f023 0304 	bic.w	r3, r3, #4
 8003560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d015      	beq.n	8003596 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7ff f855 	bl	8002618 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7ff f851 	bl	8002618 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0b1      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ee      	beq.n	8003572 <HAL_RCC_OscConfig+0x37e>
 8003594:	e014      	b.n	80035c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003596:	f7ff f83f 	bl	8002618 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7ff f83b 	bl	8002618 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e09b      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ee      	bne.n	800359e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4a3b      	ldr	r2, [pc, #236]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8087 	beq.w	80036ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d061      	beq.n	80036ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d146      	bne.n	800367e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f0:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <HAL_RCC_OscConfig+0x4cc>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7ff f80f 	bl	8002618 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7ff f80b 	bl	8002618 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e06d      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d108      	bne.n	8003638 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4921      	ldr	r1, [pc, #132]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a19      	ldr	r1, [r3, #32]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	430b      	orrs	r3, r1
 800364a:	491b      	ldr	r1, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe ffdf 	bl	8002618 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe ffdb 	bl	8002618 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e03d      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x46a>
 800367c:	e035      	b.n	80036ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <HAL_RCC_OscConfig+0x4cc>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe ffc8 	bl	8002618 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fe ffc4 	bl	8002618 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e026      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x498>
 80036aa:	e01e      	b.n	80036ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e019      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
 80036c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x500>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000

080036f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0d0      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b6a      	ldr	r3, [pc, #424]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d910      	bls.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 0207 	bic.w	r2, r3, #7
 8003722:	4965      	ldr	r1, [pc, #404]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b8      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003754:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800375e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b50      	ldr	r3, [pc, #320]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	494d      	ldr	r1, [pc, #308]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d040      	beq.n	8003818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e073      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06b      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4936      	ldr	r1, [pc, #216]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fe ff16 	bl	8002618 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fe ff12 	bl	8002618 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e053      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d210      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b24      	ldr	r3, [pc, #144]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	4922      	ldr	r1, [pc, #136]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e032      	b.n	80038ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003854:	4b19      	ldr	r3, [pc, #100]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4916      	ldr	r1, [pc, #88]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	490e      	ldr	r1, [pc, #56]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003886:	f000 f821 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_RCC_ClockConfig+0x1cc>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1d0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fe74 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40022000 	.word	0x40022000
 80038bc:	40021000 	.word	0x40021000
 80038c0:	0800b3e0 	.word	0x0800b3e0
 80038c4:	20000048 	.word	0x20000048
 80038c8:	20000054 	.word	0x20000054

080038cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	b490      	push	{r4, r7}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038d2:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_GetSysClockFreq+0xac>)
 80038d4:	1d3c      	adds	r4, r7, #4
 80038d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038dc:	f240 2301 	movw	r3, #513	; 0x201
 80038e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038f6:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCC_GetSysClockFreq+0xb0>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b04      	cmp	r3, #4
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x40>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x46>
 800390a:	e02b      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb4>)
 800390e:	623b      	str	r3, [r7, #32]
      break;
 8003910:	e02b      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3328      	adds	r3, #40	; 0x28
 800391c:	443b      	add	r3, r7
 800391e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003922:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800392e:	4b13      	ldr	r3, [pc, #76]	; (800397c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0c5b      	lsrs	r3, r3, #17
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	3328      	adds	r3, #40	; 0x28
 800393a:	443b      	add	r3, r7
 800393c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003940:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003946:	fb03 f202 	mul.w	r2, r3, r2
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	e004      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	623b      	str	r3, [r7, #32]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003966:	623b      	str	r3, [r7, #32]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	6a3b      	ldr	r3, [r7, #32]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc90      	pop	{r4, r7}
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	0800609c 	.word	0x0800609c
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	003d0900 	.word	0x003d0900

08003988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <RCC_Delay+0x34>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <RCC_Delay+0x38>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0a5b      	lsrs	r3, r3, #9
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a4:	bf00      	nop
  }
  while (Delay --);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	60fa      	str	r2, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f9      	bne.n	80039a4 <RCC_Delay+0x1c>
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr
 80039bc:	20000048 	.word	0x20000048
 80039c0:	10624dd3 	.word	0x10624dd3

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e041      	b.n	8003a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd fa7e 	bl	8000eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 fcb4 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d001      	beq.n	8003a7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e032      	b.n	8003ae2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a18      	ldr	r2, [pc, #96]	; (8003aec <HAL_TIM_Base_Start+0x88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_TIM_Base_Start+0x48>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d009      	beq.n	8003aac <HAL_TIM_Base_Start+0x48>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_TIM_Base_Start+0x8c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_TIM_Base_Start+0x48>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <HAL_TIM_Base_Start+0x90>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d111      	bne.n	8003ad0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d010      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ace:	e007      	b.n	8003ae0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800

08003af8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d001      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e03a      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIM_Base_Start_IT+0x98>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x58>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800

08003b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f839 	bl	8003c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fbc8 	bl	8004370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <HAL_TIM_PWM_Start+0x24>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e022      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x6a>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d109      	bne.n	8003c8a <HAL_TIM_PWM_Start+0x3e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	bf14      	ite	ne
 8003c82:	2301      	movne	r3, #1
 8003c84:	2300      	moveq	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e015      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x6a>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d109      	bne.n	8003ca4 <HAL_TIM_PWM_Start+0x58>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e008      	b.n	8003cb6 <HAL_TIM_PWM_Start+0x6a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e05e      	b.n	8003d7c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start+0x82>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	e013      	b.n	8003cf6 <HAL_TIM_PWM_Start+0xaa>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_PWM_Start+0x92>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cdc:	e00b      	b.n	8003cf6 <HAL_TIM_PWM_Start+0xaa>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_PWM_Start+0xa2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cec:	e003      	b.n	8003cf6 <HAL_TIM_PWM_Start+0xaa>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fe44 	bl	800498c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_TIM_PWM_Start+0x138>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_TIM_PWM_Start+0x138>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_TIM_PWM_Start+0xfa>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d009      	beq.n	8003d46 <HAL_TIM_PWM_Start+0xfa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <HAL_TIM_PWM_Start+0x13c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_TIM_PWM_Start+0xfa>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <HAL_TIM_PWM_Start+0x140>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d111      	bne.n	8003d6a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	d010      	beq.n	8003d7a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d68:	e007      	b.n	8003d7a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0201 	orr.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0202 	mvn.w	r2, #2
 8003dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fab1 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 faa4 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fab3 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa87 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa7a 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 fa89 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fa5d 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa50 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fa5f 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa33 	bl	800433a <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa26 	bl	8004328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fa35 	bl	800434c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0201 	mvn.w	r2, #1
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc f9d4 	bl	80002bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fe02 	bl	8004b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9f9 	bl	800435e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0220 	mvn.w	r2, #32
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fdcd 	bl	8004b32 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e0ac      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	f200 809f 	bhi.w	8004108 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08004005 	.word	0x08004005
 8003fd4:	08004109 	.word	0x08004109
 8003fd8:	08004109 	.word	0x08004109
 8003fdc:	08004109 	.word	0x08004109
 8003fe0:	08004045 	.word	0x08004045
 8003fe4:	08004109 	.word	0x08004109
 8003fe8:	08004109 	.word	0x08004109
 8003fec:	08004109 	.word	0x08004109
 8003ff0:	08004087 	.word	0x08004087
 8003ff4:	08004109 	.word	0x08004109
 8003ff8:	08004109 	.word	0x08004109
 8003ffc:	08004109 	.word	0x08004109
 8004000:	080040c7 	.word	0x080040c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fa12 	bl	8004434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0208 	orr.w	r2, r2, #8
 800401e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0204 	bic.w	r2, r2, #4
 800402e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6999      	ldr	r1, [r3, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	619a      	str	r2, [r3, #24]
      break;
 8004042:	e062      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fa58 	bl	8004500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]
      break;
 8004084:	e041      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68b9      	ldr	r1, [r7, #8]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 faa1 	bl	80045d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0208 	orr.w	r2, r2, #8
 80040a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0204 	bic.w	r2, r2, #4
 80040b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69d9      	ldr	r1, [r3, #28]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	61da      	str	r2, [r3, #28]
      break;
 80040c4:	e021      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 faeb 	bl	80046a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	021a      	lsls	r2, r3, #8
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	61da      	str	r2, [r3, #28]
      break;
 8004106:	e000      	b.n	800410a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004108:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_ConfigClockSource+0x18>
 8004130:	2302      	movs	r3, #2
 8004132:	e0b3      	b.n	800429c <HAL_TIM_ConfigClockSource+0x180>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004152:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416c:	d03e      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xd0>
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004172:	f200 8087 	bhi.w	8004284 <HAL_TIM_ConfigClockSource+0x168>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	f000 8085 	beq.w	8004288 <HAL_TIM_ConfigClockSource+0x16c>
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d87f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 8004184:	2b70      	cmp	r3, #112	; 0x70
 8004186:	d01a      	beq.n	80041be <HAL_TIM_ConfigClockSource+0xa2>
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d87b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 800418c:	2b60      	cmp	r3, #96	; 0x60
 800418e:	d050      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x116>
 8004190:	2b60      	cmp	r3, #96	; 0x60
 8004192:	d877      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d03c      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0xf6>
 8004198:	2b50      	cmp	r3, #80	; 0x50
 800419a:	d873      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d058      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x136>
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d86f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d064      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
 80041a8:	2b30      	cmp	r3, #48	; 0x30
 80041aa:	d86b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d060      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d867      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d05a      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041bc:	e062      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6899      	ldr	r1, [r3, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f000 fbbe 	bl	800494e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	609a      	str	r2, [r3, #8]
      break;
 80041ea:	e04e      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f000 fba7 	bl	800494e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420e:	609a      	str	r2, [r3, #8]
      break;
 8004210:	e03b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	461a      	mov	r2, r3
 8004220:	f000 fb1e 	bl	8004860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2150      	movs	r1, #80	; 0x50
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fb75 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004230:	e02b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fb3c 	bl	80048bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2160      	movs	r1, #96	; 0x60
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fb65 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004250:	e01b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	461a      	mov	r2, r3
 8004260:	f000 fafe 	bl	8004860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb55 	bl	800491a <TIM_ITRx_SetConfig>
      break;
 8004270:	e00b      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 fb4c 	bl	800491a <TIM_ITRx_SetConfig>
        break;
 8004282:	e002      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004288:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e031      	b.n	8004320 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80042cc:	6839      	ldr	r1, [r7, #0]
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa38 	bl	8004744 <TIM_SlaveTimer_SetConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d009      	beq.n	80042ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e018      	b.n	8004320 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800430c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a29      	ldr	r2, [pc, #164]	; (8004428 <TIM_Base_SetConfig+0xb8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00b      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438e:	d007      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a26      	ldr	r2, [pc, #152]	; (800442c <TIM_Base_SetConfig+0xbc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x30>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a25      	ldr	r2, [pc, #148]	; (8004430 <TIM_Base_SetConfig+0xc0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <TIM_Base_SetConfig+0xb8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <TIM_Base_SetConfig+0xbc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <TIM_Base_SetConfig+0xc0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <TIM_Base_SetConfig+0xb8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f023 0302 	bic.w	r3, r3, #2
 800447c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <TIM_OC1_SetConfig+0xc8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10c      	bne.n	80044aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f023 0308 	bic.w	r3, r3, #8
 8004496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a13      	ldr	r2, [pc, #76]	; (80044fc <TIM_OC1_SetConfig+0xc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40012c00 	.word	0x40012c00

08004500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f023 0210 	bic.w	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0320 	bic.w	r3, r3, #32
 800454a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <TIM_OC2_SetConfig+0xd0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10d      	bne.n	800457c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <TIM_OC2_SetConfig+0xd0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d113      	bne.n	80045ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800458a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00

080045d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <TIM_OC3_SetConfig+0xd0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10d      	bne.n	800464e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <TIM_OC3_SetConfig+0xd0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d113      	bne.n	800467e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800465c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	031b      	lsls	r3, r3, #12
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <TIM_OC4_SetConfig+0x98>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d109      	bne.n	800471c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800470e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	621a      	str	r2, [r3, #32]
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00

08004744 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0307 	bic.w	r3, r3, #7
 800476e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b70      	cmp	r3, #112	; 0x70
 8004788:	d01a      	beq.n	80047c0 <TIM_SlaveTimer_SetConfig+0x7c>
 800478a:	2b70      	cmp	r3, #112	; 0x70
 800478c:	d860      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 800478e:	2b60      	cmp	r3, #96	; 0x60
 8004790:	d054      	beq.n	800483c <TIM_SlaveTimer_SetConfig+0xf8>
 8004792:	2b60      	cmp	r3, #96	; 0x60
 8004794:	d85c      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 8004796:	2b50      	cmp	r3, #80	; 0x50
 8004798:	d046      	beq.n	8004828 <TIM_SlaveTimer_SetConfig+0xe4>
 800479a:	2b50      	cmp	r3, #80	; 0x50
 800479c:	d858      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d019      	beq.n	80047d6 <TIM_SlaveTimer_SetConfig+0x92>
 80047a2:	2b40      	cmp	r3, #64	; 0x40
 80047a4:	d854      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 80047a6:	2b30      	cmp	r3, #48	; 0x30
 80047a8:	d054      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
 80047aa:	2b30      	cmp	r3, #48	; 0x30
 80047ac:	d850      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d050      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d84c      	bhi.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d04c      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d04a      	beq.n	8004854 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80047be:	e047      	b.n	8004850 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68d9      	ldr	r1, [r3, #12]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f000 f8bd 	bl	800494e <TIM_ETR_SetConfig>
      break;
 80047d4:	e03f      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d101      	bne.n	80047e2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e03a      	b.n	8004858 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6a1a      	ldr	r2, [r3, #32]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004808:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	621a      	str	r2, [r3, #32]
      break;
 8004826:	e016      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6899      	ldr	r1, [r3, #8]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	461a      	mov	r2, r3
 8004836:	f000 f813 	bl	8004860 <TIM_TI1_ConfigInputStage>
      break;
 800483a:	e00c      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	461a      	mov	r2, r3
 800484a:	f000 f837 	bl	80048bc <TIM_TI2_ConfigInputStage>
      break;
 800484e:	e002      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8004854:	bf00      	nop
  }
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 030a 	bic.w	r3, r3, #10
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 0210 	bic.w	r2, r3, #16
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	031b      	lsls	r3, r3, #12
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	621a      	str	r2, [r3, #32]
}
 8004910:	bf00      	nop
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	f043 0307 	orr.w	r3, r3, #7
 800493c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr

0800494e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800494e:	b480      	push	{r7}
 8004950:	b087      	sub	sp, #28
 8004952:	af00      	add	r7, sp, #0
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	60b9      	str	r1, [r7, #8]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004968:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	021a      	lsls	r2, r3, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	431a      	orrs	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2201      	movs	r2, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bc80      	pop	{r7}
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e046      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a10      	ldr	r2, [pc, #64]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800

08004a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e03d      	b.n	8004b28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
	...

08004b58 <__errno>:
 8004b58:	4b01      	ldr	r3, [pc, #4]	; (8004b60 <__errno+0x8>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	2000005c 	.word	0x2000005c

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	2600      	movs	r6, #0
 8004b68:	4d0c      	ldr	r5, [pc, #48]	; (8004b9c <__libc_init_array+0x38>)
 8004b6a:	4c0d      	ldr	r4, [pc, #52]	; (8004ba0 <__libc_init_array+0x3c>)
 8004b6c:	1b64      	subs	r4, r4, r5
 8004b6e:	10a4      	asrs	r4, r4, #2
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	f001 fa6a 	bl	800604c <_init>
 8004b78:	2600      	movs	r6, #0
 8004b7a:	4d0a      	ldr	r5, [pc, #40]	; (8004ba4 <__libc_init_array+0x40>)
 8004b7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ba8 <__libc_init_array+0x44>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	0800bd8c 	.word	0x0800bd8c
 8004ba0:	0800bd8c 	.word	0x0800bd8c
 8004ba4:	0800bd8c 	.word	0x0800bd8c
 8004ba8:	0800bd90 	.word	0x0800bd90

08004bac <memcpy>:
 8004bac:	440a      	add	r2, r1
 8004bae:	4291      	cmp	r1, r2
 8004bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb4:	d100      	bne.n	8004bb8 <memcpy+0xc>
 8004bb6:	4770      	bx	lr
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bbe:	4291      	cmp	r1, r2
 8004bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc4:	d1f9      	bne.n	8004bba <memcpy+0xe>
 8004bc6:	bd10      	pop	{r4, pc}

08004bc8 <memset>:
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4402      	add	r2, r0
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d100      	bne.n	8004bd2 <memset+0xa>
 8004bd0:	4770      	bx	lr
 8004bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd6:	e7f9      	b.n	8004bcc <memset+0x4>

08004bd8 <srand>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <srand+0x44>)
 8004bdc:	4604      	mov	r4, r0
 8004bde:	681d      	ldr	r5, [r3, #0]
 8004be0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004be2:	b9b3      	cbnz	r3, 8004c12 <srand+0x3a>
 8004be4:	2018      	movs	r0, #24
 8004be6:	f000 f8b3 	bl	8004d50 <malloc>
 8004bea:	4602      	mov	r2, r0
 8004bec:	63a8      	str	r0, [r5, #56]	; 0x38
 8004bee:	b920      	cbnz	r0, 8004bfa <srand+0x22>
 8004bf0:	2142      	movs	r1, #66	; 0x42
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <srand+0x48>)
 8004bf4:	480b      	ldr	r0, [pc, #44]	; (8004c24 <srand+0x4c>)
 8004bf6:	f000 f87b 	bl	8004cf0 <__assert_func>
 8004bfa:	490b      	ldr	r1, [pc, #44]	; (8004c28 <srand+0x50>)
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <srand+0x54>)
 8004bfe:	e9c0 1300 	strd	r1, r3, [r0]
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <srand+0x58>)
 8004c04:	2100      	movs	r1, #0
 8004c06:	6083      	str	r3, [r0, #8]
 8004c08:	230b      	movs	r3, #11
 8004c0a:	8183      	strh	r3, [r0, #12]
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c12:	2200      	movs	r2, #0
 8004c14:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004c16:	611c      	str	r4, [r3, #16]
 8004c18:	615a      	str	r2, [r3, #20]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	2000005c 	.word	0x2000005c
 8004c20:	0800bc48 	.word	0x0800bc48
 8004c24:	0800bc5f 	.word	0x0800bc5f
 8004c28:	abcd330e 	.word	0xabcd330e
 8004c2c:	e66d1234 	.word	0xe66d1234
 8004c30:	0005deec 	.word	0x0005deec

08004c34 <rand>:
 8004c34:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <rand+0x5c>)
 8004c36:	b510      	push	{r4, lr}
 8004c38:	681c      	ldr	r4, [r3, #0]
 8004c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c3c:	b9b3      	cbnz	r3, 8004c6c <rand+0x38>
 8004c3e:	2018      	movs	r0, #24
 8004c40:	f000 f886 	bl	8004d50 <malloc>
 8004c44:	4602      	mov	r2, r0
 8004c46:	63a0      	str	r0, [r4, #56]	; 0x38
 8004c48:	b920      	cbnz	r0, 8004c54 <rand+0x20>
 8004c4a:	214e      	movs	r1, #78	; 0x4e
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <rand+0x60>)
 8004c4e:	4812      	ldr	r0, [pc, #72]	; (8004c98 <rand+0x64>)
 8004c50:	f000 f84e 	bl	8004cf0 <__assert_func>
 8004c54:	4911      	ldr	r1, [pc, #68]	; (8004c9c <rand+0x68>)
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <rand+0x6c>)
 8004c58:	e9c0 1300 	strd	r1, r3, [r0]
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <rand+0x70>)
 8004c5e:	2100      	movs	r1, #0
 8004c60:	6083      	str	r3, [r0, #8]
 8004c62:	230b      	movs	r3, #11
 8004c64:	8183      	strh	r3, [r0, #12]
 8004c66:	2001      	movs	r0, #1
 8004c68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <rand+0x74>)
 8004c70:	6920      	ldr	r0, [r4, #16]
 8004c72:	6963      	ldr	r3, [r4, #20]
 8004c74:	4342      	muls	r2, r0
 8004c76:	490d      	ldr	r1, [pc, #52]	; (8004cac <rand+0x78>)
 8004c78:	fb01 2203 	mla	r2, r1, r3, r2
 8004c7c:	fba0 0101 	umull	r0, r1, r0, r1
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	eb42 0001 	adc.w	r0, r2, r1
 8004c86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004c8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004c8e:	bd10      	pop	{r4, pc}
 8004c90:	2000005c 	.word	0x2000005c
 8004c94:	0800bc48 	.word	0x0800bc48
 8004c98:	0800bc5f 	.word	0x0800bc5f
 8004c9c:	abcd330e 	.word	0xabcd330e
 8004ca0:	e66d1234 	.word	0xe66d1234
 8004ca4:	0005deec 	.word	0x0005deec
 8004ca8:	5851f42d 	.word	0x5851f42d
 8004cac:	4c957f2d 	.word	0x4c957f2d

08004cb0 <siprintf>:
 8004cb0:	b40e      	push	{r1, r2, r3}
 8004cb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cb6:	b500      	push	{lr}
 8004cb8:	b09c      	sub	sp, #112	; 0x70
 8004cba:	ab1d      	add	r3, sp, #116	; 0x74
 8004cbc:	9002      	str	r0, [sp, #8]
 8004cbe:	9006      	str	r0, [sp, #24]
 8004cc0:	9107      	str	r1, [sp, #28]
 8004cc2:	9104      	str	r1, [sp, #16]
 8004cc4:	4808      	ldr	r0, [pc, #32]	; (8004ce8 <siprintf+0x38>)
 8004cc6:	4909      	ldr	r1, [pc, #36]	; (8004cec <siprintf+0x3c>)
 8004cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ccc:	9105      	str	r1, [sp, #20]
 8004cce:	6800      	ldr	r0, [r0, #0]
 8004cd0:	a902      	add	r1, sp, #8
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	f000 f97c 	bl	8004fd0 <_svfiprintf_r>
 8004cd8:	2200      	movs	r2, #0
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	b01c      	add	sp, #112	; 0x70
 8004ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce4:	b003      	add	sp, #12
 8004ce6:	4770      	bx	lr
 8004ce8:	2000005c 	.word	0x2000005c
 8004cec:	ffff0208 	.word	0xffff0208

08004cf0 <__assert_func>:
 8004cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cf2:	4614      	mov	r4, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <__assert_func+0x2c>)
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68d8      	ldr	r0, [r3, #12]
 8004cfe:	b14c      	cbz	r4, 8004d14 <__assert_func+0x24>
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <__assert_func+0x30>)
 8004d02:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d06:	9100      	str	r1, [sp, #0]
 8004d08:	462b      	mov	r3, r5
 8004d0a:	4906      	ldr	r1, [pc, #24]	; (8004d24 <__assert_func+0x34>)
 8004d0c:	f000 f80e 	bl	8004d2c <fiprintf>
 8004d10:	f000 fe1c 	bl	800594c <abort>
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <__assert_func+0x38>)
 8004d16:	461c      	mov	r4, r3
 8004d18:	e7f3      	b.n	8004d02 <__assert_func+0x12>
 8004d1a:	bf00      	nop
 8004d1c:	2000005c 	.word	0x2000005c
 8004d20:	0800bcba 	.word	0x0800bcba
 8004d24:	0800bcc7 	.word	0x0800bcc7
 8004d28:	0800bcf5 	.word	0x0800bcf5

08004d2c <fiprintf>:
 8004d2c:	b40e      	push	{r1, r2, r3}
 8004d2e:	b503      	push	{r0, r1, lr}
 8004d30:	4601      	mov	r1, r0
 8004d32:	ab03      	add	r3, sp, #12
 8004d34:	4805      	ldr	r0, [pc, #20]	; (8004d4c <fiprintf+0x20>)
 8004d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d3a:	6800      	ldr	r0, [r0, #0]
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f000 fa6f 	bl	8005220 <_vfiprintf_r>
 8004d42:	b002      	add	sp, #8
 8004d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d48:	b003      	add	sp, #12
 8004d4a:	4770      	bx	lr
 8004d4c:	2000005c 	.word	0x2000005c

08004d50 <malloc>:
 8004d50:	4b02      	ldr	r3, [pc, #8]	; (8004d5c <malloc+0xc>)
 8004d52:	4601      	mov	r1, r0
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	f000 b86b 	b.w	8004e30 <_malloc_r>
 8004d5a:	bf00      	nop
 8004d5c:	2000005c 	.word	0x2000005c

08004d60 <_free_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4605      	mov	r5, r0
 8004d64:	2900      	cmp	r1, #0
 8004d66:	d040      	beq.n	8004dea <_free_r+0x8a>
 8004d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6c:	1f0c      	subs	r4, r1, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfb8      	it	lt
 8004d72:	18e4      	addlt	r4, r4, r3
 8004d74:	f001 f836 	bl	8005de4 <__malloc_lock>
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <_free_r+0x8c>)
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	b933      	cbnz	r3, 8004d8c <_free_r+0x2c>
 8004d7e:	6063      	str	r3, [r4, #4]
 8004d80:	6014      	str	r4, [r2, #0]
 8004d82:	4628      	mov	r0, r5
 8004d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d88:	f001 b832 	b.w	8005df0 <__malloc_unlock>
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	d908      	bls.n	8004da2 <_free_r+0x42>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	1821      	adds	r1, r4, r0
 8004d94:	428b      	cmp	r3, r1
 8004d96:	bf01      	itttt	eq
 8004d98:	6819      	ldreq	r1, [r3, #0]
 8004d9a:	685b      	ldreq	r3, [r3, #4]
 8004d9c:	1809      	addeq	r1, r1, r0
 8004d9e:	6021      	streq	r1, [r4, #0]
 8004da0:	e7ed      	b.n	8004d7e <_free_r+0x1e>
 8004da2:	461a      	mov	r2, r3
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	b10b      	cbz	r3, 8004dac <_free_r+0x4c>
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d9fa      	bls.n	8004da2 <_free_r+0x42>
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	1850      	adds	r0, r2, r1
 8004db0:	42a0      	cmp	r0, r4
 8004db2:	d10b      	bne.n	8004dcc <_free_r+0x6c>
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	4401      	add	r1, r0
 8004db8:	1850      	adds	r0, r2, r1
 8004dba:	4283      	cmp	r3, r0
 8004dbc:	6011      	str	r1, [r2, #0]
 8004dbe:	d1e0      	bne.n	8004d82 <_free_r+0x22>
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4401      	add	r1, r0
 8004dc6:	6011      	str	r1, [r2, #0]
 8004dc8:	6053      	str	r3, [r2, #4]
 8004dca:	e7da      	b.n	8004d82 <_free_r+0x22>
 8004dcc:	d902      	bls.n	8004dd4 <_free_r+0x74>
 8004dce:	230c      	movs	r3, #12
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	e7d6      	b.n	8004d82 <_free_r+0x22>
 8004dd4:	6820      	ldr	r0, [r4, #0]
 8004dd6:	1821      	adds	r1, r4, r0
 8004dd8:	428b      	cmp	r3, r1
 8004dda:	bf01      	itttt	eq
 8004ddc:	6819      	ldreq	r1, [r3, #0]
 8004dde:	685b      	ldreq	r3, [r3, #4]
 8004de0:	1809      	addeq	r1, r1, r0
 8004de2:	6021      	streq	r1, [r4, #0]
 8004de4:	6063      	str	r3, [r4, #4]
 8004de6:	6054      	str	r4, [r2, #4]
 8004de8:	e7cb      	b.n	8004d82 <_free_r+0x22>
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20002c50 	.word	0x20002c50

08004df0 <sbrk_aligned>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	4e0e      	ldr	r6, [pc, #56]	; (8004e2c <sbrk_aligned+0x3c>)
 8004df4:	460c      	mov	r4, r1
 8004df6:	6831      	ldr	r1, [r6, #0]
 8004df8:	4605      	mov	r5, r0
 8004dfa:	b911      	cbnz	r1, 8004e02 <sbrk_aligned+0x12>
 8004dfc:	f000 fcd6 	bl	80057ac <_sbrk_r>
 8004e00:	6030      	str	r0, [r6, #0]
 8004e02:	4621      	mov	r1, r4
 8004e04:	4628      	mov	r0, r5
 8004e06:	f000 fcd1 	bl	80057ac <_sbrk_r>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	d00a      	beq.n	8004e24 <sbrk_aligned+0x34>
 8004e0e:	1cc4      	adds	r4, r0, #3
 8004e10:	f024 0403 	bic.w	r4, r4, #3
 8004e14:	42a0      	cmp	r0, r4
 8004e16:	d007      	beq.n	8004e28 <sbrk_aligned+0x38>
 8004e18:	1a21      	subs	r1, r4, r0
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 fcc6 	bl	80057ac <_sbrk_r>
 8004e20:	3001      	adds	r0, #1
 8004e22:	d101      	bne.n	8004e28 <sbrk_aligned+0x38>
 8004e24:	f04f 34ff 	mov.w	r4, #4294967295
 8004e28:	4620      	mov	r0, r4
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	20002c54 	.word	0x20002c54

08004e30 <_malloc_r>:
 8004e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	1ccd      	adds	r5, r1, #3
 8004e36:	f025 0503 	bic.w	r5, r5, #3
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	bf38      	it	cc
 8004e40:	250c      	movcc	r5, #12
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	4607      	mov	r7, r0
 8004e46:	db01      	blt.n	8004e4c <_malloc_r+0x1c>
 8004e48:	42a9      	cmp	r1, r5
 8004e4a:	d905      	bls.n	8004e58 <_malloc_r+0x28>
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	2600      	movs	r6, #0
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	4630      	mov	r0, r6
 8004e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e58:	4e2e      	ldr	r6, [pc, #184]	; (8004f14 <_malloc_r+0xe4>)
 8004e5a:	f000 ffc3 	bl	8005de4 <__malloc_lock>
 8004e5e:	6833      	ldr	r3, [r6, #0]
 8004e60:	461c      	mov	r4, r3
 8004e62:	bb34      	cbnz	r4, 8004eb2 <_malloc_r+0x82>
 8004e64:	4629      	mov	r1, r5
 8004e66:	4638      	mov	r0, r7
 8004e68:	f7ff ffc2 	bl	8004df0 <sbrk_aligned>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	4604      	mov	r4, r0
 8004e70:	d14d      	bne.n	8004f0e <_malloc_r+0xde>
 8004e72:	6834      	ldr	r4, [r6, #0]
 8004e74:	4626      	mov	r6, r4
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	d140      	bne.n	8004efc <_malloc_r+0xcc>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4638      	mov	r0, r7
 8004e80:	eb04 0803 	add.w	r8, r4, r3
 8004e84:	f000 fc92 	bl	80057ac <_sbrk_r>
 8004e88:	4580      	cmp	r8, r0
 8004e8a:	d13a      	bne.n	8004f02 <_malloc_r+0xd2>
 8004e8c:	6821      	ldr	r1, [r4, #0]
 8004e8e:	3503      	adds	r5, #3
 8004e90:	1a6d      	subs	r5, r5, r1
 8004e92:	f025 0503 	bic.w	r5, r5, #3
 8004e96:	3508      	adds	r5, #8
 8004e98:	2d0c      	cmp	r5, #12
 8004e9a:	bf38      	it	cc
 8004e9c:	250c      	movcc	r5, #12
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7ff ffa5 	bl	8004df0 <sbrk_aligned>
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	d02b      	beq.n	8004f02 <_malloc_r+0xd2>
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	442b      	add	r3, r5
 8004eae:	6023      	str	r3, [r4, #0]
 8004eb0:	e00e      	b.n	8004ed0 <_malloc_r+0xa0>
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	1b52      	subs	r2, r2, r5
 8004eb6:	d41e      	bmi.n	8004ef6 <_malloc_r+0xc6>
 8004eb8:	2a0b      	cmp	r2, #11
 8004eba:	d916      	bls.n	8004eea <_malloc_r+0xba>
 8004ebc:	1961      	adds	r1, r4, r5
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	6025      	str	r5, [r4, #0]
 8004ec2:	bf18      	it	ne
 8004ec4:	6059      	strne	r1, [r3, #4]
 8004ec6:	6863      	ldr	r3, [r4, #4]
 8004ec8:	bf08      	it	eq
 8004eca:	6031      	streq	r1, [r6, #0]
 8004ecc:	5162      	str	r2, [r4, r5]
 8004ece:	604b      	str	r3, [r1, #4]
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f104 060b 	add.w	r6, r4, #11
 8004ed6:	f000 ff8b 	bl	8005df0 <__malloc_unlock>
 8004eda:	f026 0607 	bic.w	r6, r6, #7
 8004ede:	1d23      	adds	r3, r4, #4
 8004ee0:	1af2      	subs	r2, r6, r3
 8004ee2:	d0b6      	beq.n	8004e52 <_malloc_r+0x22>
 8004ee4:	1b9b      	subs	r3, r3, r6
 8004ee6:	50a3      	str	r3, [r4, r2]
 8004ee8:	e7b3      	b.n	8004e52 <_malloc_r+0x22>
 8004eea:	6862      	ldr	r2, [r4, #4]
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	bf0c      	ite	eq
 8004ef0:	6032      	streq	r2, [r6, #0]
 8004ef2:	605a      	strne	r2, [r3, #4]
 8004ef4:	e7ec      	b.n	8004ed0 <_malloc_r+0xa0>
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	6864      	ldr	r4, [r4, #4]
 8004efa:	e7b2      	b.n	8004e62 <_malloc_r+0x32>
 8004efc:	4634      	mov	r4, r6
 8004efe:	6876      	ldr	r6, [r6, #4]
 8004f00:	e7b9      	b.n	8004e76 <_malloc_r+0x46>
 8004f02:	230c      	movs	r3, #12
 8004f04:	4638      	mov	r0, r7
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	f000 ff72 	bl	8005df0 <__malloc_unlock>
 8004f0c:	e7a1      	b.n	8004e52 <_malloc_r+0x22>
 8004f0e:	6025      	str	r5, [r4, #0]
 8004f10:	e7de      	b.n	8004ed0 <_malloc_r+0xa0>
 8004f12:	bf00      	nop
 8004f14:	20002c50 	.word	0x20002c50

08004f18 <__ssputs_r>:
 8004f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	688e      	ldr	r6, [r1, #8]
 8004f1e:	4682      	mov	sl, r0
 8004f20:	429e      	cmp	r6, r3
 8004f22:	460c      	mov	r4, r1
 8004f24:	4690      	mov	r8, r2
 8004f26:	461f      	mov	r7, r3
 8004f28:	d838      	bhi.n	8004f9c <__ssputs_r+0x84>
 8004f2a:	898a      	ldrh	r2, [r1, #12]
 8004f2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f30:	d032      	beq.n	8004f98 <__ssputs_r+0x80>
 8004f32:	6825      	ldr	r5, [r4, #0]
 8004f34:	6909      	ldr	r1, [r1, #16]
 8004f36:	3301      	adds	r3, #1
 8004f38:	eba5 0901 	sub.w	r9, r5, r1
 8004f3c:	6965      	ldr	r5, [r4, #20]
 8004f3e:	444b      	add	r3, r9
 8004f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f48:	106d      	asrs	r5, r5, #1
 8004f4a:	429d      	cmp	r5, r3
 8004f4c:	bf38      	it	cc
 8004f4e:	461d      	movcc	r5, r3
 8004f50:	0553      	lsls	r3, r2, #21
 8004f52:	d531      	bpl.n	8004fb8 <__ssputs_r+0xa0>
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7ff ff6b 	bl	8004e30 <_malloc_r>
 8004f5a:	4606      	mov	r6, r0
 8004f5c:	b950      	cbnz	r0, 8004f74 <__ssputs_r+0x5c>
 8004f5e:	230c      	movs	r3, #12
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	f8ca 3000 	str.w	r3, [sl]
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f74:	464a      	mov	r2, r9
 8004f76:	6921      	ldr	r1, [r4, #16]
 8004f78:	f7ff fe18 	bl	8004bac <memcpy>
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	6126      	str	r6, [r4, #16]
 8004f8a:	444e      	add	r6, r9
 8004f8c:	6026      	str	r6, [r4, #0]
 8004f8e:	463e      	mov	r6, r7
 8004f90:	6165      	str	r5, [r4, #20]
 8004f92:	eba5 0509 	sub.w	r5, r5, r9
 8004f96:	60a5      	str	r5, [r4, #8]
 8004f98:	42be      	cmp	r6, r7
 8004f9a:	d900      	bls.n	8004f9e <__ssputs_r+0x86>
 8004f9c:	463e      	mov	r6, r7
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	6820      	ldr	r0, [r4, #0]
 8004fa4:	f000 ff04 	bl	8005db0 <memmove>
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	2000      	movs	r0, #0
 8004fac:	1b9b      	subs	r3, r3, r6
 8004fae:	60a3      	str	r3, [r4, #8]
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	4433      	add	r3, r6
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	e7db      	b.n	8004f70 <__ssputs_r+0x58>
 8004fb8:	462a      	mov	r2, r5
 8004fba:	f000 ff1f 	bl	8005dfc <_realloc_r>
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d1e1      	bne.n	8004f88 <__ssputs_r+0x70>
 8004fc4:	4650      	mov	r0, sl
 8004fc6:	6921      	ldr	r1, [r4, #16]
 8004fc8:	f7ff feca 	bl	8004d60 <_free_r>
 8004fcc:	e7c7      	b.n	8004f5e <__ssputs_r+0x46>
	...

08004fd0 <_svfiprintf_r>:
 8004fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd4:	4698      	mov	r8, r3
 8004fd6:	898b      	ldrh	r3, [r1, #12]
 8004fd8:	4607      	mov	r7, r0
 8004fda:	061b      	lsls	r3, r3, #24
 8004fdc:	460d      	mov	r5, r1
 8004fde:	4614      	mov	r4, r2
 8004fe0:	b09d      	sub	sp, #116	; 0x74
 8004fe2:	d50e      	bpl.n	8005002 <_svfiprintf_r+0x32>
 8004fe4:	690b      	ldr	r3, [r1, #16]
 8004fe6:	b963      	cbnz	r3, 8005002 <_svfiprintf_r+0x32>
 8004fe8:	2140      	movs	r1, #64	; 0x40
 8004fea:	f7ff ff21 	bl	8004e30 <_malloc_r>
 8004fee:	6028      	str	r0, [r5, #0]
 8004ff0:	6128      	str	r0, [r5, #16]
 8004ff2:	b920      	cbnz	r0, 8004ffe <_svfiprintf_r+0x2e>
 8004ff4:	230c      	movs	r3, #12
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	e0d1      	b.n	80051a2 <_svfiprintf_r+0x1d2>
 8004ffe:	2340      	movs	r3, #64	; 0x40
 8005000:	616b      	str	r3, [r5, #20]
 8005002:	2300      	movs	r3, #0
 8005004:	9309      	str	r3, [sp, #36]	; 0x24
 8005006:	2320      	movs	r3, #32
 8005008:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800500c:	2330      	movs	r3, #48	; 0x30
 800500e:	f04f 0901 	mov.w	r9, #1
 8005012:	f8cd 800c 	str.w	r8, [sp, #12]
 8005016:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051bc <_svfiprintf_r+0x1ec>
 800501a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800501e:	4623      	mov	r3, r4
 8005020:	469a      	mov	sl, r3
 8005022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005026:	b10a      	cbz	r2, 800502c <_svfiprintf_r+0x5c>
 8005028:	2a25      	cmp	r2, #37	; 0x25
 800502a:	d1f9      	bne.n	8005020 <_svfiprintf_r+0x50>
 800502c:	ebba 0b04 	subs.w	fp, sl, r4
 8005030:	d00b      	beq.n	800504a <_svfiprintf_r+0x7a>
 8005032:	465b      	mov	r3, fp
 8005034:	4622      	mov	r2, r4
 8005036:	4629      	mov	r1, r5
 8005038:	4638      	mov	r0, r7
 800503a:	f7ff ff6d 	bl	8004f18 <__ssputs_r>
 800503e:	3001      	adds	r0, #1
 8005040:	f000 80aa 	beq.w	8005198 <_svfiprintf_r+0x1c8>
 8005044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005046:	445a      	add	r2, fp
 8005048:	9209      	str	r2, [sp, #36]	; 0x24
 800504a:	f89a 3000 	ldrb.w	r3, [sl]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80a2 	beq.w	8005198 <_svfiprintf_r+0x1c8>
 8005054:	2300      	movs	r3, #0
 8005056:	f04f 32ff 	mov.w	r2, #4294967295
 800505a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800505e:	f10a 0a01 	add.w	sl, sl, #1
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	9307      	str	r3, [sp, #28]
 8005066:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800506a:	931a      	str	r3, [sp, #104]	; 0x68
 800506c:	4654      	mov	r4, sl
 800506e:	2205      	movs	r2, #5
 8005070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005074:	4851      	ldr	r0, [pc, #324]	; (80051bc <_svfiprintf_r+0x1ec>)
 8005076:	f000 fe8d 	bl	8005d94 <memchr>
 800507a:	9a04      	ldr	r2, [sp, #16]
 800507c:	b9d8      	cbnz	r0, 80050b6 <_svfiprintf_r+0xe6>
 800507e:	06d0      	lsls	r0, r2, #27
 8005080:	bf44      	itt	mi
 8005082:	2320      	movmi	r3, #32
 8005084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005088:	0711      	lsls	r1, r2, #28
 800508a:	bf44      	itt	mi
 800508c:	232b      	movmi	r3, #43	; 0x2b
 800508e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005092:	f89a 3000 	ldrb.w	r3, [sl]
 8005096:	2b2a      	cmp	r3, #42	; 0x2a
 8005098:	d015      	beq.n	80050c6 <_svfiprintf_r+0xf6>
 800509a:	4654      	mov	r4, sl
 800509c:	2000      	movs	r0, #0
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	9a07      	ldr	r2, [sp, #28]
 80050a4:	4621      	mov	r1, r4
 80050a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050aa:	3b30      	subs	r3, #48	; 0x30
 80050ac:	2b09      	cmp	r3, #9
 80050ae:	d94e      	bls.n	800514e <_svfiprintf_r+0x17e>
 80050b0:	b1b0      	cbz	r0, 80050e0 <_svfiprintf_r+0x110>
 80050b2:	9207      	str	r2, [sp, #28]
 80050b4:	e014      	b.n	80050e0 <_svfiprintf_r+0x110>
 80050b6:	eba0 0308 	sub.w	r3, r0, r8
 80050ba:	fa09 f303 	lsl.w	r3, r9, r3
 80050be:	4313      	orrs	r3, r2
 80050c0:	46a2      	mov	sl, r4
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	e7d2      	b.n	800506c <_svfiprintf_r+0x9c>
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	1d19      	adds	r1, r3, #4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	9103      	str	r1, [sp, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfbb      	ittet	lt
 80050d2:	425b      	neglt	r3, r3
 80050d4:	f042 0202 	orrlt.w	r2, r2, #2
 80050d8:	9307      	strge	r3, [sp, #28]
 80050da:	9307      	strlt	r3, [sp, #28]
 80050dc:	bfb8      	it	lt
 80050de:	9204      	strlt	r2, [sp, #16]
 80050e0:	7823      	ldrb	r3, [r4, #0]
 80050e2:	2b2e      	cmp	r3, #46	; 0x2e
 80050e4:	d10c      	bne.n	8005100 <_svfiprintf_r+0x130>
 80050e6:	7863      	ldrb	r3, [r4, #1]
 80050e8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ea:	d135      	bne.n	8005158 <_svfiprintf_r+0x188>
 80050ec:	9b03      	ldr	r3, [sp, #12]
 80050ee:	3402      	adds	r4, #2
 80050f0:	1d1a      	adds	r2, r3, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	9203      	str	r2, [sp, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bfb8      	it	lt
 80050fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80051c0 <_svfiprintf_r+0x1f0>
 8005104:	2203      	movs	r2, #3
 8005106:	4650      	mov	r0, sl
 8005108:	7821      	ldrb	r1, [r4, #0]
 800510a:	f000 fe43 	bl	8005d94 <memchr>
 800510e:	b140      	cbz	r0, 8005122 <_svfiprintf_r+0x152>
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	eba0 000a 	sub.w	r0, r0, sl
 8005116:	fa03 f000 	lsl.w	r0, r3, r0
 800511a:	9b04      	ldr	r3, [sp, #16]
 800511c:	3401      	adds	r4, #1
 800511e:	4303      	orrs	r3, r0
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005126:	2206      	movs	r2, #6
 8005128:	4826      	ldr	r0, [pc, #152]	; (80051c4 <_svfiprintf_r+0x1f4>)
 800512a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800512e:	f000 fe31 	bl	8005d94 <memchr>
 8005132:	2800      	cmp	r0, #0
 8005134:	d038      	beq.n	80051a8 <_svfiprintf_r+0x1d8>
 8005136:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <_svfiprintf_r+0x1f8>)
 8005138:	bb1b      	cbnz	r3, 8005182 <_svfiprintf_r+0x1b2>
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	3307      	adds	r3, #7
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	3308      	adds	r3, #8
 8005144:	9303      	str	r3, [sp, #12]
 8005146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005148:	4433      	add	r3, r6
 800514a:	9309      	str	r3, [sp, #36]	; 0x24
 800514c:	e767      	b.n	800501e <_svfiprintf_r+0x4e>
 800514e:	460c      	mov	r4, r1
 8005150:	2001      	movs	r0, #1
 8005152:	fb0c 3202 	mla	r2, ip, r2, r3
 8005156:	e7a5      	b.n	80050a4 <_svfiprintf_r+0xd4>
 8005158:	2300      	movs	r3, #0
 800515a:	f04f 0c0a 	mov.w	ip, #10
 800515e:	4619      	mov	r1, r3
 8005160:	3401      	adds	r4, #1
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	4620      	mov	r0, r4
 8005166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800516a:	3a30      	subs	r2, #48	; 0x30
 800516c:	2a09      	cmp	r2, #9
 800516e:	d903      	bls.n	8005178 <_svfiprintf_r+0x1a8>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0c5      	beq.n	8005100 <_svfiprintf_r+0x130>
 8005174:	9105      	str	r1, [sp, #20]
 8005176:	e7c3      	b.n	8005100 <_svfiprintf_r+0x130>
 8005178:	4604      	mov	r4, r0
 800517a:	2301      	movs	r3, #1
 800517c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005180:	e7f0      	b.n	8005164 <_svfiprintf_r+0x194>
 8005182:	ab03      	add	r3, sp, #12
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	462a      	mov	r2, r5
 8005188:	4638      	mov	r0, r7
 800518a:	4b10      	ldr	r3, [pc, #64]	; (80051cc <_svfiprintf_r+0x1fc>)
 800518c:	a904      	add	r1, sp, #16
 800518e:	f3af 8000 	nop.w
 8005192:	1c42      	adds	r2, r0, #1
 8005194:	4606      	mov	r6, r0
 8005196:	d1d6      	bne.n	8005146 <_svfiprintf_r+0x176>
 8005198:	89ab      	ldrh	r3, [r5, #12]
 800519a:	065b      	lsls	r3, r3, #25
 800519c:	f53f af2c 	bmi.w	8004ff8 <_svfiprintf_r+0x28>
 80051a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051a2:	b01d      	add	sp, #116	; 0x74
 80051a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a8:	ab03      	add	r3, sp, #12
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	462a      	mov	r2, r5
 80051ae:	4638      	mov	r0, r7
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <_svfiprintf_r+0x1fc>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	f000 f9d4 	bl	8005560 <_printf_i>
 80051b8:	e7eb      	b.n	8005192 <_svfiprintf_r+0x1c2>
 80051ba:	bf00      	nop
 80051bc:	0800bcf6 	.word	0x0800bcf6
 80051c0:	0800bcfc 	.word	0x0800bcfc
 80051c4:	0800bd00 	.word	0x0800bd00
 80051c8:	00000000 	.word	0x00000000
 80051cc:	08004f19 	.word	0x08004f19

080051d0 <__sfputc_r>:
 80051d0:	6893      	ldr	r3, [r2, #8]
 80051d2:	b410      	push	{r4}
 80051d4:	3b01      	subs	r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	6093      	str	r3, [r2, #8]
 80051da:	da07      	bge.n	80051ec <__sfputc_r+0x1c>
 80051dc:	6994      	ldr	r4, [r2, #24]
 80051de:	42a3      	cmp	r3, r4
 80051e0:	db01      	blt.n	80051e6 <__sfputc_r+0x16>
 80051e2:	290a      	cmp	r1, #10
 80051e4:	d102      	bne.n	80051ec <__sfputc_r+0x1c>
 80051e6:	bc10      	pop	{r4}
 80051e8:	f000 baf0 	b.w	80057cc <__swbuf_r>
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	1c58      	adds	r0, r3, #1
 80051f0:	6010      	str	r0, [r2, #0]
 80051f2:	7019      	strb	r1, [r3, #0]
 80051f4:	4608      	mov	r0, r1
 80051f6:	bc10      	pop	{r4}
 80051f8:	4770      	bx	lr

080051fa <__sfputs_r>:
 80051fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	4614      	mov	r4, r2
 8005202:	18d5      	adds	r5, r2, r3
 8005204:	42ac      	cmp	r4, r5
 8005206:	d101      	bne.n	800520c <__sfputs_r+0x12>
 8005208:	2000      	movs	r0, #0
 800520a:	e007      	b.n	800521c <__sfputs_r+0x22>
 800520c:	463a      	mov	r2, r7
 800520e:	4630      	mov	r0, r6
 8005210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005214:	f7ff ffdc 	bl	80051d0 <__sfputc_r>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d1f3      	bne.n	8005204 <__sfputs_r+0xa>
 800521c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005220 <_vfiprintf_r>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	460d      	mov	r5, r1
 8005226:	4614      	mov	r4, r2
 8005228:	4698      	mov	r8, r3
 800522a:	4606      	mov	r6, r0
 800522c:	b09d      	sub	sp, #116	; 0x74
 800522e:	b118      	cbz	r0, 8005238 <_vfiprintf_r+0x18>
 8005230:	6983      	ldr	r3, [r0, #24]
 8005232:	b90b      	cbnz	r3, 8005238 <_vfiprintf_r+0x18>
 8005234:	f000 fca8 	bl	8005b88 <__sinit>
 8005238:	4b89      	ldr	r3, [pc, #548]	; (8005460 <_vfiprintf_r+0x240>)
 800523a:	429d      	cmp	r5, r3
 800523c:	d11b      	bne.n	8005276 <_vfiprintf_r+0x56>
 800523e:	6875      	ldr	r5, [r6, #4]
 8005240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005242:	07d9      	lsls	r1, r3, #31
 8005244:	d405      	bmi.n	8005252 <_vfiprintf_r+0x32>
 8005246:	89ab      	ldrh	r3, [r5, #12]
 8005248:	059a      	lsls	r2, r3, #22
 800524a:	d402      	bmi.n	8005252 <_vfiprintf_r+0x32>
 800524c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800524e:	f000 fd39 	bl	8005cc4 <__retarget_lock_acquire_recursive>
 8005252:	89ab      	ldrh	r3, [r5, #12]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	d501      	bpl.n	800525c <_vfiprintf_r+0x3c>
 8005258:	692b      	ldr	r3, [r5, #16]
 800525a:	b9eb      	cbnz	r3, 8005298 <_vfiprintf_r+0x78>
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f000 fb06 	bl	8005870 <__swsetup_r>
 8005264:	b1c0      	cbz	r0, 8005298 <_vfiprintf_r+0x78>
 8005266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005268:	07dc      	lsls	r4, r3, #31
 800526a:	d50e      	bpl.n	800528a <_vfiprintf_r+0x6a>
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
 8005270:	b01d      	add	sp, #116	; 0x74
 8005272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005276:	4b7b      	ldr	r3, [pc, #492]	; (8005464 <_vfiprintf_r+0x244>)
 8005278:	429d      	cmp	r5, r3
 800527a:	d101      	bne.n	8005280 <_vfiprintf_r+0x60>
 800527c:	68b5      	ldr	r5, [r6, #8]
 800527e:	e7df      	b.n	8005240 <_vfiprintf_r+0x20>
 8005280:	4b79      	ldr	r3, [pc, #484]	; (8005468 <_vfiprintf_r+0x248>)
 8005282:	429d      	cmp	r5, r3
 8005284:	bf08      	it	eq
 8005286:	68f5      	ldreq	r5, [r6, #12]
 8005288:	e7da      	b.n	8005240 <_vfiprintf_r+0x20>
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	0598      	lsls	r0, r3, #22
 800528e:	d4ed      	bmi.n	800526c <_vfiprintf_r+0x4c>
 8005290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005292:	f000 fd18 	bl	8005cc6 <__retarget_lock_release_recursive>
 8005296:	e7e9      	b.n	800526c <_vfiprintf_r+0x4c>
 8005298:	2300      	movs	r3, #0
 800529a:	9309      	str	r3, [sp, #36]	; 0x24
 800529c:	2320      	movs	r3, #32
 800529e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052a2:	2330      	movs	r3, #48	; 0x30
 80052a4:	f04f 0901 	mov.w	r9, #1
 80052a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800546c <_vfiprintf_r+0x24c>
 80052b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052b4:	4623      	mov	r3, r4
 80052b6:	469a      	mov	sl, r3
 80052b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052bc:	b10a      	cbz	r2, 80052c2 <_vfiprintf_r+0xa2>
 80052be:	2a25      	cmp	r2, #37	; 0x25
 80052c0:	d1f9      	bne.n	80052b6 <_vfiprintf_r+0x96>
 80052c2:	ebba 0b04 	subs.w	fp, sl, r4
 80052c6:	d00b      	beq.n	80052e0 <_vfiprintf_r+0xc0>
 80052c8:	465b      	mov	r3, fp
 80052ca:	4622      	mov	r2, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	4630      	mov	r0, r6
 80052d0:	f7ff ff93 	bl	80051fa <__sfputs_r>
 80052d4:	3001      	adds	r0, #1
 80052d6:	f000 80aa 	beq.w	800542e <_vfiprintf_r+0x20e>
 80052da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052dc:	445a      	add	r2, fp
 80052de:	9209      	str	r2, [sp, #36]	; 0x24
 80052e0:	f89a 3000 	ldrb.w	r3, [sl]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80a2 	beq.w	800542e <_vfiprintf_r+0x20e>
 80052ea:	2300      	movs	r3, #0
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295
 80052f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f4:	f10a 0a01 	add.w	sl, sl, #1
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	9307      	str	r3, [sp, #28]
 80052fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005300:	931a      	str	r3, [sp, #104]	; 0x68
 8005302:	4654      	mov	r4, sl
 8005304:	2205      	movs	r2, #5
 8005306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530a:	4858      	ldr	r0, [pc, #352]	; (800546c <_vfiprintf_r+0x24c>)
 800530c:	f000 fd42 	bl	8005d94 <memchr>
 8005310:	9a04      	ldr	r2, [sp, #16]
 8005312:	b9d8      	cbnz	r0, 800534c <_vfiprintf_r+0x12c>
 8005314:	06d1      	lsls	r1, r2, #27
 8005316:	bf44      	itt	mi
 8005318:	2320      	movmi	r3, #32
 800531a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531e:	0713      	lsls	r3, r2, #28
 8005320:	bf44      	itt	mi
 8005322:	232b      	movmi	r3, #43	; 0x2b
 8005324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005328:	f89a 3000 	ldrb.w	r3, [sl]
 800532c:	2b2a      	cmp	r3, #42	; 0x2a
 800532e:	d015      	beq.n	800535c <_vfiprintf_r+0x13c>
 8005330:	4654      	mov	r4, sl
 8005332:	2000      	movs	r0, #0
 8005334:	f04f 0c0a 	mov.w	ip, #10
 8005338:	9a07      	ldr	r2, [sp, #28]
 800533a:	4621      	mov	r1, r4
 800533c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005340:	3b30      	subs	r3, #48	; 0x30
 8005342:	2b09      	cmp	r3, #9
 8005344:	d94e      	bls.n	80053e4 <_vfiprintf_r+0x1c4>
 8005346:	b1b0      	cbz	r0, 8005376 <_vfiprintf_r+0x156>
 8005348:	9207      	str	r2, [sp, #28]
 800534a:	e014      	b.n	8005376 <_vfiprintf_r+0x156>
 800534c:	eba0 0308 	sub.w	r3, r0, r8
 8005350:	fa09 f303 	lsl.w	r3, r9, r3
 8005354:	4313      	orrs	r3, r2
 8005356:	46a2      	mov	sl, r4
 8005358:	9304      	str	r3, [sp, #16]
 800535a:	e7d2      	b.n	8005302 <_vfiprintf_r+0xe2>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	1d19      	adds	r1, r3, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	9103      	str	r1, [sp, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfbb      	ittet	lt
 8005368:	425b      	neglt	r3, r3
 800536a:	f042 0202 	orrlt.w	r2, r2, #2
 800536e:	9307      	strge	r3, [sp, #28]
 8005370:	9307      	strlt	r3, [sp, #28]
 8005372:	bfb8      	it	lt
 8005374:	9204      	strlt	r2, [sp, #16]
 8005376:	7823      	ldrb	r3, [r4, #0]
 8005378:	2b2e      	cmp	r3, #46	; 0x2e
 800537a:	d10c      	bne.n	8005396 <_vfiprintf_r+0x176>
 800537c:	7863      	ldrb	r3, [r4, #1]
 800537e:	2b2a      	cmp	r3, #42	; 0x2a
 8005380:	d135      	bne.n	80053ee <_vfiprintf_r+0x1ce>
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	3402      	adds	r4, #2
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	9203      	str	r2, [sp, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	bfb8      	it	lt
 8005390:	f04f 33ff 	movlt.w	r3, #4294967295
 8005394:	9305      	str	r3, [sp, #20]
 8005396:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005470 <_vfiprintf_r+0x250>
 800539a:	2203      	movs	r2, #3
 800539c:	4650      	mov	r0, sl
 800539e:	7821      	ldrb	r1, [r4, #0]
 80053a0:	f000 fcf8 	bl	8005d94 <memchr>
 80053a4:	b140      	cbz	r0, 80053b8 <_vfiprintf_r+0x198>
 80053a6:	2340      	movs	r3, #64	; 0x40
 80053a8:	eba0 000a 	sub.w	r0, r0, sl
 80053ac:	fa03 f000 	lsl.w	r0, r3, r0
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	3401      	adds	r4, #1
 80053b4:	4303      	orrs	r3, r0
 80053b6:	9304      	str	r3, [sp, #16]
 80053b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053bc:	2206      	movs	r2, #6
 80053be:	482d      	ldr	r0, [pc, #180]	; (8005474 <_vfiprintf_r+0x254>)
 80053c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053c4:	f000 fce6 	bl	8005d94 <memchr>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	d03f      	beq.n	800544c <_vfiprintf_r+0x22c>
 80053cc:	4b2a      	ldr	r3, [pc, #168]	; (8005478 <_vfiprintf_r+0x258>)
 80053ce:	bb1b      	cbnz	r3, 8005418 <_vfiprintf_r+0x1f8>
 80053d0:	9b03      	ldr	r3, [sp, #12]
 80053d2:	3307      	adds	r3, #7
 80053d4:	f023 0307 	bic.w	r3, r3, #7
 80053d8:	3308      	adds	r3, #8
 80053da:	9303      	str	r3, [sp, #12]
 80053dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053de:	443b      	add	r3, r7
 80053e0:	9309      	str	r3, [sp, #36]	; 0x24
 80053e2:	e767      	b.n	80052b4 <_vfiprintf_r+0x94>
 80053e4:	460c      	mov	r4, r1
 80053e6:	2001      	movs	r0, #1
 80053e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80053ec:	e7a5      	b.n	800533a <_vfiprintf_r+0x11a>
 80053ee:	2300      	movs	r3, #0
 80053f0:	f04f 0c0a 	mov.w	ip, #10
 80053f4:	4619      	mov	r1, r3
 80053f6:	3401      	adds	r4, #1
 80053f8:	9305      	str	r3, [sp, #20]
 80053fa:	4620      	mov	r0, r4
 80053fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005400:	3a30      	subs	r2, #48	; 0x30
 8005402:	2a09      	cmp	r2, #9
 8005404:	d903      	bls.n	800540e <_vfiprintf_r+0x1ee>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0c5      	beq.n	8005396 <_vfiprintf_r+0x176>
 800540a:	9105      	str	r1, [sp, #20]
 800540c:	e7c3      	b.n	8005396 <_vfiprintf_r+0x176>
 800540e:	4604      	mov	r4, r0
 8005410:	2301      	movs	r3, #1
 8005412:	fb0c 2101 	mla	r1, ip, r1, r2
 8005416:	e7f0      	b.n	80053fa <_vfiprintf_r+0x1da>
 8005418:	ab03      	add	r3, sp, #12
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	462a      	mov	r2, r5
 800541e:	4630      	mov	r0, r6
 8005420:	4b16      	ldr	r3, [pc, #88]	; (800547c <_vfiprintf_r+0x25c>)
 8005422:	a904      	add	r1, sp, #16
 8005424:	f3af 8000 	nop.w
 8005428:	4607      	mov	r7, r0
 800542a:	1c78      	adds	r0, r7, #1
 800542c:	d1d6      	bne.n	80053dc <_vfiprintf_r+0x1bc>
 800542e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005430:	07d9      	lsls	r1, r3, #31
 8005432:	d405      	bmi.n	8005440 <_vfiprintf_r+0x220>
 8005434:	89ab      	ldrh	r3, [r5, #12]
 8005436:	059a      	lsls	r2, r3, #22
 8005438:	d402      	bmi.n	8005440 <_vfiprintf_r+0x220>
 800543a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800543c:	f000 fc43 	bl	8005cc6 <__retarget_lock_release_recursive>
 8005440:	89ab      	ldrh	r3, [r5, #12]
 8005442:	065b      	lsls	r3, r3, #25
 8005444:	f53f af12 	bmi.w	800526c <_vfiprintf_r+0x4c>
 8005448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544a:	e711      	b.n	8005270 <_vfiprintf_r+0x50>
 800544c:	ab03      	add	r3, sp, #12
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	462a      	mov	r2, r5
 8005452:	4630      	mov	r0, r6
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <_vfiprintf_r+0x25c>)
 8005456:	a904      	add	r1, sp, #16
 8005458:	f000 f882 	bl	8005560 <_printf_i>
 800545c:	e7e4      	b.n	8005428 <_vfiprintf_r+0x208>
 800545e:	bf00      	nop
 8005460:	0800bd4c 	.word	0x0800bd4c
 8005464:	0800bd6c 	.word	0x0800bd6c
 8005468:	0800bd2c 	.word	0x0800bd2c
 800546c:	0800bcf6 	.word	0x0800bcf6
 8005470:	0800bcfc 	.word	0x0800bcfc
 8005474:	0800bd00 	.word	0x0800bd00
 8005478:	00000000 	.word	0x00000000
 800547c:	080051fb 	.word	0x080051fb

08005480 <_printf_common>:
 8005480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	4616      	mov	r6, r2
 8005486:	4699      	mov	r9, r3
 8005488:	688a      	ldr	r2, [r1, #8]
 800548a:	690b      	ldr	r3, [r1, #16]
 800548c:	4607      	mov	r7, r0
 800548e:	4293      	cmp	r3, r2
 8005490:	bfb8      	it	lt
 8005492:	4613      	movlt	r3, r2
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800549a:	460c      	mov	r4, r1
 800549c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054a0:	b10a      	cbz	r2, 80054a6 <_printf_common+0x26>
 80054a2:	3301      	adds	r3, #1
 80054a4:	6033      	str	r3, [r6, #0]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	0699      	lsls	r1, r3, #26
 80054aa:	bf42      	ittt	mi
 80054ac:	6833      	ldrmi	r3, [r6, #0]
 80054ae:	3302      	addmi	r3, #2
 80054b0:	6033      	strmi	r3, [r6, #0]
 80054b2:	6825      	ldr	r5, [r4, #0]
 80054b4:	f015 0506 	ands.w	r5, r5, #6
 80054b8:	d106      	bne.n	80054c8 <_printf_common+0x48>
 80054ba:	f104 0a19 	add.w	sl, r4, #25
 80054be:	68e3      	ldr	r3, [r4, #12]
 80054c0:	6832      	ldr	r2, [r6, #0]
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	42ab      	cmp	r3, r5
 80054c6:	dc28      	bgt.n	800551a <_printf_common+0x9a>
 80054c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054cc:	1e13      	subs	r3, r2, #0
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	bf18      	it	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	0692      	lsls	r2, r2, #26
 80054d6:	d42d      	bmi.n	8005534 <_printf_common+0xb4>
 80054d8:	4649      	mov	r1, r9
 80054da:	4638      	mov	r0, r7
 80054dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e0:	47c0      	blx	r8
 80054e2:	3001      	adds	r0, #1
 80054e4:	d020      	beq.n	8005528 <_printf_common+0xa8>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	68e5      	ldr	r5, [r4, #12]
 80054ea:	f003 0306 	and.w	r3, r3, #6
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	bf18      	it	ne
 80054f2:	2500      	movne	r5, #0
 80054f4:	6832      	ldr	r2, [r6, #0]
 80054f6:	f04f 0600 	mov.w	r6, #0
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	bf08      	it	eq
 80054fe:	1aad      	subeq	r5, r5, r2
 8005500:	6922      	ldr	r2, [r4, #16]
 8005502:	bf08      	it	eq
 8005504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005508:	4293      	cmp	r3, r2
 800550a:	bfc4      	itt	gt
 800550c:	1a9b      	subgt	r3, r3, r2
 800550e:	18ed      	addgt	r5, r5, r3
 8005510:	341a      	adds	r4, #26
 8005512:	42b5      	cmp	r5, r6
 8005514:	d11a      	bne.n	800554c <_printf_common+0xcc>
 8005516:	2000      	movs	r0, #0
 8005518:	e008      	b.n	800552c <_printf_common+0xac>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4649      	mov	r1, r9
 8005520:	4638      	mov	r0, r7
 8005522:	47c0      	blx	r8
 8005524:	3001      	adds	r0, #1
 8005526:	d103      	bne.n	8005530 <_printf_common+0xb0>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	3501      	adds	r5, #1
 8005532:	e7c4      	b.n	80054be <_printf_common+0x3e>
 8005534:	2030      	movs	r0, #48	; 0x30
 8005536:	18e1      	adds	r1, r4, r3
 8005538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005542:	4422      	add	r2, r4
 8005544:	3302      	adds	r3, #2
 8005546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800554a:	e7c5      	b.n	80054d8 <_printf_common+0x58>
 800554c:	2301      	movs	r3, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4649      	mov	r1, r9
 8005552:	4638      	mov	r0, r7
 8005554:	47c0      	blx	r8
 8005556:	3001      	adds	r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa8>
 800555a:	3601      	adds	r6, #1
 800555c:	e7d9      	b.n	8005512 <_printf_common+0x92>
	...

08005560 <_printf_i>:
 8005560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	7e0f      	ldrb	r7, [r1, #24]
 8005566:	4691      	mov	r9, r2
 8005568:	2f78      	cmp	r7, #120	; 0x78
 800556a:	4680      	mov	r8, r0
 800556c:	460c      	mov	r4, r1
 800556e:	469a      	mov	sl, r3
 8005570:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005576:	d807      	bhi.n	8005588 <_printf_i+0x28>
 8005578:	2f62      	cmp	r7, #98	; 0x62
 800557a:	d80a      	bhi.n	8005592 <_printf_i+0x32>
 800557c:	2f00      	cmp	r7, #0
 800557e:	f000 80d9 	beq.w	8005734 <_printf_i+0x1d4>
 8005582:	2f58      	cmp	r7, #88	; 0x58
 8005584:	f000 80a4 	beq.w	80056d0 <_printf_i+0x170>
 8005588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005590:	e03a      	b.n	8005608 <_printf_i+0xa8>
 8005592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005596:	2b15      	cmp	r3, #21
 8005598:	d8f6      	bhi.n	8005588 <_printf_i+0x28>
 800559a:	a101      	add	r1, pc, #4	; (adr r1, 80055a0 <_printf_i+0x40>)
 800559c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	08005589 	.word	0x08005589
 80055ac:	08005589 	.word	0x08005589
 80055b0:	08005589 	.word	0x08005589
 80055b4:	08005589 	.word	0x08005589
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005589 	.word	0x08005589
 80055c0:	08005589 	.word	0x08005589
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	0800571b 	.word	0x0800571b
 80055d0:	0800563d 	.word	0x0800563d
 80055d4:	080056fd 	.word	0x080056fd
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	0800573d 	.word	0x0800573d
 80055e4:	08005589 	.word	0x08005589
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	08005705 	.word	0x08005705
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	602a      	str	r2, [r5, #0]
 8005600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005608:	2301      	movs	r3, #1
 800560a:	e0a4      	b.n	8005756 <_printf_i+0x1f6>
 800560c:	6820      	ldr	r0, [r4, #0]
 800560e:	6829      	ldr	r1, [r5, #0]
 8005610:	0606      	lsls	r6, r0, #24
 8005612:	f101 0304 	add.w	r3, r1, #4
 8005616:	d50a      	bpl.n	800562e <_printf_i+0xce>
 8005618:	680e      	ldr	r6, [r1, #0]
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	2e00      	cmp	r6, #0
 800561e:	da03      	bge.n	8005628 <_printf_i+0xc8>
 8005620:	232d      	movs	r3, #45	; 0x2d
 8005622:	4276      	negs	r6, r6
 8005624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005628:	230a      	movs	r3, #10
 800562a:	485e      	ldr	r0, [pc, #376]	; (80057a4 <_printf_i+0x244>)
 800562c:	e019      	b.n	8005662 <_printf_i+0x102>
 800562e:	680e      	ldr	r6, [r1, #0]
 8005630:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005634:	602b      	str	r3, [r5, #0]
 8005636:	bf18      	it	ne
 8005638:	b236      	sxthne	r6, r6
 800563a:	e7ef      	b.n	800561c <_printf_i+0xbc>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	6029      	str	r1, [r5, #0]
 8005644:	0601      	lsls	r1, r0, #24
 8005646:	d501      	bpl.n	800564c <_printf_i+0xec>
 8005648:	681e      	ldr	r6, [r3, #0]
 800564a:	e002      	b.n	8005652 <_printf_i+0xf2>
 800564c:	0646      	lsls	r6, r0, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0xe8>
 8005650:	881e      	ldrh	r6, [r3, #0]
 8005652:	2f6f      	cmp	r7, #111	; 0x6f
 8005654:	bf0c      	ite	eq
 8005656:	2308      	moveq	r3, #8
 8005658:	230a      	movne	r3, #10
 800565a:	4852      	ldr	r0, [pc, #328]	; (80057a4 <_printf_i+0x244>)
 800565c:	2100      	movs	r1, #0
 800565e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005662:	6865      	ldr	r5, [r4, #4]
 8005664:	2d00      	cmp	r5, #0
 8005666:	bfa8      	it	ge
 8005668:	6821      	ldrge	r1, [r4, #0]
 800566a:	60a5      	str	r5, [r4, #8]
 800566c:	bfa4      	itt	ge
 800566e:	f021 0104 	bicge.w	r1, r1, #4
 8005672:	6021      	strge	r1, [r4, #0]
 8005674:	b90e      	cbnz	r6, 800567a <_printf_i+0x11a>
 8005676:	2d00      	cmp	r5, #0
 8005678:	d04d      	beq.n	8005716 <_printf_i+0x1b6>
 800567a:	4615      	mov	r5, r2
 800567c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005680:	fb03 6711 	mls	r7, r3, r1, r6
 8005684:	5dc7      	ldrb	r7, [r0, r7]
 8005686:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800568a:	4637      	mov	r7, r6
 800568c:	42bb      	cmp	r3, r7
 800568e:	460e      	mov	r6, r1
 8005690:	d9f4      	bls.n	800567c <_printf_i+0x11c>
 8005692:	2b08      	cmp	r3, #8
 8005694:	d10b      	bne.n	80056ae <_printf_i+0x14e>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	07de      	lsls	r6, r3, #31
 800569a:	d508      	bpl.n	80056ae <_printf_i+0x14e>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	6861      	ldr	r1, [r4, #4]
 80056a0:	4299      	cmp	r1, r3
 80056a2:	bfde      	ittt	le
 80056a4:	2330      	movle	r3, #48	; 0x30
 80056a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056ae:	1b52      	subs	r2, r2, r5
 80056b0:	6122      	str	r2, [r4, #16]
 80056b2:	464b      	mov	r3, r9
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f8cd a000 	str.w	sl, [sp]
 80056bc:	aa03      	add	r2, sp, #12
 80056be:	f7ff fedf 	bl	8005480 <_printf_common>
 80056c2:	3001      	adds	r0, #1
 80056c4:	d14c      	bne.n	8005760 <_printf_i+0x200>
 80056c6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ca:	b004      	add	sp, #16
 80056cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d0:	4834      	ldr	r0, [pc, #208]	; (80057a4 <_printf_i+0x244>)
 80056d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056d6:	6829      	ldr	r1, [r5, #0]
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	f851 6b04 	ldr.w	r6, [r1], #4
 80056de:	6029      	str	r1, [r5, #0]
 80056e0:	061d      	lsls	r5, r3, #24
 80056e2:	d514      	bpl.n	800570e <_printf_i+0x1ae>
 80056e4:	07df      	lsls	r7, r3, #31
 80056e6:	bf44      	itt	mi
 80056e8:	f043 0320 	orrmi.w	r3, r3, #32
 80056ec:	6023      	strmi	r3, [r4, #0]
 80056ee:	b91e      	cbnz	r6, 80056f8 <_printf_i+0x198>
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	f023 0320 	bic.w	r3, r3, #32
 80056f6:	6023      	str	r3, [r4, #0]
 80056f8:	2310      	movs	r3, #16
 80056fa:	e7af      	b.n	800565c <_printf_i+0xfc>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f043 0320 	orr.w	r3, r3, #32
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	2378      	movs	r3, #120	; 0x78
 8005706:	4828      	ldr	r0, [pc, #160]	; (80057a8 <_printf_i+0x248>)
 8005708:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800570c:	e7e3      	b.n	80056d6 <_printf_i+0x176>
 800570e:	0659      	lsls	r1, r3, #25
 8005710:	bf48      	it	mi
 8005712:	b2b6      	uxthmi	r6, r6
 8005714:	e7e6      	b.n	80056e4 <_printf_i+0x184>
 8005716:	4615      	mov	r5, r2
 8005718:	e7bb      	b.n	8005692 <_printf_i+0x132>
 800571a:	682b      	ldr	r3, [r5, #0]
 800571c:	6826      	ldr	r6, [r4, #0]
 800571e:	1d18      	adds	r0, r3, #4
 8005720:	6961      	ldr	r1, [r4, #20]
 8005722:	6028      	str	r0, [r5, #0]
 8005724:	0635      	lsls	r5, r6, #24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	d501      	bpl.n	800572e <_printf_i+0x1ce>
 800572a:	6019      	str	r1, [r3, #0]
 800572c:	e002      	b.n	8005734 <_printf_i+0x1d4>
 800572e:	0670      	lsls	r0, r6, #25
 8005730:	d5fb      	bpl.n	800572a <_printf_i+0x1ca>
 8005732:	8019      	strh	r1, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	4615      	mov	r5, r2
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	e7ba      	b.n	80056b2 <_printf_i+0x152>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	2100      	movs	r1, #0
 8005740:	1d1a      	adds	r2, r3, #4
 8005742:	602a      	str	r2, [r5, #0]
 8005744:	681d      	ldr	r5, [r3, #0]
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	4628      	mov	r0, r5
 800574a:	f000 fb23 	bl	8005d94 <memchr>
 800574e:	b108      	cbz	r0, 8005754 <_printf_i+0x1f4>
 8005750:	1b40      	subs	r0, r0, r5
 8005752:	6060      	str	r0, [r4, #4]
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	2300      	movs	r3, #0
 800575a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800575e:	e7a8      	b.n	80056b2 <_printf_i+0x152>
 8005760:	462a      	mov	r2, r5
 8005762:	4649      	mov	r1, r9
 8005764:	4640      	mov	r0, r8
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	47d0      	blx	sl
 800576a:	3001      	adds	r0, #1
 800576c:	d0ab      	beq.n	80056c6 <_printf_i+0x166>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	079b      	lsls	r3, r3, #30
 8005772:	d413      	bmi.n	800579c <_printf_i+0x23c>
 8005774:	68e0      	ldr	r0, [r4, #12]
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	4298      	cmp	r0, r3
 800577a:	bfb8      	it	lt
 800577c:	4618      	movlt	r0, r3
 800577e:	e7a4      	b.n	80056ca <_printf_i+0x16a>
 8005780:	2301      	movs	r3, #1
 8005782:	4632      	mov	r2, r6
 8005784:	4649      	mov	r1, r9
 8005786:	4640      	mov	r0, r8
 8005788:	47d0      	blx	sl
 800578a:	3001      	adds	r0, #1
 800578c:	d09b      	beq.n	80056c6 <_printf_i+0x166>
 800578e:	3501      	adds	r5, #1
 8005790:	68e3      	ldr	r3, [r4, #12]
 8005792:	9903      	ldr	r1, [sp, #12]
 8005794:	1a5b      	subs	r3, r3, r1
 8005796:	42ab      	cmp	r3, r5
 8005798:	dcf2      	bgt.n	8005780 <_printf_i+0x220>
 800579a:	e7eb      	b.n	8005774 <_printf_i+0x214>
 800579c:	2500      	movs	r5, #0
 800579e:	f104 0619 	add.w	r6, r4, #25
 80057a2:	e7f5      	b.n	8005790 <_printf_i+0x230>
 80057a4:	0800bd07 	.word	0x0800bd07
 80057a8:	0800bd18 	.word	0x0800bd18

080057ac <_sbrk_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	2300      	movs	r3, #0
 80057b0:	4d05      	ldr	r5, [pc, #20]	; (80057c8 <_sbrk_r+0x1c>)
 80057b2:	4604      	mov	r4, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	f7fb fd26 	bl	8001208 <_sbrk>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_sbrk_r+0x1a>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_sbrk_r+0x1a>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	20002c5c 	.word	0x20002c5c

080057cc <__swbuf_r>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	460e      	mov	r6, r1
 80057d0:	4614      	mov	r4, r2
 80057d2:	4605      	mov	r5, r0
 80057d4:	b118      	cbz	r0, 80057de <__swbuf_r+0x12>
 80057d6:	6983      	ldr	r3, [r0, #24]
 80057d8:	b90b      	cbnz	r3, 80057de <__swbuf_r+0x12>
 80057da:	f000 f9d5 	bl	8005b88 <__sinit>
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <__swbuf_r+0x98>)
 80057e0:	429c      	cmp	r4, r3
 80057e2:	d12b      	bne.n	800583c <__swbuf_r+0x70>
 80057e4:	686c      	ldr	r4, [r5, #4]
 80057e6:	69a3      	ldr	r3, [r4, #24]
 80057e8:	60a3      	str	r3, [r4, #8]
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	071a      	lsls	r2, r3, #28
 80057ee:	d52f      	bpl.n	8005850 <__swbuf_r+0x84>
 80057f0:	6923      	ldr	r3, [r4, #16]
 80057f2:	b36b      	cbz	r3, 8005850 <__swbuf_r+0x84>
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	6820      	ldr	r0, [r4, #0]
 80057f8:	b2f6      	uxtb	r6, r6
 80057fa:	1ac0      	subs	r0, r0, r3
 80057fc:	6963      	ldr	r3, [r4, #20]
 80057fe:	4637      	mov	r7, r6
 8005800:	4283      	cmp	r3, r0
 8005802:	dc04      	bgt.n	800580e <__swbuf_r+0x42>
 8005804:	4621      	mov	r1, r4
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f92a 	bl	8005a60 <_fflush_r>
 800580c:	bb30      	cbnz	r0, 800585c <__swbuf_r+0x90>
 800580e:	68a3      	ldr	r3, [r4, #8]
 8005810:	3001      	adds	r0, #1
 8005812:	3b01      	subs	r3, #1
 8005814:	60a3      	str	r3, [r4, #8]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	6022      	str	r2, [r4, #0]
 800581c:	701e      	strb	r6, [r3, #0]
 800581e:	6963      	ldr	r3, [r4, #20]
 8005820:	4283      	cmp	r3, r0
 8005822:	d004      	beq.n	800582e <__swbuf_r+0x62>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	07db      	lsls	r3, r3, #31
 8005828:	d506      	bpl.n	8005838 <__swbuf_r+0x6c>
 800582a:	2e0a      	cmp	r6, #10
 800582c:	d104      	bne.n	8005838 <__swbuf_r+0x6c>
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	f000 f915 	bl	8005a60 <_fflush_r>
 8005836:	b988      	cbnz	r0, 800585c <__swbuf_r+0x90>
 8005838:	4638      	mov	r0, r7
 800583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <__swbuf_r+0x9c>)
 800583e:	429c      	cmp	r4, r3
 8005840:	d101      	bne.n	8005846 <__swbuf_r+0x7a>
 8005842:	68ac      	ldr	r4, [r5, #8]
 8005844:	e7cf      	b.n	80057e6 <__swbuf_r+0x1a>
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <__swbuf_r+0xa0>)
 8005848:	429c      	cmp	r4, r3
 800584a:	bf08      	it	eq
 800584c:	68ec      	ldreq	r4, [r5, #12]
 800584e:	e7ca      	b.n	80057e6 <__swbuf_r+0x1a>
 8005850:	4621      	mov	r1, r4
 8005852:	4628      	mov	r0, r5
 8005854:	f000 f80c 	bl	8005870 <__swsetup_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	d0cb      	beq.n	80057f4 <__swbuf_r+0x28>
 800585c:	f04f 37ff 	mov.w	r7, #4294967295
 8005860:	e7ea      	b.n	8005838 <__swbuf_r+0x6c>
 8005862:	bf00      	nop
 8005864:	0800bd4c 	.word	0x0800bd4c
 8005868:	0800bd6c 	.word	0x0800bd6c
 800586c:	0800bd2c 	.word	0x0800bd2c

08005870 <__swsetup_r>:
 8005870:	4b32      	ldr	r3, [pc, #200]	; (800593c <__swsetup_r+0xcc>)
 8005872:	b570      	push	{r4, r5, r6, lr}
 8005874:	681d      	ldr	r5, [r3, #0]
 8005876:	4606      	mov	r6, r0
 8005878:	460c      	mov	r4, r1
 800587a:	b125      	cbz	r5, 8005886 <__swsetup_r+0x16>
 800587c:	69ab      	ldr	r3, [r5, #24]
 800587e:	b913      	cbnz	r3, 8005886 <__swsetup_r+0x16>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f981 	bl	8005b88 <__sinit>
 8005886:	4b2e      	ldr	r3, [pc, #184]	; (8005940 <__swsetup_r+0xd0>)
 8005888:	429c      	cmp	r4, r3
 800588a:	d10f      	bne.n	80058ac <__swsetup_r+0x3c>
 800588c:	686c      	ldr	r4, [r5, #4]
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005894:	0719      	lsls	r1, r3, #28
 8005896:	d42c      	bmi.n	80058f2 <__swsetup_r+0x82>
 8005898:	06dd      	lsls	r5, r3, #27
 800589a:	d411      	bmi.n	80058c0 <__swsetup_r+0x50>
 800589c:	2309      	movs	r3, #9
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	e03e      	b.n	800592a <__swsetup_r+0xba>
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <__swsetup_r+0xd4>)
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d101      	bne.n	80058b6 <__swsetup_r+0x46>
 80058b2:	68ac      	ldr	r4, [r5, #8]
 80058b4:	e7eb      	b.n	800588e <__swsetup_r+0x1e>
 80058b6:	4b24      	ldr	r3, [pc, #144]	; (8005948 <__swsetup_r+0xd8>)
 80058b8:	429c      	cmp	r4, r3
 80058ba:	bf08      	it	eq
 80058bc:	68ec      	ldreq	r4, [r5, #12]
 80058be:	e7e6      	b.n	800588e <__swsetup_r+0x1e>
 80058c0:	0758      	lsls	r0, r3, #29
 80058c2:	d512      	bpl.n	80058ea <__swsetup_r+0x7a>
 80058c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058c6:	b141      	cbz	r1, 80058da <__swsetup_r+0x6a>
 80058c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058cc:	4299      	cmp	r1, r3
 80058ce:	d002      	beq.n	80058d6 <__swsetup_r+0x66>
 80058d0:	4630      	mov	r0, r6
 80058d2:	f7ff fa45 	bl	8004d60 <_free_r>
 80058d6:	2300      	movs	r3, #0
 80058d8:	6363      	str	r3, [r4, #52]	; 0x34
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058e0:	81a3      	strh	r3, [r4, #12]
 80058e2:	2300      	movs	r3, #0
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	6923      	ldr	r3, [r4, #16]
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	89a3      	ldrh	r3, [r4, #12]
 80058ec:	f043 0308 	orr.w	r3, r3, #8
 80058f0:	81a3      	strh	r3, [r4, #12]
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	b94b      	cbnz	r3, 800590a <__swsetup_r+0x9a>
 80058f6:	89a3      	ldrh	r3, [r4, #12]
 80058f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005900:	d003      	beq.n	800590a <__swsetup_r+0x9a>
 8005902:	4621      	mov	r1, r4
 8005904:	4630      	mov	r0, r6
 8005906:	f000 fa05 	bl	8005d14 <__smakebuf_r>
 800590a:	89a0      	ldrh	r0, [r4, #12]
 800590c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005910:	f010 0301 	ands.w	r3, r0, #1
 8005914:	d00a      	beq.n	800592c <__swsetup_r+0xbc>
 8005916:	2300      	movs	r3, #0
 8005918:	60a3      	str	r3, [r4, #8]
 800591a:	6963      	ldr	r3, [r4, #20]
 800591c:	425b      	negs	r3, r3
 800591e:	61a3      	str	r3, [r4, #24]
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	b943      	cbnz	r3, 8005936 <__swsetup_r+0xc6>
 8005924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005928:	d1ba      	bne.n	80058a0 <__swsetup_r+0x30>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	0781      	lsls	r1, r0, #30
 800592e:	bf58      	it	pl
 8005930:	6963      	ldrpl	r3, [r4, #20]
 8005932:	60a3      	str	r3, [r4, #8]
 8005934:	e7f4      	b.n	8005920 <__swsetup_r+0xb0>
 8005936:	2000      	movs	r0, #0
 8005938:	e7f7      	b.n	800592a <__swsetup_r+0xba>
 800593a:	bf00      	nop
 800593c:	2000005c 	.word	0x2000005c
 8005940:	0800bd4c 	.word	0x0800bd4c
 8005944:	0800bd6c 	.word	0x0800bd6c
 8005948:	0800bd2c 	.word	0x0800bd2c

0800594c <abort>:
 800594c:	2006      	movs	r0, #6
 800594e:	b508      	push	{r3, lr}
 8005950:	f000 faac 	bl	8005eac <raise>
 8005954:	2001      	movs	r0, #1
 8005956:	f7fb fbe4 	bl	8001122 <_exit>
	...

0800595c <__sflush_r>:
 800595c:	898a      	ldrh	r2, [r1, #12]
 800595e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005960:	4605      	mov	r5, r0
 8005962:	0710      	lsls	r0, r2, #28
 8005964:	460c      	mov	r4, r1
 8005966:	d457      	bmi.n	8005a18 <__sflush_r+0xbc>
 8005968:	684b      	ldr	r3, [r1, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	dc04      	bgt.n	8005978 <__sflush_r+0x1c>
 800596e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	dc01      	bgt.n	8005978 <__sflush_r+0x1c>
 8005974:	2000      	movs	r0, #0
 8005976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800597a:	2e00      	cmp	r6, #0
 800597c:	d0fa      	beq.n	8005974 <__sflush_r+0x18>
 800597e:	2300      	movs	r3, #0
 8005980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005984:	682f      	ldr	r7, [r5, #0]
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	d032      	beq.n	80059f0 <__sflush_r+0x94>
 800598a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	075a      	lsls	r2, r3, #29
 8005990:	d505      	bpl.n	800599e <__sflush_r+0x42>
 8005992:	6863      	ldr	r3, [r4, #4]
 8005994:	1ac0      	subs	r0, r0, r3
 8005996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005998:	b10b      	cbz	r3, 800599e <__sflush_r+0x42>
 800599a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800599c:	1ac0      	subs	r0, r0, r3
 800599e:	2300      	movs	r3, #0
 80059a0:	4602      	mov	r2, r0
 80059a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059a4:	4628      	mov	r0, r5
 80059a6:	6a21      	ldr	r1, [r4, #32]
 80059a8:	47b0      	blx	r6
 80059aa:	1c43      	adds	r3, r0, #1
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	d106      	bne.n	80059be <__sflush_r+0x62>
 80059b0:	6829      	ldr	r1, [r5, #0]
 80059b2:	291d      	cmp	r1, #29
 80059b4:	d82c      	bhi.n	8005a10 <__sflush_r+0xb4>
 80059b6:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <__sflush_r+0x100>)
 80059b8:	40ca      	lsrs	r2, r1
 80059ba:	07d6      	lsls	r6, r2, #31
 80059bc:	d528      	bpl.n	8005a10 <__sflush_r+0xb4>
 80059be:	2200      	movs	r2, #0
 80059c0:	6062      	str	r2, [r4, #4]
 80059c2:	6922      	ldr	r2, [r4, #16]
 80059c4:	04d9      	lsls	r1, r3, #19
 80059c6:	6022      	str	r2, [r4, #0]
 80059c8:	d504      	bpl.n	80059d4 <__sflush_r+0x78>
 80059ca:	1c42      	adds	r2, r0, #1
 80059cc:	d101      	bne.n	80059d2 <__sflush_r+0x76>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	b903      	cbnz	r3, 80059d4 <__sflush_r+0x78>
 80059d2:	6560      	str	r0, [r4, #84]	; 0x54
 80059d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059d6:	602f      	str	r7, [r5, #0]
 80059d8:	2900      	cmp	r1, #0
 80059da:	d0cb      	beq.n	8005974 <__sflush_r+0x18>
 80059dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e0:	4299      	cmp	r1, r3
 80059e2:	d002      	beq.n	80059ea <__sflush_r+0x8e>
 80059e4:	4628      	mov	r0, r5
 80059e6:	f7ff f9bb 	bl	8004d60 <_free_r>
 80059ea:	2000      	movs	r0, #0
 80059ec:	6360      	str	r0, [r4, #52]	; 0x34
 80059ee:	e7c2      	b.n	8005976 <__sflush_r+0x1a>
 80059f0:	6a21      	ldr	r1, [r4, #32]
 80059f2:	2301      	movs	r3, #1
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b0      	blx	r6
 80059f8:	1c41      	adds	r1, r0, #1
 80059fa:	d1c7      	bne.n	800598c <__sflush_r+0x30>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0c4      	beq.n	800598c <__sflush_r+0x30>
 8005a02:	2b1d      	cmp	r3, #29
 8005a04:	d001      	beq.n	8005a0a <__sflush_r+0xae>
 8005a06:	2b16      	cmp	r3, #22
 8005a08:	d101      	bne.n	8005a0e <__sflush_r+0xb2>
 8005a0a:	602f      	str	r7, [r5, #0]
 8005a0c:	e7b2      	b.n	8005974 <__sflush_r+0x18>
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	e7ae      	b.n	8005976 <__sflush_r+0x1a>
 8005a18:	690f      	ldr	r7, [r1, #16]
 8005a1a:	2f00      	cmp	r7, #0
 8005a1c:	d0aa      	beq.n	8005974 <__sflush_r+0x18>
 8005a1e:	0793      	lsls	r3, r2, #30
 8005a20:	bf18      	it	ne
 8005a22:	2300      	movne	r3, #0
 8005a24:	680e      	ldr	r6, [r1, #0]
 8005a26:	bf08      	it	eq
 8005a28:	694b      	ldreq	r3, [r1, #20]
 8005a2a:	1bf6      	subs	r6, r6, r7
 8005a2c:	600f      	str	r7, [r1, #0]
 8005a2e:	608b      	str	r3, [r1, #8]
 8005a30:	2e00      	cmp	r6, #0
 8005a32:	dd9f      	ble.n	8005974 <__sflush_r+0x18>
 8005a34:	4633      	mov	r3, r6
 8005a36:	463a      	mov	r2, r7
 8005a38:	4628      	mov	r0, r5
 8005a3a:	6a21      	ldr	r1, [r4, #32]
 8005a3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a40:	47e0      	blx	ip
 8005a42:	2800      	cmp	r0, #0
 8005a44:	dc06      	bgt.n	8005a54 <__sflush_r+0xf8>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	e790      	b.n	8005976 <__sflush_r+0x1a>
 8005a54:	4407      	add	r7, r0
 8005a56:	1a36      	subs	r6, r6, r0
 8005a58:	e7ea      	b.n	8005a30 <__sflush_r+0xd4>
 8005a5a:	bf00      	nop
 8005a5c:	20400001 	.word	0x20400001

08005a60 <_fflush_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	690b      	ldr	r3, [r1, #16]
 8005a64:	4605      	mov	r5, r0
 8005a66:	460c      	mov	r4, r1
 8005a68:	b913      	cbnz	r3, 8005a70 <_fflush_r+0x10>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
 8005a70:	b118      	cbz	r0, 8005a7a <_fflush_r+0x1a>
 8005a72:	6983      	ldr	r3, [r0, #24]
 8005a74:	b90b      	cbnz	r3, 8005a7a <_fflush_r+0x1a>
 8005a76:	f000 f887 	bl	8005b88 <__sinit>
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <_fflush_r+0x6c>)
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	d11b      	bne.n	8005ab8 <_fflush_r+0x58>
 8005a80:	686c      	ldr	r4, [r5, #4]
 8005a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0ef      	beq.n	8005a6a <_fflush_r+0xa>
 8005a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a8c:	07d0      	lsls	r0, r2, #31
 8005a8e:	d404      	bmi.n	8005a9a <_fflush_r+0x3a>
 8005a90:	0599      	lsls	r1, r3, #22
 8005a92:	d402      	bmi.n	8005a9a <_fflush_r+0x3a>
 8005a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a96:	f000 f915 	bl	8005cc4 <__retarget_lock_acquire_recursive>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	f7ff ff5d 	bl	800595c <__sflush_r>
 8005aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	07da      	lsls	r2, r3, #31
 8005aa8:	d4e0      	bmi.n	8005a6c <_fflush_r+0xc>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	059b      	lsls	r3, r3, #22
 8005aae:	d4dd      	bmi.n	8005a6c <_fflush_r+0xc>
 8005ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ab2:	f000 f908 	bl	8005cc6 <__retarget_lock_release_recursive>
 8005ab6:	e7d9      	b.n	8005a6c <_fflush_r+0xc>
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <_fflush_r+0x70>)
 8005aba:	429c      	cmp	r4, r3
 8005abc:	d101      	bne.n	8005ac2 <_fflush_r+0x62>
 8005abe:	68ac      	ldr	r4, [r5, #8]
 8005ac0:	e7df      	b.n	8005a82 <_fflush_r+0x22>
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <_fflush_r+0x74>)
 8005ac4:	429c      	cmp	r4, r3
 8005ac6:	bf08      	it	eq
 8005ac8:	68ec      	ldreq	r4, [r5, #12]
 8005aca:	e7da      	b.n	8005a82 <_fflush_r+0x22>
 8005acc:	0800bd4c 	.word	0x0800bd4c
 8005ad0:	0800bd6c 	.word	0x0800bd6c
 8005ad4:	0800bd2c 	.word	0x0800bd2c

08005ad8 <std>:
 8005ad8:	2300      	movs	r3, #0
 8005ada:	b510      	push	{r4, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	e9c0 3300 	strd	r3, r3, [r0]
 8005ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae6:	6083      	str	r3, [r0, #8]
 8005ae8:	8181      	strh	r1, [r0, #12]
 8005aea:	6643      	str	r3, [r0, #100]	; 0x64
 8005aec:	81c2      	strh	r2, [r0, #14]
 8005aee:	6183      	str	r3, [r0, #24]
 8005af0:	4619      	mov	r1, r3
 8005af2:	2208      	movs	r2, #8
 8005af4:	305c      	adds	r0, #92	; 0x5c
 8005af6:	f7ff f867 	bl	8004bc8 <memset>
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <std+0x38>)
 8005afc:	6224      	str	r4, [r4, #32]
 8005afe:	6263      	str	r3, [r4, #36]	; 0x24
 8005b00:	4b04      	ldr	r3, [pc, #16]	; (8005b14 <std+0x3c>)
 8005b02:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <std+0x40>)
 8005b06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <std+0x44>)
 8005b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	bf00      	nop
 8005b10:	08005ee5 	.word	0x08005ee5
 8005b14:	08005f07 	.word	0x08005f07
 8005b18:	08005f3f 	.word	0x08005f3f
 8005b1c:	08005f63 	.word	0x08005f63

08005b20 <_cleanup_r>:
 8005b20:	4901      	ldr	r1, [pc, #4]	; (8005b28 <_cleanup_r+0x8>)
 8005b22:	f000 b8af 	b.w	8005c84 <_fwalk_reent>
 8005b26:	bf00      	nop
 8005b28:	08005a61 	.word	0x08005a61

08005b2c <__sfmoreglue>:
 8005b2c:	2268      	movs	r2, #104	; 0x68
 8005b2e:	b570      	push	{r4, r5, r6, lr}
 8005b30:	1e4d      	subs	r5, r1, #1
 8005b32:	4355      	muls	r5, r2
 8005b34:	460e      	mov	r6, r1
 8005b36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b3a:	f7ff f979 	bl	8004e30 <_malloc_r>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	b140      	cbz	r0, 8005b54 <__sfmoreglue+0x28>
 8005b42:	2100      	movs	r1, #0
 8005b44:	e9c0 1600 	strd	r1, r6, [r0]
 8005b48:	300c      	adds	r0, #12
 8005b4a:	60a0      	str	r0, [r4, #8]
 8005b4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b50:	f7ff f83a 	bl	8004bc8 <memset>
 8005b54:	4620      	mov	r0, r4
 8005b56:	bd70      	pop	{r4, r5, r6, pc}

08005b58 <__sfp_lock_acquire>:
 8005b58:	4801      	ldr	r0, [pc, #4]	; (8005b60 <__sfp_lock_acquire+0x8>)
 8005b5a:	f000 b8b3 	b.w	8005cc4 <__retarget_lock_acquire_recursive>
 8005b5e:	bf00      	nop
 8005b60:	20002c59 	.word	0x20002c59

08005b64 <__sfp_lock_release>:
 8005b64:	4801      	ldr	r0, [pc, #4]	; (8005b6c <__sfp_lock_release+0x8>)
 8005b66:	f000 b8ae 	b.w	8005cc6 <__retarget_lock_release_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20002c59 	.word	0x20002c59

08005b70 <__sinit_lock_acquire>:
 8005b70:	4801      	ldr	r0, [pc, #4]	; (8005b78 <__sinit_lock_acquire+0x8>)
 8005b72:	f000 b8a7 	b.w	8005cc4 <__retarget_lock_acquire_recursive>
 8005b76:	bf00      	nop
 8005b78:	20002c5a 	.word	0x20002c5a

08005b7c <__sinit_lock_release>:
 8005b7c:	4801      	ldr	r0, [pc, #4]	; (8005b84 <__sinit_lock_release+0x8>)
 8005b7e:	f000 b8a2 	b.w	8005cc6 <__retarget_lock_release_recursive>
 8005b82:	bf00      	nop
 8005b84:	20002c5a 	.word	0x20002c5a

08005b88 <__sinit>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	f7ff fff0 	bl	8005b70 <__sinit_lock_acquire>
 8005b90:	69a3      	ldr	r3, [r4, #24]
 8005b92:	b11b      	cbz	r3, 8005b9c <__sinit+0x14>
 8005b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b98:	f7ff bff0 	b.w	8005b7c <__sinit_lock_release>
 8005b9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ba0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ba2:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <__sinit+0x68>)
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <__sinit+0x6c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	bf08      	it	eq
 8005bae:	2301      	moveq	r3, #1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	bf08      	it	eq
 8005bb4:	61a3      	streq	r3, [r4, #24]
 8005bb6:	f000 f81f 	bl	8005bf8 <__sfp>
 8005bba:	6060      	str	r0, [r4, #4]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 f81b 	bl	8005bf8 <__sfp>
 8005bc2:	60a0      	str	r0, [r4, #8]
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 f817 	bl	8005bf8 <__sfp>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2104      	movs	r1, #4
 8005bce:	60e0      	str	r0, [r4, #12]
 8005bd0:	6860      	ldr	r0, [r4, #4]
 8005bd2:	f7ff ff81 	bl	8005ad8 <std>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	2109      	movs	r1, #9
 8005bda:	68a0      	ldr	r0, [r4, #8]
 8005bdc:	f7ff ff7c 	bl	8005ad8 <std>
 8005be0:	2202      	movs	r2, #2
 8005be2:	2112      	movs	r1, #18
 8005be4:	68e0      	ldr	r0, [r4, #12]
 8005be6:	f7ff ff77 	bl	8005ad8 <std>
 8005bea:	2301      	movs	r3, #1
 8005bec:	61a3      	str	r3, [r4, #24]
 8005bee:	e7d1      	b.n	8005b94 <__sinit+0xc>
 8005bf0:	0800bc44 	.word	0x0800bc44
 8005bf4:	08005b21 	.word	0x08005b21

08005bf8 <__sfp>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	f7ff ffac 	bl	8005b58 <__sfp_lock_acquire>
 8005c00:	4b1e      	ldr	r3, [pc, #120]	; (8005c7c <__sfp+0x84>)
 8005c02:	681e      	ldr	r6, [r3, #0]
 8005c04:	69b3      	ldr	r3, [r6, #24]
 8005c06:	b913      	cbnz	r3, 8005c0e <__sfp+0x16>
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff ffbd 	bl	8005b88 <__sinit>
 8005c0e:	3648      	adds	r6, #72	; 0x48
 8005c10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	d503      	bpl.n	8005c20 <__sfp+0x28>
 8005c18:	6833      	ldr	r3, [r6, #0]
 8005c1a:	b30b      	cbz	r3, 8005c60 <__sfp+0x68>
 8005c1c:	6836      	ldr	r6, [r6, #0]
 8005c1e:	e7f7      	b.n	8005c10 <__sfp+0x18>
 8005c20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c24:	b9d5      	cbnz	r5, 8005c5c <__sfp+0x64>
 8005c26:	4b16      	ldr	r3, [pc, #88]	; (8005c80 <__sfp+0x88>)
 8005c28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c2c:	60e3      	str	r3, [r4, #12]
 8005c2e:	6665      	str	r5, [r4, #100]	; 0x64
 8005c30:	f000 f847 	bl	8005cc2 <__retarget_lock_init_recursive>
 8005c34:	f7ff ff96 	bl	8005b64 <__sfp_lock_release>
 8005c38:	2208      	movs	r2, #8
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	61a5      	str	r5, [r4, #24]
 8005c48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c4c:	f7fe ffbc 	bl	8004bc8 <memset>
 8005c50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c58:	4620      	mov	r0, r4
 8005c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c5c:	3468      	adds	r4, #104	; 0x68
 8005c5e:	e7d9      	b.n	8005c14 <__sfp+0x1c>
 8005c60:	2104      	movs	r1, #4
 8005c62:	4638      	mov	r0, r7
 8005c64:	f7ff ff62 	bl	8005b2c <__sfmoreglue>
 8005c68:	4604      	mov	r4, r0
 8005c6a:	6030      	str	r0, [r6, #0]
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d1d5      	bne.n	8005c1c <__sfp+0x24>
 8005c70:	f7ff ff78 	bl	8005b64 <__sfp_lock_release>
 8005c74:	230c      	movs	r3, #12
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	e7ee      	b.n	8005c58 <__sfp+0x60>
 8005c7a:	bf00      	nop
 8005c7c:	0800bc44 	.word	0x0800bc44
 8005c80:	ffff0001 	.word	0xffff0001

08005c84 <_fwalk_reent>:
 8005c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c88:	4606      	mov	r6, r0
 8005c8a:	4688      	mov	r8, r1
 8005c8c:	2700      	movs	r7, #0
 8005c8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c96:	f1b9 0901 	subs.w	r9, r9, #1
 8005c9a:	d505      	bpl.n	8005ca8 <_fwalk_reent+0x24>
 8005c9c:	6824      	ldr	r4, [r4, #0]
 8005c9e:	2c00      	cmp	r4, #0
 8005ca0:	d1f7      	bne.n	8005c92 <_fwalk_reent+0xe>
 8005ca2:	4638      	mov	r0, r7
 8005ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca8:	89ab      	ldrh	r3, [r5, #12]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d907      	bls.n	8005cbe <_fwalk_reent+0x3a>
 8005cae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	d003      	beq.n	8005cbe <_fwalk_reent+0x3a>
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4630      	mov	r0, r6
 8005cba:	47c0      	blx	r8
 8005cbc:	4307      	orrs	r7, r0
 8005cbe:	3568      	adds	r5, #104	; 0x68
 8005cc0:	e7e9      	b.n	8005c96 <_fwalk_reent+0x12>

08005cc2 <__retarget_lock_init_recursive>:
 8005cc2:	4770      	bx	lr

08005cc4 <__retarget_lock_acquire_recursive>:
 8005cc4:	4770      	bx	lr

08005cc6 <__retarget_lock_release_recursive>:
 8005cc6:	4770      	bx	lr

08005cc8 <__swhatbuf_r>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	b096      	sub	sp, #88	; 0x58
 8005cd8:	da08      	bge.n	8005cec <__swhatbuf_r+0x24>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ce0:	602a      	str	r2, [r5, #0]
 8005ce2:	061a      	lsls	r2, r3, #24
 8005ce4:	d410      	bmi.n	8005d08 <__swhatbuf_r+0x40>
 8005ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cea:	e00e      	b.n	8005d0a <__swhatbuf_r+0x42>
 8005cec:	466a      	mov	r2, sp
 8005cee:	f000 f95f 	bl	8005fb0 <_fstat_r>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	dbf1      	blt.n	8005cda <__swhatbuf_r+0x12>
 8005cf6:	9a01      	ldr	r2, [sp, #4]
 8005cf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d00:	425a      	negs	r2, r3
 8005d02:	415a      	adcs	r2, r3
 8005d04:	602a      	str	r2, [r5, #0]
 8005d06:	e7ee      	b.n	8005ce6 <__swhatbuf_r+0x1e>
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	b016      	add	sp, #88	; 0x58
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d14 <__smakebuf_r>:
 8005d14:	898b      	ldrh	r3, [r1, #12]
 8005d16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d18:	079d      	lsls	r5, r3, #30
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	d507      	bpl.n	8005d30 <__smakebuf_r+0x1c>
 8005d20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	6123      	str	r3, [r4, #16]
 8005d28:	2301      	movs	r3, #1
 8005d2a:	6163      	str	r3, [r4, #20]
 8005d2c:	b002      	add	sp, #8
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	466a      	mov	r2, sp
 8005d32:	ab01      	add	r3, sp, #4
 8005d34:	f7ff ffc8 	bl	8005cc8 <__swhatbuf_r>
 8005d38:	9900      	ldr	r1, [sp, #0]
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	f7ff f877 	bl	8004e30 <_malloc_r>
 8005d42:	b948      	cbnz	r0, 8005d58 <__smakebuf_r+0x44>
 8005d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d48:	059a      	lsls	r2, r3, #22
 8005d4a:	d4ef      	bmi.n	8005d2c <__smakebuf_r+0x18>
 8005d4c:	f023 0303 	bic.w	r3, r3, #3
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	e7e3      	b.n	8005d20 <__smakebuf_r+0xc>
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <__smakebuf_r+0x7c>)
 8005d5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d5c:	89a3      	ldrh	r3, [r4, #12]
 8005d5e:	6020      	str	r0, [r4, #0]
 8005d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d64:	81a3      	strh	r3, [r4, #12]
 8005d66:	9b00      	ldr	r3, [sp, #0]
 8005d68:	6120      	str	r0, [r4, #16]
 8005d6a:	6163      	str	r3, [r4, #20]
 8005d6c:	9b01      	ldr	r3, [sp, #4]
 8005d6e:	b15b      	cbz	r3, 8005d88 <__smakebuf_r+0x74>
 8005d70:	4630      	mov	r0, r6
 8005d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d76:	f000 f92d 	bl	8005fd4 <_isatty_r>
 8005d7a:	b128      	cbz	r0, 8005d88 <__smakebuf_r+0x74>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	89a0      	ldrh	r0, [r4, #12]
 8005d8a:	4305      	orrs	r5, r0
 8005d8c:	81a5      	strh	r5, [r4, #12]
 8005d8e:	e7cd      	b.n	8005d2c <__smakebuf_r+0x18>
 8005d90:	08005b21 	.word	0x08005b21

08005d94 <memchr>:
 8005d94:	4603      	mov	r3, r0
 8005d96:	b510      	push	{r4, lr}
 8005d98:	b2c9      	uxtb	r1, r1
 8005d9a:	4402      	add	r2, r0
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	d101      	bne.n	8005da6 <memchr+0x12>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e003      	b.n	8005dae <memchr+0x1a>
 8005da6:	7804      	ldrb	r4, [r0, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	428c      	cmp	r4, r1
 8005dac:	d1f6      	bne.n	8005d9c <memchr+0x8>
 8005dae:	bd10      	pop	{r4, pc}

08005db0 <memmove>:
 8005db0:	4288      	cmp	r0, r1
 8005db2:	b510      	push	{r4, lr}
 8005db4:	eb01 0402 	add.w	r4, r1, r2
 8005db8:	d902      	bls.n	8005dc0 <memmove+0x10>
 8005dba:	4284      	cmp	r4, r0
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	d807      	bhi.n	8005dd0 <memmove+0x20>
 8005dc0:	1e43      	subs	r3, r0, #1
 8005dc2:	42a1      	cmp	r1, r4
 8005dc4:	d008      	beq.n	8005dd8 <memmove+0x28>
 8005dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dce:	e7f8      	b.n	8005dc2 <memmove+0x12>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4402      	add	r2, r0
 8005dd4:	428a      	cmp	r2, r1
 8005dd6:	d100      	bne.n	8005dda <memmove+0x2a>
 8005dd8:	bd10      	pop	{r4, pc}
 8005dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005de2:	e7f7      	b.n	8005dd4 <memmove+0x24>

08005de4 <__malloc_lock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__malloc_lock+0x8>)
 8005de6:	f7ff bf6d 	b.w	8005cc4 <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	20002c58 	.word	0x20002c58

08005df0 <__malloc_unlock>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__malloc_unlock+0x8>)
 8005df2:	f7ff bf68 	b.w	8005cc6 <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	20002c58 	.word	0x20002c58

08005dfc <_realloc_r>:
 8005dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e00:	4680      	mov	r8, r0
 8005e02:	4614      	mov	r4, r2
 8005e04:	460e      	mov	r6, r1
 8005e06:	b921      	cbnz	r1, 8005e12 <_realloc_r+0x16>
 8005e08:	4611      	mov	r1, r2
 8005e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	f7ff b80f 	b.w	8004e30 <_malloc_r>
 8005e12:	b92a      	cbnz	r2, 8005e20 <_realloc_r+0x24>
 8005e14:	f7fe ffa4 	bl	8004d60 <_free_r>
 8005e18:	4625      	mov	r5, r4
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e20:	f000 f8fa 	bl	8006018 <_malloc_usable_size_r>
 8005e24:	4284      	cmp	r4, r0
 8005e26:	4607      	mov	r7, r0
 8005e28:	d802      	bhi.n	8005e30 <_realloc_r+0x34>
 8005e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e2e:	d812      	bhi.n	8005e56 <_realloc_r+0x5a>
 8005e30:	4621      	mov	r1, r4
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7fe fffc 	bl	8004e30 <_malloc_r>
 8005e38:	4605      	mov	r5, r0
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	d0ed      	beq.n	8005e1a <_realloc_r+0x1e>
 8005e3e:	42bc      	cmp	r4, r7
 8005e40:	4622      	mov	r2, r4
 8005e42:	4631      	mov	r1, r6
 8005e44:	bf28      	it	cs
 8005e46:	463a      	movcs	r2, r7
 8005e48:	f7fe feb0 	bl	8004bac <memcpy>
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f7fe ff86 	bl	8004d60 <_free_r>
 8005e54:	e7e1      	b.n	8005e1a <_realloc_r+0x1e>
 8005e56:	4635      	mov	r5, r6
 8005e58:	e7df      	b.n	8005e1a <_realloc_r+0x1e>

08005e5a <_raise_r>:
 8005e5a:	291f      	cmp	r1, #31
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4604      	mov	r4, r0
 8005e60:	460d      	mov	r5, r1
 8005e62:	d904      	bls.n	8005e6e <_raise_r+0x14>
 8005e64:	2316      	movs	r3, #22
 8005e66:	6003      	str	r3, [r0, #0]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e70:	b112      	cbz	r2, 8005e78 <_raise_r+0x1e>
 8005e72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e76:	b94b      	cbnz	r3, 8005e8c <_raise_r+0x32>
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f000 f831 	bl	8005ee0 <_getpid_r>
 8005e7e:	462a      	mov	r2, r5
 8005e80:	4601      	mov	r1, r0
 8005e82:	4620      	mov	r0, r4
 8005e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e88:	f000 b818 	b.w	8005ebc <_kill_r>
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d00a      	beq.n	8005ea6 <_raise_r+0x4c>
 8005e90:	1c59      	adds	r1, r3, #1
 8005e92:	d103      	bne.n	8005e9c <_raise_r+0x42>
 8005e94:	2316      	movs	r3, #22
 8005e96:	6003      	str	r3, [r0, #0]
 8005e98:	2001      	movs	r0, #1
 8005e9a:	e7e7      	b.n	8005e6c <_raise_r+0x12>
 8005e9c:	2400      	movs	r4, #0
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ea4:	4798      	blx	r3
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e7e0      	b.n	8005e6c <_raise_r+0x12>
	...

08005eac <raise>:
 8005eac:	4b02      	ldr	r3, [pc, #8]	; (8005eb8 <raise+0xc>)
 8005eae:	4601      	mov	r1, r0
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	f7ff bfd2 	b.w	8005e5a <_raise_r>
 8005eb6:	bf00      	nop
 8005eb8:	2000005c 	.word	0x2000005c

08005ebc <_kill_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4d06      	ldr	r5, [pc, #24]	; (8005edc <_kill_r+0x20>)
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f7fb f91a 	bl	8001102 <_kill>
 8005ece:	1c43      	adds	r3, r0, #1
 8005ed0:	d102      	bne.n	8005ed8 <_kill_r+0x1c>
 8005ed2:	682b      	ldr	r3, [r5, #0]
 8005ed4:	b103      	cbz	r3, 8005ed8 <_kill_r+0x1c>
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	bd38      	pop	{r3, r4, r5, pc}
 8005eda:	bf00      	nop
 8005edc:	20002c5c 	.word	0x20002c5c

08005ee0 <_getpid_r>:
 8005ee0:	f7fb b908 	b.w	80010f4 <_getpid>

08005ee4 <__sread>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eec:	f000 f89c 	bl	8006028 <_read_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	bfab      	itete	ge
 8005ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ef8:	181b      	addge	r3, r3, r0
 8005efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005efe:	bfac      	ite	ge
 8005f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f02:	81a3      	strhlt	r3, [r4, #12]
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <__swrite>:
 8005f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	898b      	ldrh	r3, [r1, #12]
 8005f0e:	4605      	mov	r5, r0
 8005f10:	05db      	lsls	r3, r3, #23
 8005f12:	460c      	mov	r4, r1
 8005f14:	4616      	mov	r6, r2
 8005f16:	d505      	bpl.n	8005f24 <__swrite+0x1e>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f20:	f000 f868 	bl	8005ff4 <_lseek_r>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	4632      	mov	r2, r6
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2c:	81a3      	strh	r3, [r4, #12]
 8005f2e:	4628      	mov	r0, r5
 8005f30:	463b      	mov	r3, r7
 8005f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	f000 b817 	b.w	8005f6c <_write_r>

08005f3e <__sseek>:
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	460c      	mov	r4, r1
 8005f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f46:	f000 f855 	bl	8005ff4 <_lseek_r>
 8005f4a:	1c43      	adds	r3, r0, #1
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	bf15      	itete	ne
 8005f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f5a:	81a3      	strheq	r3, [r4, #12]
 8005f5c:	bf18      	it	ne
 8005f5e:	81a3      	strhne	r3, [r4, #12]
 8005f60:	bd10      	pop	{r4, pc}

08005f62 <__sclose>:
 8005f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f66:	f000 b813 	b.w	8005f90 <_close_r>
	...

08005f6c <_write_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	2200      	movs	r2, #0
 8005f76:	4d05      	ldr	r5, [pc, #20]	; (8005f8c <_write_r+0x20>)
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb f8f8 	bl	8001170 <_write>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_write_r+0x1e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_write_r+0x1e>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	20002c5c 	.word	0x20002c5c

08005f90 <_close_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	2300      	movs	r3, #0
 8005f94:	4d05      	ldr	r5, [pc, #20]	; (8005fac <_close_r+0x1c>)
 8005f96:	4604      	mov	r4, r0
 8005f98:	4608      	mov	r0, r1
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fb f904 	bl	80011a8 <_close>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d102      	bne.n	8005faa <_close_r+0x1a>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	b103      	cbz	r3, 8005faa <_close_r+0x1a>
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20002c5c 	.word	0x20002c5c

08005fb0 <_fstat_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	4d06      	ldr	r5, [pc, #24]	; (8005fd0 <_fstat_r+0x20>)
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	4608      	mov	r0, r1
 8005fba:	4611      	mov	r1, r2
 8005fbc:	602b      	str	r3, [r5, #0]
 8005fbe:	f7fb f8fe 	bl	80011be <_fstat>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	d102      	bne.n	8005fcc <_fstat_r+0x1c>
 8005fc6:	682b      	ldr	r3, [r5, #0]
 8005fc8:	b103      	cbz	r3, 8005fcc <_fstat_r+0x1c>
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	bd38      	pop	{r3, r4, r5, pc}
 8005fce:	bf00      	nop
 8005fd0:	20002c5c 	.word	0x20002c5c

08005fd4 <_isatty_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4d05      	ldr	r5, [pc, #20]	; (8005ff0 <_isatty_r+0x1c>)
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	f7fb f8fc 	bl	80011dc <_isatty>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_isatty_r+0x1a>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_isatty_r+0x1a>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	20002c5c 	.word	0x20002c5c

08005ff4 <_lseek_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	4608      	mov	r0, r1
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	4d05      	ldr	r5, [pc, #20]	; (8006014 <_lseek_r+0x20>)
 8006000:	602a      	str	r2, [r5, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	f7fb f8f4 	bl	80011f0 <_lseek>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_lseek_r+0x1e>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_lseek_r+0x1e>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	20002c5c 	.word	0x20002c5c

08006018 <_malloc_usable_size_r>:
 8006018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800601c:	1f18      	subs	r0, r3, #4
 800601e:	2b00      	cmp	r3, #0
 8006020:	bfbc      	itt	lt
 8006022:	580b      	ldrlt	r3, [r1, r0]
 8006024:	18c0      	addlt	r0, r0, r3
 8006026:	4770      	bx	lr

08006028 <_read_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	2200      	movs	r2, #0
 8006032:	4d05      	ldr	r5, [pc, #20]	; (8006048 <_read_r+0x20>)
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fb f87d 	bl	8001136 <_read>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_read_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_read_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20002c5c 	.word	0x20002c5c

0800604c <_init>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	bf00      	nop
 8006050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006052:	bc08      	pop	{r3}
 8006054:	469e      	mov	lr, r3
 8006056:	4770      	bx	lr

08006058 <_fini>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr
